#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BrickRigs

#include "Basic.hpp"

#include "BrickRigs_classes.hpp"
#include "BrickRigs_parameters.hpp"


namespace SDK
{

// Function BrickRigs.PagedListEntryWidget.InitializeEntry
// (Native, Event, Protected, BlueprintEvent)

void UPagedListEntryWidget::InitializeEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListEntryWidget", "InitializeEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListEntryWidget.OnClickedEntry
// (Final, Native, Protected, BlueprintCallable)

void UPagedListEntryWidget::OnClickedEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListEntryWidget", "OnClickedEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListEntryWidget.OnDoubleClickedEntry
// (Final, Native, Protected, BlueprintCallable)

void UPagedListEntryWidget::OnDoubleClickedEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListEntryWidget", "OnDoubleClickedEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListEntryWidget.UpdateButtonSelected
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListEntryWidget::UpdateButtonSelected(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListEntryWidget", "UpdateButtonSelected");

	Params::PagedListEntryWidget_UpdateButtonSelected Parms{};

	Parms.bNewSelected = bNewSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorObject.GetBodyTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UBrickEditorObject::GetBodyTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBodyTransform");

	Params::BrickEditorObject_GetBodyTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickEditor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickEditor* UBrickEditorObject::GetBrickEditor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditor");

	Params::BrickEditorObject_GetBrickEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectBoundsOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickEditorObject::GetBrickEditorObjectBoundsOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectBoundsOrigin");

	Params::BrickEditorObject_GetBrickEditorObjectBoundsOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBrickEditorObject::GetBrickEditorObjectDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectDisplayName");

	Params::BrickEditorObject_GetBrickEditorObjectDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectLocalBounds
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector*                         OutBoundsMin                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutBoundsMax                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::GetBrickEditorObjectLocalBounds(struct FVector* OutBoundsMin, struct FVector* OutBoundsMax) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectLocalBounds");

	Params::BrickEditorObject_GetBrickEditorObjectLocalBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBoundsMin != nullptr)
		*OutBoundsMin = std::move(Parms.OutBoundsMin);

	if (OutBoundsMax != nullptr)
		*OutBoundsMax = std::move(Parms.OutBoundsMax);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectSpawnLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickEditorObject::GetBrickEditorObjectSpawnLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectSpawnLocation");

	Params::BrickEditorObject_GetBrickEditorObjectSpawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectSpawnRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBrickEditorObject::GetBrickEditorObjectSpawnRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectSpawnRotation");

	Params::BrickEditorObject_GetBrickEditorObjectSpawnRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectSpawnTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UBrickEditorObject::GetBrickEditorObjectSpawnTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectSpawnTransform");

	Params::BrickEditorObject_GetBrickEditorObjectSpawnTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectTypeDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBrickEditorObject::GetBrickEditorObjectTypeDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorObjectTypeDisplayName");

	Params::BrickEditorObject_GetBrickEditorObjectTypeDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetBrickEditorStaticInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBrickEditorStaticInfo*     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UBrickEditorStaticInfo* UBrickEditorObject::GetBrickEditorStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetBrickEditorStaticInfo");

	Params::BrickEditorObject_GetBrickEditorStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetEditorInterface
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickEditorInterfaceComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickEditorInterfaceComponent* UBrickEditorObject::GetEditorInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetEditorInterface");

	Params::BrickEditorObject_GetEditorInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetEditorObjectID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickEditorObjectID       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FBrickEditorObjectID UBrickEditorObject::GetEditorObjectID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetEditorObjectID");

	Params::BrickEditorObject_GetEditorObjectID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetRootComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* UBrickEditorObject::GetRootComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetRootComponent");

	Params::BrickEditorObject_GetRootComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetStaticInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBrickEditorObjectStaticInfo*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UBrickEditorObjectStaticInfo* UBrickEditorObject::GetStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetStaticInfo");

	Params::BrickEditorObject_GetStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetStaticInfoClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UBrickEditorObject::GetStaticInfoClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetStaticInfoClass");

	Params::BrickEditorObject_GetStaticInfoClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.GetWorldTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UBrickEditorObject::GetWorldTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "GetWorldTransform");

	Params::BrickEditorObject_GetWorldTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.IsBrickEditorObjectBeingInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::IsBrickEditorObjectBeingInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "IsBrickEditorObjectBeingInitialized");

	Params::BrickEditorObject_IsBrickEditorObjectBeingInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.IsBrickEditorObjectBeingUninitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::IsBrickEditorObjectBeingUninitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "IsBrickEditorObjectBeingUninitialized");

	Params::BrickEditorObject_IsBrickEditorObjectBeingUninitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.IsBrickEditorObjectInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::IsBrickEditorObjectInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "IsBrickEditorObjectInitialized");

	Params::BrickEditorObject_IsBrickEditorObjectInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.IsInEditor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::IsInEditor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "IsInEditor");

	Params::BrickEditorObject_IsInEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.IsInThumbnailRender
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::IsInThumbnailRender() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "IsInThumbnailRender");

	Params::BrickEditorObject_IsInThumbnailRender Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorObject.IsSpawned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickEditorObject::IsSpawned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObject", "IsSpawned");

	Params::BrickEditorObject_IsSpawned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.BeginPlay
// (Event, Protected, BlueprintEvent)

void UBrick::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "BeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.Brick.ClusterConsumeFuel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::ClusterConsumeFuel(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "ClusterConsumeFuel");

	Params::Brick_ClusterConsumeFuel Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.EndPlay
// (Event, Protected, BlueprintEvent)

void UBrick::EndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "EndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.Brick.ExtinguishFire
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::ExtinguishFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "ExtinguishFire");

	Params::Brick_ExtinguishFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.Interact_PickUp
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrick::Interact_PickUp(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "Interact_PickUp");

	Params::Brick_Interact_PickUp Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Brick.MarkBrickBurnt
// (BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void UBrick::MarkBrickBurnt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "MarkBrickBurnt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Brick.Repair
// (Event, Public, BlueprintEvent)

void UBrick::Repair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "Repair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.Brick.SetIsBrickBurnt
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewBurnt                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrick::SetIsBrickBurnt(bool bNewBurnt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "SetIsBrickBurnt");

	Params::Brick_SetIsBrickBurnt Parms{};

	Parms.bNewBurnt = bNewBurnt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Brick.SetIsBrickDamaged
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewDamaged                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrick::SetIsBrickDamaged(bool bNewDamaged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "SetIsBrickDamaged");

	Params::Brick_SetIsBrickDamaged Parms{};

	Parms.bNewDamaged = bNewDamaged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Brick.SetOnFire
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::SetOnFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "SetOnFire");

	Params::Brick_SetOnFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.Tick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrick::Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "Tick");

	Params::Brick_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.Brick.UpdateBrickTickEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::UpdateBrickTickEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "UpdateBrickTickEnabled");

	Params::Brick_UpdateBrickTickEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.CanBrickBurn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::CanBrickBurn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "CanBrickBurn");

	Params::Brick_CanBrickBurn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.ClusterRootHasAnyFuel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::ClusterRootHasAnyFuel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "ClusterRootHasAnyFuel");

	Params::Brick_ClusterRootHasAnyFuel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.GetBrickClusterRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrick*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrick* UBrick::GetBrickClusterRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "GetBrickClusterRoot");

	Params::Brick_GetBrickClusterRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.GetBrickConnections
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UBrickConnection*>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UBrickConnection*> UBrick::GetBrickConnections() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "GetBrickConnections");

	Params::Brick_GetBrickConnections Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.GetBrickPartRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrick*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrick* UBrick::GetBrickPartRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "GetBrickPartRoot");

	Params::Brick_GetBrickPartRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.GetVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickVehicle*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickVehicle* UBrick::GetVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "GetVehicle");

	Params::Brick_GetVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.GetVehicleComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickVehicleComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickVehicleComponent* UBrick::GetVehicleComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "GetVehicleComponent");

	Params::Brick_GetVehicleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.GetVehicleStaticInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBrickVehicleStaticInfo*    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UBrickVehicleStaticInfo* UBrick::GetVehicleStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "GetVehicleStaticInfo");

	Params::Brick_GetVehicleStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsBrickBurnt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsBrickBurnt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsBrickBurnt");

	Params::Brick_IsBrickBurnt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsBrickClusterRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsBrickClusterRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsBrickClusterRoot");

	Params::Brick_IsBrickClusterRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsBrickDamaged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsBrickDamaged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsBrickDamaged");

	Params::Brick_IsBrickDamaged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsBrickPartRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsBrickPartRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsBrickPartRoot");

	Params::Brick_IsBrickPartRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsBrickTickEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsBrickTickEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsBrickTickEnabled");

	Params::Brick_IsBrickTickEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsConnectedToAnyBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsConnectedToAnyBrick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsConnectedToAnyBrick");

	Params::Brick_IsConnectedToAnyBrick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsConnectedToRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsConnectedToRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsConnectedToRoot");

	Params::Brick_IsConnectedToRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsControllable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsControllable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsControllable");

	Params::Brick_IsControllable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.IsOnFire
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::IsOnFire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "IsOnFire");

	Params::Brick_IsOnFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Brick.ShouldTick
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrick::ShouldTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Brick", "ShouldTick");

	Params::Brick_ShouldTick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickBorder.SetBrushStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIBrushStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickBorder::SetBrushStyle(EBrickUIBrushStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickBorder", "SetBrushStyle");

	Params::BrickBorder_SetBrushStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickBorder.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickBorder::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickBorder", "SetColorStyle");

	Params::BrickBorder_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickBorder.SetPaddingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIPaddingStyle                    NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickBorder::SetPaddingStyle(EBrickUIPaddingStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickBorder", "SetPaddingStyle");

	Params::BrickBorder_SetPaddingStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickBorder.SetStyleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickBorder::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickBorder", "SetStyleState");

	Params::BrickBorder_SetStyleState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CameraBrickWidget.UpdateTargetRange
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bHitSomething                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraBrickWidget::UpdateTargetRange(bool bHitSomething, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraBrickWidget", "UpdateTargetRange");

	Params::CameraBrickWidget_UpdateTargetRange Parms{};

	Parms.bHitSomething = bHitSomething;
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDIconWidget.InitializeIcon
// (Native, Event, Public, BlueprintEvent)

void UHUDIconWidget::InitializeIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "InitializeIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.PostInitializeIcon
// (Native, Event, Public, BlueprintEvent)

void UHUDIconWidget::PostInitializeIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "PostInitializeIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.SetIconColorStyle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconWidget::SetIconColorStyle(EBrickUIColorStyle NewColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "SetIconColorStyle");

	Params::HUDIconWidget_SetIconColorStyle Parms{};

	Parms.NewColorStyle = NewColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.SetIconSlot
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FBrickUIIconSlot&          NewSlot                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHUDIconWidget::SetIconSlot(const struct FBrickUIIconSlot& NewSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "SetIconSlot");

	Params::HUDIconWidget_SetIconSlot Parms{};

	Parms.NewSlot = std::move(NewSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.UninitializeIcon
// (Native, Event, Public, BlueprintEvent)

void UHUDIconWidget::UninitializeIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "UninitializeIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.UpdateIconRotation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconWidget::UpdateIconRotation(float NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "UpdateIconRotation");

	Params::HUDIconWidget_UpdateIconRotation Parms{};

	Parms.NewRotation = NewRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.UpdateIconStyle
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      InStyleState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconWidget::UpdateIconStyle(EBrickUIColorStyle InColorStyle, EBrickUIStyleState InStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "UpdateIconStyle");

	Params::HUDIconWidget_UpdateIconStyle Parms{};

	Parms.InColorStyle = InColorStyle;
	Parms.InStyleState = InStyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.UpdateNameText
// (Final, Native, Protected, BlueprintCallable)

void UHUDIconWidget::UpdateNameText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "UpdateNameText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconWidget.GetIconDisplayName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UHUDIconWidget::GetIconDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "GetIconDisplayName");

	Params::HUDIconWidget_GetIconDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.HUDIconWidget.GetIconWorldRotation
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// float*                                  OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHUDIconWidget::GetIconWorldRotation(float* OutRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconWidget", "GetIconWorldRotation");

	Params::HUDIconWidget_GetIconWorldRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotation != nullptr)
		*OutRotation = Parms.OutRotation;

	return Parms.ReturnValue;
}


// Function BrickRigs.AdminLoginWidget.OnTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminLoginWidget::OnTextChanged(const class FText& Text, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminLoginWidget", "OnTextChanged");

	Params::AdminLoginWidget_OnTextChanged Parms{};

	Parms.Text = std::move(Text);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminLoginWidget.UpdateCanEverBeAdmin
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanBeAdmin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminLoginWidget::UpdateCanEverBeAdmin(bool bCanBeAdmin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminLoginWidget", "UpdateCanEverBeAdmin");

	Params::AdminLoginWidget_UpdateCanEverBeAdmin Parms{};

	Parms.bCanBeAdmin = bCanBeAdmin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminLoginWidget.UpdateIsAdmin
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsAdmin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminLoginWidget::UpdateIsAdmin(bool bNewIsAdmin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminLoginWidget", "UpdateIsAdmin");

	Params::AdminLoginWidget_UpdateIsAdmin Parms{};

	Parms.bNewIsAdmin = bNewIsAdmin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickBuilding.OnRep_bCollapsed
// (Final, Native, Protected)

void ABrickBuilding::OnRep_bCollapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickBuilding", "OnRep_bCollapsed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.OnUpdateContentStyle
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      InStyleState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UButtonWidgetBase::OnUpdateContentStyle(EBrickUIColorStyle InColorStyle, EBrickUIStyleState InStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "OnUpdateContentStyle");

	Params::ButtonWidgetBase_OnUpdateContentStyle Parms{};

	Parms.InColorStyle = InColorStyle;
	Parms.InStyleState = InStyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.SetBrushStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIBrushStyle                      NewBrushStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UButtonWidgetBase::SetBrushStyle(EBrickUIBrushStyle NewBrushStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "SetBrushStyle");

	Params::ButtonWidgetBase_SetBrushStyle Parms{};

	Parms.NewBrushStyle = NewBrushStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UButtonWidgetBase::SetColorStyle(EBrickUIColorStyle NewColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "SetColorStyle");

	Params::ButtonWidgetBase_SetColorStyle Parms{};

	Parms.NewColorStyle = NewColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.SetCustomFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewUseCustomFocus                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewFocused                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UButtonWidgetBase::SetCustomFocus(bool bNewUseCustomFocus, bool bNewFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "SetCustomFocus");

	Params::ButtonWidgetBase_SetCustomFocus Parms{};

	Parms.bNewUseCustomFocus = bNewUseCustomFocus;
	Parms.bNewFocused = bNewFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.SetHiddenWhileUnfocused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewHidden                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UButtonWidgetBase::SetHiddenWhileUnfocused(bool bNewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "SetHiddenWhileUnfocused");

	Params::ButtonWidgetBase_SetHiddenWhileUnfocused Parms{};

	Parms.bNewHidden = bNewHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UButtonWidgetBase::SetIsSelected(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "SetIsSelected");

	Params::ButtonWidgetBase_SetIsSelected Parms{};

	Parms.bNewSelected = bNewSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.UpdateContentStyle
// (Final, Native, Public, BlueprintCallable)

void UButtonWidgetBase::UpdateContentStyle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "UpdateContentStyle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ButtonWidgetBase.GetButtonStyleState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUIStyleState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUIStyleState UButtonWidgetBase::GetButtonStyleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "GetButtonStyleState");

	Params::ButtonWidgetBase_GetButtonStyleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ButtonWidgetBase.GetContentStyleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUIStyleState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUIStyleState UButtonWidgetBase::GetContentStyleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonWidgetBase", "GetContentStyleState");

	Params::ButtonWidgetBase_GetContentStyleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickButtonWidget.AddContentWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickButtonWidget::AddContentWidget(class UWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickButtonWidget", "AddContentWidget");

	Params::BrickButtonWidget_AddContentWidget Parms{};

	Parms.InWidget = InWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickButtonWidget.SetContentHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InAlignment                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickButtonWidget::SetContentHorizontalAlignment(EHorizontalAlignment InAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickButtonWidget", "SetContentHorizontalAlignment");

	Params::BrickButtonWidget_SetContentHorizontalAlignment Parms{};

	Parms.InAlignment = InAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickButtonWidget.SetContentPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMargin&                   InPadding                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBrickButtonWidget::SetContentPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickButtonWidget", "SetContentPadding");

	Params::BrickButtonWidget_SetContentPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickButtonWidget.SetContentPaddingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIPaddingStyle                    InStyle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickButtonWidget::SetContentPaddingStyle(EBrickUIPaddingStyle InStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickButtonWidget", "SetContentPaddingStyle");

	Params::BrickButtonWidget_SetContentPaddingStyle Parms{};

	Parms.InStyle = InStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickButtonWidget.SetContentVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InAlignment                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickButtonWidget::SetContentVerticalAlignment(EVerticalAlignment InAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickButtonWidget", "SetContentVerticalAlignment");

	Params::BrickButtonWidget_SetContentVerticalAlignment Parms{};

	Parms.InAlignment = InAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupWidget.CancelPopup
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPopupWidget::CancelPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "CancelPopup");

	Params::PopupWidget_CancelPopup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.ClosePopup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPopupResult                            Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupWidget::ClosePopup(EPopupResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "ClosePopup");

	Params::PopupWidget_ClosePopup Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupWidget.ConfirmPopup
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPopupWidget::ConfirmPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "ConfirmPopup");

	Params::PopupWidget_ConfirmPopup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.GetPopupParams
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UPopupParams>         Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPopupParams*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPopupParams* UPopupWidget::GetPopupParams(TSubclassOf<class UPopupParams> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "GetPopupParams");

	Params::PopupWidget_GetPopupParams Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UPopupWidget::GetWidgetToFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "GetWidgetToFocus");

	Params::PopupWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.StepBack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPopupWidget::StepBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "StepBack");

	Params::PopupWidget_StepBack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.UpdatePopupTitle
// (Final, Native, Public, BlueprintCallable)

void UPopupWidget::UpdatePopupTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "UpdatePopupTitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupWidget.CanPopupBeClosed
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPopupWidget::CanPopupBeClosed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "CanPopupBeClosed");

	Params::PopupWidget_CanPopupBeClosed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.GetButtonPanel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuButtonPanelWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuButtonPanelWidget* UPopupWidget::GetButtonPanel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "GetButtonPanel");

	Params::PopupWidget_GetButtonPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.GetPopupContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPopupContainerWidget*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPopupContainerWidget* UPopupWidget::GetPopupContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "GetPopupContainer");

	Params::PopupWidget_GetPopupContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.GetPopupSizeRule
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// EPopupSizeRule                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPopupSizeRule UPopupWidget::GetPopupSizeRule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "GetPopupSizeRule");

	Params::PopupWidget_GetPopupSizeRule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.GetPopupTitle
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPopupWidget::GetPopupTitle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "GetPopupTitle");

	Params::PopupWidget_GetPopupTitle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupWidget.ShouldBeVisibleInPopupContainer
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPopupWidget::ShouldBeVisibleInPopupContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupWidget", "ShouldBeVisibleInPopupContainer");

	Params::PopupWidget_ShouldBeVisibleInPopupContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryPopupWidget.OnDropButtonClicked
// (Final, Native, Protected, BlueprintCallable)

void UInventoryPopupWidget::OnDropButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryPopupWidget", "OnDropButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryPopupWidget.UpdateDropArea
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInIsDragging                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInCanDrop                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsDragOver                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryPopupWidget::UpdateDropArea(bool bInIsDragging, bool bInCanDrop, bool bInIsDragOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryPopupWidget", "UpdateDropArea");

	Params::InventoryPopupWidget_UpdateDropArea Parms{};

	Parms.bInIsDragging = bInIsDragging;
	Parms.bInCanDrop = bInCanDrop;
	Parms.bInIsDragOver = bInIsDragOver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ActuatorBrick.Interact_Actuate
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActuatorBrick::Interact_Actuate(class ABrickPlayerController* OtherPC, float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActuatorBrick", "Interact_Actuate");

	Params::ActuatorBrick_Interact_Actuate Parms{};

	Parms.OtherPC = OtherPC;
	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ActuatorBrick.OnRep_ActuatorState
// (Final, Native, Private)

void UActuatorBrick::OnRep_ActuatorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActuatorBrick", "OnRep_ActuatorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuPageWidget.StepBack
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMenuPageWidget::StepBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuPageWidget", "StepBack");

	Params::MenuPageWidget_StepBack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MenuPageWidget.GetMenuWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuWidget* UMenuPageWidget::GetMenuWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuPageWidget", "GetMenuWidget");

	Params::MenuPageWidget_GetMenuWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MenuPageWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMenuPageWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuPageWidget", "GetWidgetToFocus");

	Params::MenuPageWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseInputComponent.LookRight
// (Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseInputComponent::LookRight(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "LookRight");

	Params::BaseInputComponent_LookRight Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.LookUp
// (Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseInputComponent::LookUp(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "LookUp");

	Params::BaseInputComponent_LookUp Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.MouseMoveRight
// (Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseInputComponent::MouseMoveRight(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "MouseMoveRight");

	Params::BaseInputComponent_MouseMoveRight Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.MouseMoveUp
// (Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseInputComponent::MouseMoveUp(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "MouseMoveUp");

	Params::BaseInputComponent_MouseMoveUp Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnPressedCycleHUDVisibility
// (Final, Native, Protected)

void UBaseInputComponent::OnPressedCycleHUDVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnPressedCycleHUDVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnPressedPivotCamera
// (Final, Native, Protected)

void UBaseInputComponent::OnPressedPivotCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnPressedPivotCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnPressedSpeedDownStep
// (Final, Native, Protected)

void UBaseInputComponent::OnPressedSpeedDownStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnPressedSpeedDownStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnPressedSpeedUpStep
// (Final, Native, Protected)

void UBaseInputComponent::OnPressedSpeedUpStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnPressedSpeedUpStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnPressedZoomInStep
// (Final, Native, Protected)

void UBaseInputComponent::OnPressedZoomInStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnPressedZoomInStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnPressedZoomOutStep
// (Final, Native, Protected)

void UBaseInputComponent::OnPressedZoomOutStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnPressedZoomOutStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.OnReleasedPivotCamera
// (Final, Native, Protected)

void UBaseInputComponent::OnReleasedPivotCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "OnReleasedPivotCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.SpeedUp
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseInputComponent::SpeedUp(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "SpeedUp");

	Params::BaseInputComponent_SpeedUp Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.ZoomIn
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseInputComponent::ZoomIn(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "ZoomIn");

	Params::BaseInputComponent_ZoomIn Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseInputComponent.GetCycleHUDVisibilityValueText
// (Final, Native, Protected, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBaseInputComponent::GetCycleHUDVisibilityValueText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInputComponent", "GetCycleHUDVisibilityValueText");

	Params::BaseInputComponent_GetCycleHUDVisibilityValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PawnInputComponent.OnHeldCycleCharacters
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldCycleCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldCycleCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldCycleVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldCycleVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldCycleVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldDestroyPawn
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldDestroyPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldDestroyPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldFreeCamera
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldFreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldFreeCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldOpenVehicle
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldOpenVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldOpenVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldRecover
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldRecover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldRecover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldRecoverDummies
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldRecoverDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldRecoverDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldScrapAllVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldScrapAllVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldScrapAllVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldSlomoSpeedDown
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldSlomoSpeedDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldSlomoSpeedDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldSlomoSpeedUp
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldSlomoSpeedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldSlomoSpeedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldSlowMotion
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldSlowMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldSlowMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnHeldToggleInvincible
// (Final, Native, Protected)

void UPawnInputComponent::OnHeldToggleInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnHeldToggleInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedCycleCharacters
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedCycleCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedCycleCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedCycleVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedCycleVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedCycleVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedDestroyPawn
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedDestroyPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedDestroyPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedFreeCamera
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedFreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedFreeCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedInventory
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedMap
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedOpenVehicle
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedOpenVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedOpenVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedProjectileCamera
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedProjectileCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedProjectileCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedRecover
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedRecover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedRecover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedRecoverDummies
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedRecoverDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedRecoverDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedScrapAllVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedScrapAllVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedScrapAllVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedSlomoSpeedDown
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedSlomoSpeedDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedSlomoSpeedDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedSlomoSpeedUp
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedSlomoSpeedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedSlomoSpeedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedSlowMotion
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedSlowMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedSlowMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnPressedToggleInvincible
// (Final, Native, Protected)

void UPawnInputComponent::OnPressedToggleInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnPressedToggleInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedCycleCharacters
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedCycleCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedCycleCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedCycleVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedCycleVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedCycleVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedDestroyPawn
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedDestroyPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedDestroyPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedFreeCamera
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedFreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedFreeCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedOpenVehicle
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedOpenVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedOpenVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedRecover
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedRecover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedRecover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedRecoverDummies
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedRecoverDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedRecoverDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedScrapAllVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedScrapAllVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedScrapAllVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedSlomoSpeedDown
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedSlomoSpeedDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedSlomoSpeedDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedSlomoSpeedUp
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedSlomoSpeedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedSlomoSpeedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedSlowMotion
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedSlowMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedSlowMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnReleasedToggleInvincible
// (Final, Native, Protected)

void UPawnInputComponent::OnReleasedToggleInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnReleasedToggleInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedCycleCharacters
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedCycleCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedCycleCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedCycleVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedCycleVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedCycleVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedDestroyPawn
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedDestroyPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedDestroyPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedFreeCamera
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedFreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedFreeCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedOpenVehicle
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedOpenVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedOpenVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedRecover
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedRecover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedRecover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedRecoverDummies
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedRecoverDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedRecoverDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedScrapAllVehicles
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedScrapAllVehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedScrapAllVehicles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedSlomoSpeedDown
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedSlomoSpeedDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedSlomoSpeedDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedSlomoSpeedUp
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedSlomoSpeedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedSlomoSpeedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedSlowMotion
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedSlowMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedSlowMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.OnTappedToggleInvincible
// (Final, Native, Protected)

void UPawnInputComponent::OnTappedToggleInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "OnTappedToggleInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PawnInputComponent.GetDestroyPawnEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    bInSecondaryAction                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPawnInputComponent::GetDestroyPawnEnabled(bool bInSecondaryAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "GetDestroyPawnEnabled");

	Params::PawnInputComponent_GetDestroyPawnEnabled Parms{};

	Parms.bInSecondaryAction = bInSecondaryAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PawnInputComponent.GetInventoryEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    bInSecondaryAction                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPawnInputComponent::GetInventoryEnabled(bool bInSecondaryAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnInputComponent", "GetInventoryEnabled");

	Params::PawnInputComponent_GetInventoryEnabled Parms{};

	Parms.bInSecondaryAction = bInSecondaryAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCheatManager.AddMoney
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickCheatManager::AddMoney(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCheatManager", "AddMoney");

	Params::BrickCheatManager_AddMoney Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCheatManager.AddScore
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickCheatManager::AddScore(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCheatManager", "AddScore");

	Params::BrickCheatManager_AddScore Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCheatManager.ForceSpectate
// (Final, Exec, Native, Public)

void UBrickCheatManager::ForceSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCheatManager", "ForceSpectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCheatManager.SetTargetOnFire
// (Final, Exec, Native, Public)

void UBrickCheatManager::SetTargetOnFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCheatManager", "SetTargetOnFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.EditKick
// (Final, Native, Protected, BlueprintCallable)

void UAdminMenuWidget::EditKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "EditKick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.KickPlayerById
// (Final, Native, Protected, BlueprintCallable)

void UAdminMenuWidget::KickPlayerById()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "KickPlayerById");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.OnListEntrySelected
// (Final, Native, Private)
// Parameters:
// class UPagedListEntryWidget*            Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoubleClick                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminMenuWidget::OnListEntrySelected(class UPagedListEntryWidget* Widget, bool bDoubleClick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "OnListEntrySelected");

	Params::AdminMenuWidget_OnListEntrySelected Parms{};

	Parms.Widget = Widget;
	Parms.bDoubleClick = bDoubleClick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.OnLoadListPage
// (Final, Native, Private)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminMenuWidget::OnLoadListPage(int32 NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "OnLoadListPage");

	Params::AdminMenuWidget_OnLoadListPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.RefreshPlayerList
// (Final, Native, Protected, BlueprintCallable)

void UAdminMenuWidget::RefreshPlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "RefreshPlayerList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.ShowPlayerProfile
// (Final, Native, Protected, BlueprintCallable)

void UAdminMenuWidget::ShowPlayerProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "ShowPlayerProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.AdminMenuWidget.UpdateCanViewAndEditKicks
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewCanViewAndEdit                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminMenuWidget::UpdateCanViewAndEditKicks(bool bNewCanViewAndEdit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "UpdateCanViewAndEditKicks");

	Params::AdminMenuWidget_UpdateCanViewAndEditKicks Parms{};

	Parms.bNewCanViewAndEdit = bNewCanViewAndEdit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.AdminMenuWidget.UpdateHasSelectedKick
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdminMenuWidget::UpdateHasSelectedKick(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdminMenuWidget", "UpdateHasSelectedKick");

	Params::AdminMenuWidget_UpdateHasSelectedKick Parms{};

	Parms.bNewSelected = bNewSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.KickPlayerPopupWidget.RevokeKick
// (Final, Native, Public, BlueprintCallable)

void UKickPlayerPopupWidget::RevokeKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KickPlayerPopupWidget", "RevokeKick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.KickPlayerPopupWidget.UpdateCanConfirmKick
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewCanConfirm                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKickPlayerPopupWidget::UpdateCanConfirmKick(bool bNewCanConfirm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KickPlayerPopupWidget", "UpdateCanConfirmKick");

	Params::KickPlayerPopupWidget_UpdateCanConfirmKick Parms{};

	Parms.bNewCanConfirm = bNewCanConfirm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.KickPlayerPopupWidget.UpdateCanRevokeKick
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanRevoke                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKickPlayerPopupWidget::UpdateCanRevokeKick(bool bCanRevoke)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KickPlayerPopupWidget", "UpdateCanRevokeKick");

	Params::KickPlayerPopupWidget_UpdateCanRevokeKick Parms{};

	Parms.bCanRevoke = bCanRevoke;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.KickPlayerPopupWidget.UpdateIsLoadingKick
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewLoading                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKickPlayerPopupWidget::UpdateIsLoadingKick(bool bNewLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KickPlayerPopupWidget", "UpdateIsLoadingKick");

	Params::KickPlayerPopupWidget_UpdateIsLoadingKick Parms{};

	Parms.bNewLoading = bNewLoading;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickUserWidget.GetTooltipContent
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FTooltipContent*                 OutContent                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickUserWidget::GetTooltipContent(struct FTooltipContent* OutContent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserWidget", "GetTooltipContent");

	Params::BrickUserWidget_GetTooltipContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutContent != nullptr)
		*OutContent = std::move(Parms.OutContent);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUserWidget.InitializeTooltip
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTooltipWidget*                   Tooltip                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickUserWidget::InitializeTooltip(class UTooltipWidget* Tooltip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserWidget", "InitializeTooltip");

	Params::BrickUserWidget_InitializeTooltip Parms{};

	Parms.Tooltip = Tooltip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickUserWidget.GetTooltipClass
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UBrickUserWidget::GetTooltipClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserWidget", "GetTooltipClass");

	Params::BrickUserWidget_GetTooltipClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetInteractionOptions
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInteractionOptions*             OutOptions                                             (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AInventoryItem::GetInteractionOptions(class ABrickPlayerController* PC, struct FInteractionOptions* OutOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetInteractionOptions");

	Params::InventoryItem_GetInteractionOptions Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOptions != nullptr)
		*OutOptions = std::move(Parms.OutOptions);
}


// Function BrickRigs.InventoryItem.Interact_PickUp
// (Final, Native, Protected)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItem::Interact_PickUp(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "Interact_PickUp");

	Params::InventoryItem_Interact_PickUp Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.OnDropped
// (Native, Event, Public, BlueprintEvent)

void AInventoryItem::OnDropped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "OnDropped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.OnEquipped
// (Native, Event, Public, BlueprintEvent)

void AInventoryItem::OnEquipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "OnEquipped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.OnPickedUp
// (Native, Event, Public, BlueprintEvent)

void AInventoryItem::OnPickedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "OnPickedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.OnStaticMeshSleep
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              Primitive                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItem::OnStaticMeshSleep(class UPrimitiveComponent* Primitive, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "OnStaticMeshSleep");

	Params::InventoryItem_OnStaticMeshSleep Parms{};

	Parms.Primitive = Primitive;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.OnUnequipped
// (Native, Event, Public, BlueprintEvent)

void AInventoryItem::OnUnequipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "OnUnequipped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.SetIsFiring
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewFiring                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItem::SetIsFiring(bool bNewFiring)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "SetIsFiring");

	Params::InventoryItem_SetIsFiring Parms{};

	Parms.bNewFiring = bNewFiring;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.SetNumItems
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItem::SetNumItems(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "SetNumItems");

	Params::InventoryItem_SetNumItems Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryItem.CanBePickedUp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryItem::CanBePickedUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "CanBePickedUp");

	Params::InventoryItem_CanBePickedUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickCharacter*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickCharacter* AInventoryItem::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetCharacter");

	Params::InventoryItem_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AInventoryItem::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetDisplayName");

	Params::InventoryItem_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetInventoryComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryComponent* AInventoryItem::GetInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetInventoryComponent");

	Params::InventoryItem_GetInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetItemPrice
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AInventoryItem::GetItemPrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetItemPrice");

	Params::InventoryItem_GetItemPrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetNumDefaultItems
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AInventoryItem::GetNumDefaultItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetNumDefaultItems");

	Params::InventoryItem_GetNumDefaultItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetNumItems
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AInventoryItem::GetNumItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetNumItems");

	Params::InventoryItem_GetNumItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetOwningInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryComponent* AInventoryItem::GetOwningInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetOwningInventory");

	Params::InventoryItem_GetOwningInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetStaticInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemStaticInfo*            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemStaticInfo* AInventoryItem::GetStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetStaticInfo");

	Params::InventoryItem_GetStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.GetViewingPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* AInventoryItem::GetViewingPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "GetViewingPlayer");

	Params::InventoryItem_GetViewingPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.IsDropped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryItem::IsDropped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "IsDropped");

	Params::InventoryItem_IsDropped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.NeedsThumbnailMID
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryItem::NeedsThumbnailMID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "NeedsThumbnailMID");

	Params::InventoryItem_NeedsThumbnailMID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryItem.UpdateThumbnailMID
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UMaterialInstanceDynamic*         InMID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryItem::UpdateThumbnailMID(class UMaterialInstanceDynamic* InMID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItem", "UpdateThumbnailMID");

	Params::InventoryItem_UpdateThumbnailMID Parms{};

	Parms.InMID = InMID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxItemContainerWidget.AddItemWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickComboBoxItemWidget*         Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxItemContainerWidget::AddItemWidget(class UBrickComboBoxItemWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemContainerWidget", "AddItemWidget");

	Params::BrickComboBoxItemContainerWidget_AddItemWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickComboBoxItemContainerWidget.OnUpdateButtonContentStyle
// (Final, Native, Private)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      InContentStyleState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxItemContainerWidget::OnUpdateButtonContentStyle(EBrickUIColorStyle InColorStyle, EBrickUIStyleState InContentStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemContainerWidget", "OnUpdateButtonContentStyle");

	Params::BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle Parms{};

	Parms.InColorStyle = InColorStyle;
	Parms.InContentStyleState = InContentStyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxItemContainerWidget.SelectItem
// (Final, Native, Public, BlueprintCallable)

void UBrickComboBoxItemContainerWidget::SelectItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemContainerWidget", "SelectItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxItemContainerWidget.UpdateIsSelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxItemContainerWidget::UpdateIsSelected(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemContainerWidget", "UpdateIsSelected");

	Params::BrickComboBoxItemContainerWidget_UpdateIsSelected Parms{};

	Parms.bNewSelected = bNewSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickComboBoxItemContainerWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UBrickComboBoxItemContainerWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemContainerWidget", "GetWidgetToFocus");

	Params::BrickComboBoxItemContainerWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickComboBoxItemWidget.InitializeItem
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComboBoxItemParams&  Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickComboBoxItemWidget::InitializeItem(int32 InItem, const struct FBrickComboBoxItemParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemWidget", "InitializeItem");

	Params::BrickComboBoxItemWidget_InitializeItem Parms{};

	Parms.InItem = InItem;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxItemWidget.SetNoItemBrush
// (Event, Protected, BlueprintEvent)

void UBrickComboBoxItemWidget::SetNoItemBrush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemWidget", "SetNoItemBrush");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.BrickComboBoxItemWidget.UpdateIconVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxItemWidget::UpdateIconVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemWidget", "UpdateIconVisibility");

	Params::BrickComboBoxItemWidget_UpdateIconVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxItemWidget.UpdateItemStyle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      InStyleState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxItemWidget::UpdateItemStyle(EBrickUIColorStyle InColorStyle, EBrickUIStyleState InStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemWidget", "UpdateItemStyle");

	Params::BrickComboBoxItemWidget_UpdateItemStyle Parms{};

	Parms.InColorStyle = InColorStyle;
	Parms.InStyleState = InStyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxItemWidget.UpdateTextVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxItemWidget::UpdateTextVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxItemWidget", "UpdateTextVisibility");

	Params::BrickComboBoxItemWidget_UpdateTextVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MatchEndWidget.OnClickedContinue
// (Final, Native, Protected, BlueprintCallable)

void UMatchEndWidget::OnClickedContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEndWidget", "OnClickedContinue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MatchEndWidget.UpdateContinueButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   TimeRemaining                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsHost                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchEndWidget::UpdateContinueButton(int32 TimeRemaining, bool bIsHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEndWidget", "UpdateContinueButton");

	Params::MatchEndWidget_UpdateContinueButton Parms{};

	Parms.TimeRemaining = TimeRemaining;
	Parms.bIsHost = bIsHost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MatchEndWidget.UpdateMatchWinner
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickTeam*                       WinnerTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           TeamAttitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchEndWidget::UpdateMatchWinner(class UBrickTeam* WinnerTeam, ETeamAttitude TeamAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEndWidget", "UpdateMatchWinner");

	Params::MatchEndWidget_UpdateMatchWinner Parms{};

	Parms.WinnerTeam = WinnerTeam;
	Parms.TeamAttitude = TeamAttitude;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MatchEndWidget.GetWidgetToFocus
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMatchEndWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEndWidget", "GetWidgetToFocus");

	Params::MatchEndWidget_GetWidgetToFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsSlotCompatible
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInventorySlot&            InSlot                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FInventoryItemRef&         InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsSlotCompatible(const struct FInventorySlot& InSlot, const struct FInventoryItemRef& InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryComponent", "IsSlotCompatible");

	Params::InventoryComponent_IsSlotCompatible Parms{};

	Parms.InSlot = std::move(InSlot);
	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.MoveItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMoveInventoryItemParams&  Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AInventoryItem*>*          OutDroppedItems                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::MoveItems(const struct FMoveInventoryItemParams& Params_0, TArray<class AInventoryItem*>* OutDroppedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryComponent", "MoveItems");

	Params::InventoryComponent_MoveItems Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDroppedItems != nullptr)
		*OutDroppedItems = std::move(Parms.OutDroppedItems);

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.ConsumeAmmo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAmmoInfo&                 InAmmo                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   NumRequired                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::ConsumeAmmo(const struct FAmmoInfo& InAmmo, int32 NumRequired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "ConsumeAmmo");

	Params::InventoryComponent_ConsumeAmmo Parms{};

	Parms.InAmmo = std::move(InAmmo);
	Parms.NumRequired = NumRequired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.ConsumeItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInventorySlotID&          SlotID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::ConsumeItems(const struct FInventorySlotID& SlotID, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "ConsumeItems");

	Params::InventoryComponent_ConsumeItems Parms{};

	Parms.SlotID = std::move(SlotID);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.DebugSpawnItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AInventoryItem>       ItemClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::DebugSpawnItems(TSubclassOf<class AInventoryItem> ItemClass, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "DebugSpawnItems");

	Params::InventoryComponent_DebugSpawnItems Parms{};

	Parms.ItemClass = ItemClass;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.EmptyInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCallDelegates                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::EmptyInventory(bool bCallDelegates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "EmptyInventory");

	Params::InventoryComponent_EmptyInventory Parms{};

	Parms.bCallDelegates = bCallDelegates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.Interact_Inventory
// (Final, Native, Public)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::Interact_Inventory(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "Interact_Inventory");

	Params::InventoryComponent_Interact_Inventory Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.MulticastOnPickedUpItems
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UInventoryComponent::MulticastOnPickedUpItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "MulticastOnPickedUpItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.SetContentHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHidden                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::SetContentHidden(bool bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SetContentHidden");

	Params::InventoryComponent_SetContentHidden Parms{};

	Parms.bHidden = bHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.SetInventoryProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInventoryProperties&      InProps                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInventoryComponent::SetInventoryProperties(const struct FInventoryProperties& InProps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SetInventoryProperties");

	Params::InventoryComponent_SetInventoryProperties Parms{};

	Parms.InProps = std::move(InProps);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.SetSpecialSlotAttachParent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  NewAttachParent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::SetSpecialSlotAttachParent(class USceneComponent* NewAttachParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SetSpecialSlotAttachParent");

	Params::InventoryComponent_SetSpecialSlotAttachParent Parms{};

	Parms.NewAttachParent = NewAttachParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.SpawnInventoryLoadout
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInventoryLoadout&         Loadout                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInventoryComponent::SpawnInventoryLoadout(const struct FInventoryLoadout& Loadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SpawnInventoryLoadout");

	Params::InventoryComponent_SpawnInventoryLoadout Parms{};

	Parms.Loadout = std::move(Loadout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventoryComponent.SpawnItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AInventoryItem>       ItemClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::SpawnItems(TSubclassOf<class AInventoryItem> ItemClass, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SpawnItems");

	Params::InventoryComponent_SpawnItems Parms{};

	Parms.ItemClass = ItemClass;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.DoesSpecialSlotSupportItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AInventoryItem*             InItem                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::DoesSpecialSlotSupportItem(const class AInventoryItem* InItem, int32 SlotIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "DoesSpecialSlotSupportItem");

	Params::InventoryComponent_DoesSpecialSlotSupportItem Parms{};

	Parms.InItem = InItem;
	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.FindFreeSlotID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventoryItemRef&         InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bTryToReplace                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventorySlotID                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventorySlotID UInventoryComponent::FindFreeSlotID(const struct FInventoryItemRef& InItem, bool bTryToReplace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "FindFreeSlotID");

	Params::InventoryComponent_FindFreeSlotID Parms{};

	Parms.InItem = std::move(InItem);
	Parms.bTryToReplace = bTryToReplace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.FindFreeSpecialSlotID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventoryItemRef&         InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TSet<struct FInventorySlotID>&    InSlotIDs                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInventorySlotID                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventorySlotID UInventoryComponent::FindFreeSpecialSlotID(const struct FInventoryItemRef& InItem, const TSet<struct FInventorySlotID>& InSlotIDs) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "FindFreeSpecialSlotID");

	Params::InventoryComponent_FindFreeSpecialSlotID Parms{};

	Parms.InItem = std::move(InItem);
	Parms.InSlotIDs = std::move(InSlotIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.FindFreeWildcardSlotID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventoryItemRef&         InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInventorySlotID                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventorySlotID UInventoryComponent::FindFreeWildcardSlotID(const struct FInventoryItemRef& InItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "FindFreeWildcardSlotID");

	Params::InventoryComponent_FindFreeWildcardSlotID Parms{};

	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetAmmo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FAmmoInfo>&         InAmmoTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::GetAmmo(const TArray<struct FAmmoInfo>& InAmmoTypes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetAmmo");

	Params::InventoryComponent_GetAmmo Parms{};

	Parms.InAmmoTypes = std::move(InAmmoTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryComponent::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetDisplayName");

	Params::InventoryComponent_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventory                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FInventory UInventoryComponent::GetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetInventory");

	Params::InventoryComponent_GetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetInventorySlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FInventorySlot>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FInventorySlot> UInventoryComponent::GetInventorySlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetInventorySlots");

	Params::InventoryComponent_GetInventorySlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetNumItemsOfClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::GetNumItemsOfClass(class UClass* InClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetNumItemsOfClass");

	Params::InventoryComponent_GetNumItemsOfClass Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetSpecialSlotID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventorySlotID                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventorySlotID UInventoryComponent::GetSpecialSlotID(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetSpecialSlotID");

	Params::InventoryComponent_GetSpecialSlotID Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.GetWildcardSlotID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventorySlotID                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FInventorySlotID UInventoryComponent::GetWildcardSlotID(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetWildcardSlotID");

	Params::InventoryComponent_GetWildcardSlotID Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.HasInfiniteAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::HasInfiniteAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "HasInfiniteAmmo");

	Params::InventoryComponent_HasInfiniteAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.HasInventorySlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventorySlotID&          InSlotID                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::HasInventorySlot(const struct FInventorySlotID& InSlotID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "HasInventorySlot");

	Params::InventoryComponent_HasInventorySlot Parms{};

	Parms.InSlotID = std::move(InSlotID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsContentHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsContentHidden() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "IsContentHidden");

	Params::InventoryComponent_IsContentHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "IsEmpty");

	Params::InventoryComponent_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsSlotFreeOrCompatible
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventorySlotID&          InSlotID                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInventoryItemRef&         InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsSlotFreeOrCompatible(const struct FInventorySlotID& InSlotID, const struct FInventoryItemRef& InItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "IsSlotFreeOrCompatible");

	Params::InventoryComponent_IsSlotFreeOrCompatible Parms{};

	Parms.InSlotID = std::move(InSlotID);
	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsSpecialSlotID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventorySlotID&          InSlotID                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsSpecialSlotID(const struct FInventorySlotID& InSlotID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "IsSpecialSlotID");

	Params::InventoryComponent_IsSpecialSlotID Parms{};

	Parms.InSlotID = std::move(InSlotID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsValidSlotID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventorySlotID&          InSlotID                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsValidSlotID(const struct FInventorySlotID& InSlotID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "IsValidSlotID");

	Params::InventoryComponent_IsValidSlotID Parms{};

	Parms.InSlotID = std::move(InSlotID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.IsWildcardSlotID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInventorySlotID&          InSlotID                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::IsWildcardSlotID(const struct FInventorySlotID& InSlotID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "IsWildcardSlotID");

	Params::InventoryComponent_IsWildcardSlotID Parms{};

	Parms.InSlotID = std::move(InSlotID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventoryComponent.RequiresSpecialSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AInventoryItem*             InItem                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<struct FInventorySlotID>*          OutSlots                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::RequiresSpecialSlot(const class AInventoryItem* InItem, TSet<struct FInventorySlotID>* OutSlots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "RequiresSpecialSlot");

	Params::InventoryComponent_RequiresSpecialSlot Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSlots != nullptr)
		*OutSlots = std::move(Parms.OutSlots);

	return Parms.ReturnValue;
}


// Function BrickRigs.MenuAnchorWidget.CloseMenu
// (Final, Native, Public, BlueprintCallable)

void UMenuAnchorWidget::CloseMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuAnchorWidget", "CloseMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuAnchorWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMenuAnchorWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuAnchorWidget", "GetWidgetToFocus");

	Params::MenuAnchorWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.LegacyBuilding.ConstructBuildingPart
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   NumX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Floors                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBuildingPart*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBuildingPart* ALegacyBuilding::ConstructBuildingPart(int32 NumX, int32 NumY, int32 Floors, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LegacyBuilding", "ConstructBuildingPart");

	Params::LegacyBuilding_ConstructBuildingPart Parms{};

	Parms.NumX = NumX;
	Parms.NumY = NumY;
	Parms.Floors = Floors;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.LegacyBuilding.ConstructFlatRoof
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UBuildingPart*                    Part                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALegacyBuilding::ConstructFlatRoof(class UBuildingPart* Part, uint8 Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LegacyBuilding", "ConstructFlatRoof");

	Params::LegacyBuilding_ConstructFlatRoof Parms{};

	Parms.Part = Part;
	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.LegacyBuilding.ConstructIndustrialRoof
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UBuildingPart*                    Part                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   RoofSlopeMesh                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   RoofMesh                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   WallMesh                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALegacyBuilding::ConstructIndustrialRoof(class UBuildingPart* Part, uint8 RoofSlopeMesh, uint8 RoofMesh, uint8 WallMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LegacyBuilding", "ConstructIndustrialRoof");

	Params::LegacyBuilding_ConstructIndustrialRoof Parms{};

	Parms.Part = Part;
	Parms.RoofSlopeMesh = RoofSlopeMesh;
	Parms.RoofMesh = RoofMesh;
	Parms.WallMesh = WallMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.LegacyBuilding.ConstructRoof
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UBuildingPart*                    Part                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   RoofGableMesh                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   RoofMesh                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRotate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALegacyBuilding::ConstructRoof(class UBuildingPart* Part, uint8 RoofGableMesh, uint8 RoofMesh, bool bRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LegacyBuilding", "ConstructRoof");

	Params::LegacyBuilding_ConstructRoof Parms{};

	Parms.Part = Part;
	Parms.RoofGableMesh = RoofGableMesh;
	Parms.RoofMesh = RoofMesh;
	Parms.bRotate = bRotate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.LegacyBuilding.SpawnBuildingPart
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UBuildingPart*                    Part                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALegacyBuilding::SpawnBuildingPart(class UBuildingPart* Part)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LegacyBuilding", "SpawnBuildingPart");

	Params::LegacyBuilding_SpawnBuildingPart Parms{};

	Parms.Part = Part;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyWidget.UpdateIsReadOnly
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewReadOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropertyWidget::UpdateIsReadOnly(bool bNewReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyWidget", "UpdateIsReadOnly");

	Params::PropertyWidget_UpdateIsReadOnly Parms{};

	Parms.bNewReadOnly = bNewReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyWidget.GetFocusedSubProperty
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const struct FWidgetPathWrapper&        WidgetPath                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UPropertyWidget::GetFocusedSubProperty(const struct FWidgetPathWrapper& WidgetPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyWidget", "GetFocusedSubProperty");

	Params::PropertyWidget_GetFocusedSubProperty Parms{};

	Parms.WidgetPath = std::move(WidgetPath);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyWidget.GetPropertyContainerWidget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPropertyContainerWidget*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPropertyContainerWidget* UPropertyWidget::GetPropertyContainerWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyWidget", "GetPropertyContainerWidget");

	Params::PropertyWidget_GetPropertyContainerWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ObjectPropertyWidget.InitializeItem
// (Native, Protected, HasOutParams)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickComboBoxItemParams*        OutParams                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UObjectPropertyWidget::InitializeItem(int32 Item, struct FBrickComboBoxItemParams* OutParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPropertyWidget", "InitializeItem");

	Params::ObjectPropertyWidget_InitializeItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParams != nullptr)
		*OutParams = std::move(Parms.OutParams);
}


// Function BrickRigs.ObjectPropertyWidget.OnItemSelected
// (Final, Native, Protected)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UObjectPropertyWidget::OnItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPropertyWidget", "OnItemSelected");

	Params::ObjectPropertyWidget_OnItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.AddItemContainerWidget
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickComboBoxItemContainerWidget*Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::AddItemContainerWidget(class UBrickComboBoxItemContainerWidget* Widget, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "AddItemContainerWidget");

	Params::BrickComboBoxWidget_AddItemContainerWidget Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.AddSelectedItemWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickComboBoxItemWidget*         Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::AddSelectedItemWidget(class UBrickComboBoxItemWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "AddSelectedItemWidget");

	Params::BrickComboBoxWidget_AddSelectedItemWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickComboBoxWidget.InitItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumItems                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectedItem                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::InitItems(int32 InNumItems, int32 InSelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "InitItems");

	Params::BrickComboBoxWidget_InitItems Parms{};

	Parms.InNumItems = InNumItems;
	Parms.InSelectedItem = InSelectedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.InitItemsComplex
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    InItems                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InSelectedItem                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::InitItemsComplex(const TArray<int32>& InItems, int32 InSelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "InitItemsComplex");

	Params::BrickComboBoxWidget_InitItemsComplex Parms{};

	Parms.InItems = std::move(InItems);
	Parms.InSelectedItem = InSelectedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.OnComboBoxMenuItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::OnComboBoxMenuItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "OnComboBoxMenuItemSelected");

	Params::BrickComboBoxWidget_OnComboBoxMenuItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.SetComboBoxExpanded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewExpanded                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::SetComboBoxExpanded(bool bNewExpanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "SetComboBoxExpanded");

	Params::BrickComboBoxWidget_SetComboBoxExpanded Parms{};

	Parms.bNewExpanded = bNewExpanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.SetMaxItemsPerRow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxItemsPerRow                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::SetMaxItemsPerRow(int32 InMaxItemsPerRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "SetMaxItemsPerRow");

	Params::BrickComboBoxWidget_SetMaxItemsPerRow Parms{};

	Parms.InMaxItemsPerRow = InMaxItemsPerRow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.SetMaxListItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxListItems                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::SetMaxListItems(int32 InMaxListItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "SetMaxListItems");

	Params::BrickComboBoxWidget_SetMaxListItems Parms{};

	Parms.InMaxListItems = InMaxListItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.SetSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::SetSelectedItem(int32 InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "SetSelectedItem");

	Params::BrickComboBoxWidget_SetSelectedItem Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.ToggleComboBoxExpanded
// (Final, Native, Public, BlueprintCallable)

void UBrickComboBoxWidget::ToggleComboBoxExpanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "ToggleComboBoxExpanded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickComboBoxWidget.UpdateIsExpanded
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInIsExpanded                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::UpdateIsExpanded(bool bInIsExpanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "UpdateIsExpanded");

	Params::BrickComboBoxWidget_UpdateIsExpanded Parms{};

	Parms.bInIsExpanded = bInIsExpanded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickComboBoxWidget.UpdateUseItemList
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInUseItemList                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComboBoxWidget::UpdateUseItemList(bool bInUseItemList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "UpdateUseItemList");

	Params::BrickComboBoxWidget_UpdateUseItemList Parms{};

	Parms.bInUseItemList = bInUseItemList;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickComboBoxWidget.GetNumItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickComboBoxWidget::GetNumItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "GetNumItems");

	Params::BrickComboBoxWidget_GetNumItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickComboBoxWidget.GetSelectedItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickComboBoxWidget::GetSelectedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "GetSelectedItem");

	Params::BrickComboBoxWidget_GetSelectedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickComboBoxWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UBrickComboBoxWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "GetWidgetToFocus");

	Params::BrickComboBoxWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickComboBoxWidget.IsComboBoxExpanded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickComboBoxWidget::IsComboBoxExpanded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComboBoxWidget", "IsComboBoxExpanded");

	Params::BrickComboBoxWidget_IsComboBoxExpanded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.ConstructVehicle
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUGCFileInfo&              InFileInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           InSpawnPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickPlayerController*           InSpawningPC                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAvoidCollision                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::ConstructVehicle(const struct FUGCFileInfo& InFileInfo, class AActor* InSpawnPoint, class ABrickPlayerController* InSpawningPC, bool bAvoidCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "ConstructVehicle");

	Params::BrickVehicle_ConstructVehicle Parms{};

	Parms.InFileInfo = std::move(InFileInfo);
	Parms.InSpawnPoint = InSpawnPoint;
	Parms.InSpawningPC = InSpawningPC;
	Parms.bAvoidCollision = bAvoidCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.DebugVehicleClusters
// (Final, Exec, Native, Public, BlueprintCallable)

void ABrickVehicle::DebugVehicleClusters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "DebugVehicleClusters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.EjectAllCharacters
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABrickVehicle::EjectAllCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "EjectAllCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.ExplodeVehicle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABrickVehicle::ExplodeVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "ExplodeVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.Interact_EnterVehicle
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::Interact_EnterVehicle(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "Interact_EnterVehicle");

	Params::BrickVehicle_Interact_EnterVehicle Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.Interact_ScrapVehicleFromInteraction
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::Interact_ScrapVehicleFromInteraction(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "Interact_ScrapVehicleFromInteraction");

	Params::BrickVehicle_Interact_ScrapVehicleFromInteraction Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.Interact_ScrapVehicleFromMap
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::Interact_ScrapVehicleFromMap(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "Interact_ScrapVehicleFromMap");

	Params::BrickVehicle_Interact_ScrapVehicleFromMap Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.OnRep_PassengerTeamIds
// (Final, Native, Private)

void ABrickVehicle::OnRep_PassengerTeamIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "OnRep_PassengerTeamIds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.OnRep_PinMode
// (Final, Native, Private)

void ABrickVehicle::OnRep_PinMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "OnRep_PinMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.OnRep_RepFuelLevelRatio
// (Final, Native, Private)

void ABrickVehicle::OnRep_RepFuelLevelRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "OnRep_RepFuelLevelRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.OnRep_RestartTransform
// (Final, Native, Private)

void ABrickVehicle::OnRep_RestartTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "OnRep_RestartTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.PlayHandlingSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::PlayHandlingSound(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "PlayHandlingSound");

	Params::BrickVehicle_PlayHandlingSound Parms{};

	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.RepairVehicle
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InRotation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           InSpawnPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAvoidCollision                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::RepairVehicle(const struct FVector& InLocation, const struct FRotator& InRotation, class AActor* InSpawnPoint, bool bAvoidCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "RepairVehicle");

	Params::BrickVehicle_RepairVehicle Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);
	Parms.InSpawnPoint = InSpawnPoint;
	Parms.bAvoidCollision = bAvoidCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.ScrapVehicle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABrickVehicle::ScrapVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "ScrapVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.ServerApplySeatCollisionDamage
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FBrickEditorObjectID&      SeatID                                                 (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickVehicle::ServerApplySeatCollisionDamage(const struct FBrickEditorObjectID& SeatID, float DamageAmount, const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "ServerApplySeatCollisionDamage");

	Params::BrickVehicle_ServerApplySeatCollisionDamage Parms{};

	Parms.SeatID = std::move(SeatID);
	Parms.DamageAmount = DamageAmount;
	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.ServerExplodeTankBricks
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const TArray<struct FBrickEditorObjectID>&Tanks                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickVehicle::ServerExplodeTankBricks(const TArray<struct FBrickEditorObjectID>& Tanks, const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "ServerExplodeTankBricks");

	Params::BrickVehicle_ServerExplodeTankBricks Parms{};

	Parms.Tanks = std::move(Tanks);
	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.ServerOnBrokeDestructibleInstances
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UDestructibleInstancesComponent*  Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint16>&                   Instances                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickVehicle::ServerOnBrokeDestructibleInstances(class UDestructibleInstancesComponent* Comp, const TArray<uint16>& Instances, const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "ServerOnBrokeDestructibleInstances");

	Params::BrickVehicle_ServerOnBrokeDestructibleInstances Parms{};

	Parms.Comp = Comp;
	Parms.Instances = std::move(Instances);
	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.SetFuelLevel
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::SetFuelLevel(float NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "SetFuelLevel");

	Params::BrickVehicle_SetFuelLevel Parms{};

	Parms.NewLevel = NewLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.SetPinMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EVehiclePinMode                         NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::SetPinMode(EVehiclePinMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "SetPinMode");

	Params::BrickVehicle_SetPinMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.SetRelativeFuelLevel
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             NewLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickVehicle::SetRelativeFuelLevel(const float NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "SetRelativeFuelLevel");

	Params::BrickVehicle_SetRelativeFuelLevel Parms{};

	Parms.NewLevel = NewLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickVehicle.GetAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickVehicle::GetAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetAmmo");

	Params::BrickVehicle_GetAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetAmmoCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickVehicle::GetAmmoCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetAmmoCapacity");

	Params::BrickVehicle_GetAmmoCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetCameras
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FBrickEditorObjectID>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FBrickEditorObjectID> ABrickVehicle::GetCameras() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetCameras");

	Params::BrickVehicle_GetCameras Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetCurrentRPM
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickVehicle::GetCurrentRPM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetCurrentRPM");

	Params::BrickVehicle_GetCurrentRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetDriverCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickCharacter*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickCharacter* ABrickVehicle::GetDriverCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetDriverCharacter");

	Params::BrickVehicle_GetDriverCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetDriverSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USeatBrick*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USeatBrick* ABrickVehicle::GetDriverSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetDriverSeat");

	Params::BrickVehicle_GetDriverSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetFuelCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickVehicle::GetFuelCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetFuelCapacity");

	Params::BrickVehicle_GetFuelCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetFuelLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickVehicle::GetFuelLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetFuelLevel");

	Params::BrickVehicle_GetFuelLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetGuns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FBrickEditorObjectID>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FBrickEditorObjectID> ABrickVehicle::GetGuns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetGuns");

	Params::BrickVehicle_GetGuns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetInventoryComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryComponent* ABrickVehicle::GetInventoryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetInventoryComponent");

	Params::BrickVehicle_GetInventoryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetMaxRPM
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickVehicle::GetMaxRPM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetMaxRPM");

	Params::BrickVehicle_GetMaxRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetMotor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMotorBrick*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMotorBrick* ABrickVehicle::GetMotor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetMotor");

	Params::BrickVehicle_GetMotor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetNumPassengers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickVehicle::GetNumPassengers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetNumPassengers");

	Params::BrickVehicle_GetNumPassengers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetPassengers
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class ABrickCharacter*>*         OutPassengers                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ABrickVehicle::GetPassengers(TArray<class ABrickCharacter*>* OutPassengers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetPassengers");

	Params::BrickVehicle_GetPassengers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPassengers != nullptr)
		*OutPassengers = std::move(Parms.OutPassengers);
}


// Function BrickRigs.BrickVehicle.GetPinMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVehiclePinMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVehiclePinMode ABrickVehicle::GetPinMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetPinMode");

	Params::BrickVehicle_GetPinMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetRootBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrick*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrick* ABrickVehicle::GetRootBrick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetRootBrick");

	Params::BrickVehicle_GetRootBrick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetSeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FBrickEditorObjectID>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FBrickEditorObjectID> ABrickVehicle::GetSeats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetSeats");

	Params::BrickVehicle_GetSeats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetSpawningPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickPlayerState*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickPlayerState* ABrickVehicle::GetSpawningPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetSpawningPlayerState");

	Params::BrickVehicle_GetSpawningPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetStaticInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBrickVehicleStaticInfo*    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UBrickVehicleStaticInfo* ABrickVehicle::GetStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetStaticInfo");

	Params::BrickVehicle_GetStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetVehicleComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickVehicleComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickVehicleComponent* ABrickVehicle::GetVehicleComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetVehicleComponent");

	Params::BrickVehicle_GetVehicleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetVehicleDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ABrickVehicle::GetVehicleDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetVehicleDisplayName");

	Params::BrickVehicle_GetVehicleDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetVehicleFileInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUGCFileInfo               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FUGCFileInfo ABrickVehicle::GetVehicleFileInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetVehicleFileInfo");

	Params::BrickVehicle_GetVehicleFileInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetViewedSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USeatBrick*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USeatBrick* ABrickVehicle::GetViewedSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetViewedSeat");

	Params::BrickVehicle_GetViewedSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.GetViewTargetCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraBrick*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraBrick* ABrickVehicle::GetViewTargetCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "GetViewTargetCamera");

	Params::BrickVehicle_GetViewTargetCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.HasVisibleSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickVehicle::HasVisibleSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "HasVisibleSeat");

	Params::BrickVehicle_HasVisibleSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.IsInteracting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickVehicle::IsInteracting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "IsInteracting");

	Params::BrickVehicle_IsInteracting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicle.IsVehicleConstructed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickVehicle::IsVehicleConstructed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicle", "IsVehicleConstructed");

	Params::BrickVehicle_IsVehicleConstructed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MyUserSettings.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMyUserSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMyUserSettings* UMyUserSettings::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyUserSettings", "Get");

	Params::MyUserSettings_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Attachment.GetFirearm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFirearm*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFirearm* AAttachment::GetFirearm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Attachment", "GetFirearm");

	Params::Attachment_GetFirearm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ChatWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UChatWidget::GetWidgetToFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "GetWidgetToFocus");

	Params::ChatWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ChatWidget.OnTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::OnTextChanged(const class FText& Text, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "OnTextChanged");

	Params::ChatWidget_OnTextChanged Parms{};

	Parms.Text = std::move(Text);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ChatWidget.UpdateIsFocused
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewFocused                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::UpdateIsFocused(bool bNewFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "UpdateIsFocused");

	Params::ChatWidget_UpdateIsFocused Parms{};

	Parms.bNewFocused = bNewFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ChatWidget.UpdateIsTyping
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewTyping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::UpdateIsTyping(bool bNewTyping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "UpdateIsTyping");

	Params::ChatWidget_UpdateIsTyping Parms{};

	Parms.bNewTyping = bNewTyping;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ChatWidget.UpdateScrollBoxVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::UpdateScrollBoxVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "UpdateScrollBoxVisibility");

	Params::ChatWidget_UpdateScrollBoxVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MainWidgetBase.OnFadedOut
// (Final, Native, Private)

void UMainWidgetBase::OnFadedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainWidgetBase", "OnFadedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MainWidgetBase.GetButtonPanel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuButtonPanelWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuButtonPanelWidget* UMainWidgetBase::GetButtonPanel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainWidgetBase", "GetButtonPanel");

	Params::MainWidgetBase_GetButtonPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MainWidgetBase.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMainWidgetBase::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainWidgetBase", "GetWidgetToFocus");

	Params::MainWidgetBase_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MainWidgetBase.GetWindowManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWindowManagerWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWindowManagerWidget* UMainWidgetBase::GetWindowManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainWidgetBase", "GetWindowManager");

	Params::MainWidgetBase_GetWindowManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.LoadingScreenWidget.SetBackgroundColor
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              InColor                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadingScreenWidget::SetBackgroundColor(const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenWidget", "SetBackgroundColor");

	Params::LoadingScreenWidget_SetBackgroundColor Parms{};

	Parms.InColor = std::move(InColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.LoadingScreenWidget.SetLoadingText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULoadingScreenWidget::SetLoadingText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenWidget", "SetLoadingText");

	Params::LoadingScreenWidget_SetLoadingText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PhysicsConstraintConnection.OnConstraintBroken
// (Final, Native, Protected)
// Parameters:
// int32                                   ConstraintIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsConstraintConnection::OnConstraintBroken(int32 ConstraintIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsConstraintConnection", "OnConstraintBroken");

	Params::PhysicsConstraintConnection_OnConstraintBroken Parms{};

	Parms.ConstraintIndex = ConstraintIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FuelTank.OnRep_bHasExploded
// (Final, Native, Private)

void AFuelTank::OnRep_bHasExploded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FuelTank", "OnRep_bHasExploded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FuelTank.ShouldSpawnLeakOnHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFuelTank::ShouldSpawnLeakOnHit(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FuelTank", "ShouldSpawnLeakOnHit");

	Params::FuelTank_ShouldSpawnLeakOnHit Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickViewportClient.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickViewportClient*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickViewportClient* UBrickViewportClient::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickViewportClient", "Get");

	Params::BrickViewportClient_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MenuButtonWidget.OnClicked
// (Final, Native, Protected, BlueprintCallable)

void UMenuButtonWidget::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonWidget", "OnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonWidget.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuButtonWidget::SetColorStyle(EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonWidget", "SetColorStyle");

	Params::MenuButtonWidget_SetColorStyle Parms{};

	Parms.InColorStyle = InColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonWidget.SetDisplayIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIconIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuButtonWidget::SetDisplayIcon(int32 InIconIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonWidget", "SetDisplayIcon");

	Params::MenuButtonWidget_SetDisplayIcon Parms{};

	Parms.InIconIndex = InIconIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonWidget.SetDisplayText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (Parm, NativeAccessSpecifierPublic)

void UMenuButtonWidget::SetDisplayText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonWidget", "SetDisplayText");

	Params::MenuButtonWidget_SetDisplayText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonWidget.UpdateDisplayText
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMenuButtonWidget::UpdateDisplayText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonWidget", "UpdateDisplayText");

	Params::MenuButtonWidget_UpdateDisplayText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MatchStateWidget.OnFadedOut
// (Final, Native, Protected, BlueprintCallable)

void UMatchStateWidget::OnFadedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchStateWidget", "OnFadedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MatchStateWidget.UpdateMatchState
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewDisplayText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFadeOut                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchStateWidget::UpdateMatchState(const class FText& NewDisplayText, EBrickUIColorStyle NewColorStyle, bool bFadeOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchStateWidget", "UpdateMatchState");

	Params::MatchStateWidget_UpdateMatchState Parms{};

	Parms.NewDisplayText = std::move(NewDisplayText);
	Parms.NewColorStyle = NewColorStyle;
	Parms.bFadeOut = bFadeOut;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BaseCharacter.ClientOnReceivedDamage
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// const struct FCharacterDamageInfo&      DamageInfo                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABaseCharacter::ClientOnReceivedDamage(const struct FCharacterDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "ClientOnReceivedDamage");

	Params::BaseCharacter_ClientOnReceivedDamage Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.GiveTestLoadout
// (Exec, Event, Protected, BlueprintEvent)

void ABaseCharacter::GiveTestLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "GiveTestLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.BaseCharacter.Interact_Possess
// (Final, Native, Protected)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseCharacter::Interact_Possess(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "Interact_Possess");

	Params::BaseCharacter_Interact_Possess Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.IsPerformingMeleeAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABaseCharacter::IsPerformingMeleeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "IsPerformingMeleeAction");

	Params::BaseCharacter_IsPerformingMeleeAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseCharacter.OnHealingStateChanged
// (Native, Protected)

void ABaseCharacter::OnHealingStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnHealingStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnHealthChanged
// (Native, Protected)

void ABaseCharacter::OnHealthChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnHealthChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnIsOnFireChanged
// (Final, Native, Protected)

void ABaseCharacter::OnIsOnFireChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnIsOnFireChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnMeshHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABaseCharacter::OnMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnMeshHit");

	Params::BaseCharacter_OnMeshHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnRep_RepHealth
// (Final, Native, Protected)

void ABaseCharacter::OnRep_RepHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnRep_RepHealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnRep_RestartTransform
// (Final, Native, Protected)

void ABaseCharacter::OnRep_RestartTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnRep_RestartTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnRep_TeamId
// (Final, Native, Protected)

void ABaseCharacter::OnRep_TeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnRep_TeamId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.OnStateOfHealthChanged
// (Native, Protected)

void ABaseCharacter::OnStateOfHealthChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "OnStateOfHealthChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.PerformMeleeAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABaseCharacter::PerformMeleeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "PerformMeleeAction");

	Params::BaseCharacter_PerformMeleeAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseCharacter.ServerAcknowledgeRestartTransform
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABaseCharacter::ServerAcknowledgeRestartTransform(const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "ServerAcknowledgeRestartTransform");

	Params::BaseCharacter_ServerAcknowledgeRestartTransform Parms{};

	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.ServerMoveInventoryItems
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FMoveInventoryItemParams&  Params_0                                               (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FPlayerViewPoint&          ViewPoint                                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABaseCharacter::ServerMoveInventoryItems(const struct FMoveInventoryItemParams& Params_0, const struct FPlayerViewPoint& ViewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "ServerMoveInventoryItems");

	Params::BaseCharacter_ServerMoveInventoryItems Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.ViewPoint = std::move(ViewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.ServerPerformMeleeAction
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABaseCharacter::ServerPerformMeleeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "ServerPerformMeleeAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseCharacter.IsConscious
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABaseCharacter::IsConscious() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter", "IsConscious");

	Params::BaseCharacter_IsConscious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.NumericPropertyWidget.AddSliderWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickSliderWidget*               Slider                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumericPropertyWidget::AddSliderWidget(class UBrickSliderWidget* Slider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumericPropertyWidget", "AddSliderWidget");

	Params::NumericPropertyWidget_AddSliderWidget Parms{};

	Parms.Slider = Slider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.NumericPropertyWidget.LockAxes
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              bLock                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumericPropertyWidget::LockAxes(const bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumericPropertyWidget", "LockAxes");

	Params::NumericPropertyWidget_LockAxes Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.NumericPropertyWidget.OnSliderValueChanged
// (Final, Native, Private)
// Parameters:
// const float                             NewValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EValueChangedEventType            EventType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumericPropertyWidget::OnSliderValueChanged(const float NewValue, const EValueChangedEventType EventType, const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumericPropertyWidget", "OnSliderValueChanged");

	Params::NumericPropertyWidget_OnSliderValueChanged Parms{};

	Parms.NewValue = NewValue;
	Parms.EventType = EventType;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.NumericPropertyWidget.UpdateNumericProperty
// (Event, Protected, BlueprintEvent)
// Parameters:
// const ENumericValueType                 ValueType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NumAxes                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumericPropertyWidget::UpdateNumericProperty(const ENumericValueType ValueType, const int32 NumAxes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumericPropertyWidget", "UpdateNumericProperty");

	Params::NumericPropertyWidget_UpdateNumericProperty Parms{};

	Parms.ValueType = ValueType;
	Parms.NumAxes = NumAxes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.NumericPropertyWidget.AreAxesLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNumericPropertyWidget::AreAxesLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumericPropertyWidget", "AreAxesLocked");

	Params::NumericPropertyWidget_AreAxesLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BasePlayerController.ClientOnKickedPlayerListChanged
// (Net, NetReliable, Native, Event, Public, NetClient)

void ABasePlayerController::ClientOnKickedPlayerListChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "ClientOnKickedPlayerListChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.ClientReceiveKickedPlayerList
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FKickedPlayerList&         PlayerList                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::ClientReceiveKickedPlayerList(const struct FKickedPlayerList& PlayerList, uint8 RequestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "ClientReceiveKickedPlayerList");

	Params::BasePlayerController_ClientReceiveKickedPlayerList Parms{};

	Parms.PlayerList = std::move(PlayerList);
	Parms.RequestID = RequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.KickPlayer
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FUniqueNetIdRepl&          OtherPlayerId                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OtherPlayerName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    KickReason                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimespan&                 KickDuration                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::KickPlayer(const struct FUniqueNetIdRepl& OtherPlayerId, const class FString& OtherPlayerName, const class FString& KickReason, const struct FTimespan& KickDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "KickPlayer");

	Params::BasePlayerController_KickPlayer Parms{};

	Parms.OtherPlayerId = std::move(OtherPlayerId);
	Parms.OtherPlayerName = std::move(OtherPlayerName);
	Parms.KickReason = std::move(KickReason);
	Parms.KickDuration = std::move(KickDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.OpenKickPlayerPopup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUniqueNetIdRepl&          OtherPlayerId                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OtherPlayerName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::OpenKickPlayerPopup(const struct FUniqueNetIdRepl& OtherPlayerId, const class FString& OtherPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "OpenKickPlayerPopup");

	Params::BasePlayerController_OpenKickPlayerPopup Parms{};

	Parms.OtherPlayerId = std::move(OtherPlayerId);
	Parms.OtherPlayerName = std::move(OtherPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.RevokeKick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUniqueNetIdRepl&          OtherPlayerId                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::RevokeKick(const struct FUniqueNetIdRepl& OtherPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "RevokeKick");

	Params::BasePlayerController_RevokeKick Parms{};

	Parms.OtherPlayerId = std::move(OtherPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.ServerKickPlayer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FUniqueNetIdRepl&          OtherPlayerId                                          (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OtherPlayerName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    KickReason                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimespan&                 KickDuration                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::ServerKickPlayer(const struct FUniqueNetIdRepl& OtherPlayerId, const class FString& OtherPlayerName, const class FString& KickReason, const struct FTimespan& KickDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "ServerKickPlayer");

	Params::BasePlayerController_ServerKickPlayer Parms{};

	Parms.OtherPlayerId = std::move(OtherPlayerId);
	Parms.OtherPlayerName = std::move(OtherPlayerName);
	Parms.KickReason = std::move(KickReason);
	Parms.KickDuration = std::move(KickDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.ServerRequestKickedPlayerList
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FKickedPlayerListRequest&  Request                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::ServerRequestKickedPlayerList(const struct FKickedPlayerListRequest& Request, uint8 RequestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "ServerRequestKickedPlayerList");

	Params::BasePlayerController_ServerRequestKickedPlayerList Parms{};

	Parms.Request = std::move(Request);
	Parms.RequestID = RequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.ServerRevokeKick
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FUniqueNetIdRepl&          OtherPlayerId                                          (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABasePlayerController::ServerRevokeKick(const struct FUniqueNetIdRepl& OtherPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "ServerRevokeKick");

	Params::BasePlayerController_ServerRevokeKick Parms{};

	Parms.OtherPlayerId = std::move(OtherPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.ToggleCheatMenuOpen
// (Final, Native, Public, BlueprintCallable)

void ABasePlayerController::ToggleCheatMenuOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "ToggleCheatMenuOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.UpdateViewTarget
// (Final, Native, Public, BlueprintCallable)

void ABasePlayerController::UpdateViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "UpdateViewTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BasePlayerController.CanKickPlayer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUniqueNetIdRepl&          OtherPlayerId                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABasePlayerController::CanKickPlayer(const struct FUniqueNetIdRepl& OtherPlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "CanKickPlayer");

	Params::BasePlayerController_CanKickPlayer Parms{};

	Parms.OtherPlayerId = std::move(OtherPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BasePlayerController.CanViewAndEditKicks
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABasePlayerController::CanViewAndEditKicks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "CanViewAndEditKicks");

	Params::BasePlayerController_CanViewAndEditKicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BasePlayerController.GetDesiredViewTarget
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FViewTargetTransitionParams*     OutTransitionParams                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ABasePlayerController::GetDesiredViewTarget(struct FViewTargetTransitionParams* OutTransitionParams) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "GetDesiredViewTarget");

	Params::BasePlayerController_GetDesiredViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransitionParams != nullptr)
		*OutTransitionParams = std::move(Parms.OutTransitionParams);

	return Parms.ReturnValue;
}


// Function BrickRigs.BasePlayerController.GetPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUniqueNetIdRepl                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUniqueNetIdRepl ABasePlayerController::GetPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "GetPlayerId");

	Params::BasePlayerController_GetPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BasePlayerController.GetStaticInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UPlayerControllerStaticInfo*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UPlayerControllerStaticInfo* ABasePlayerController::GetStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePlayerController", "GetStaticInfo");

	Params::BasePlayerController_GetStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameMode.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickGameMode*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickGameMode* ABrickGameMode::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGameMode", "Get");

	Params::BrickGameMode_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameMode.GetDefaultGameMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ABrickGameMode*             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class ABrickGameMode* ABrickGameMode::GetDefaultGameMode(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGameMode", "GetDefaultGameMode");

	Params::BrickGameMode_GetDefaultGameMode Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameMode.AddPlayerMoney
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAdd                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::AddPlayerMoney(class ABrickPlayerController* PC, float Amount, bool bAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "AddPlayerMoney");

	Params::BrickGameMode_AddPlayerMoney Parms{};

	Parms.PC = PC;
	Parms.Amount = Amount;
	Parms.bAdd = bAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.AddPlayerScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAdd                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::AddPlayerScore(class ABrickPlayerController* PC, float Score, bool bAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "AddPlayerScore");

	Params::BrickGameMode_AddPlayerScore Parms{};

	Parms.PC = PC;
	Parms.Score = Score;
	Parms.bAdd = bAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.AddScoreToAllPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::AddScoreToAllPlayers(float Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "AddScoreToAllPlayers");

	Params::BrickGameMode_AddScoreToAllPlayers Parms{};

	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.AddScoreToAllPlayersOfTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::AddScoreToAllPlayersOfTeam(const struct FGenericTeamId& TeamID, float Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "AddScoreToAllPlayersOfTeam");

	Params::BrickGameMode_AddScoreToAllPlayersOfTeam Parms{};

	Parms.TeamID = std::move(TeamID);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.AddTeamScore
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::AddTeamScore(const struct FGenericTeamId& TeamID, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "AddTeamScore");

	Params::BrickGameMode_AddTeamScore Parms{};

	Parms.TeamID = std::move(TeamID);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.EndMatchWithWinner
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchWinner&              InWinner                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickGameMode::EndMatchWithWinner(const struct FMatchWinner& InWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "EndMatchWithWinner");

	Params::BrickGameMode_EndMatchWithWinner Parms{};

	Parms.InWinner = std::move(InWinner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.EndRound
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchWinner&              InWinner                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEndMatch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::EndRound(const struct FMatchWinner& InWinner, bool bEndMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "EndRound");

	Params::BrickGameMode_EndRound Parms{};

	Parms.InWinner = std::move(InWinner);
	Parms.bEndMatch = bEndMatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.ForceEndMatch
// (Final, Exec, Native, Public, BlueprintCallable)

void ABrickGameMode::ForceEndMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "ForceEndMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.MovePlayerToTeam
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::MovePlayerToTeam(class ABrickPlayerController* PC, const struct FGenericTeamId& TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "MovePlayerToTeam");

	Params::BrickGameMode_MovePlayerToTeam Parms{};

	Parms.PC = PC;
	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.OnCapturePointCaptured
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ACapturePoint*                    CapturePoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGenericTeamId&            Team                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSet<class ABaseCharacter*>&      Characters                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickGameMode::OnCapturePointCaptured(class ACapturePoint* CapturePoint, const struct FGenericTeamId& Team, const TSet<class ABaseCharacter*>& Characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "OnCapturePointCaptured");

	Params::BrickGameMode_OnCapturePointCaptured Parms{};

	Parms.CapturePoint = CapturePoint;
	Parms.Team = std::move(Team);
	Parms.Characters = std::move(Characters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.OnCapturePointNeutralized
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ACapturePoint*                    CapturePoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGenericTeamId&            Team                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSet<class ABaseCharacter*>&      Characters                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickGameMode::OnCapturePointNeutralized(class ACapturePoint* CapturePoint, const struct FGenericTeamId& Team, const TSet<class ABaseCharacter*>& Characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "OnCapturePointNeutralized");

	Params::BrickGameMode_OnCapturePointNeutralized Parms{};

	Parms.CapturePoint = CapturePoint;
	Parms.Team = std::move(Team);
	Parms.Characters = std::move(Characters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.OnCharacterBeginPlay
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::OnCharacterBeginPlay(class ABaseCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "OnCharacterBeginPlay");

	Params::BrickGameMode_OnCharacterBeginPlay Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.OnCharacterDied
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::OnCharacterDied(class ABaseCharacter* Character, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "OnCharacterDied");

	Params::BrickGameMode_OnCharacterDied Parms{};

	Parms.Character = Character;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.OnCharacterEndPlay
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::OnCharacterEndPlay(class ABaseCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "OnCharacterEndPlay");

	Params::BrickGameMode_OnCharacterEndPlay Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.OnCharacterRevived
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::OnCharacterRevived(class ABaseCharacter* Character, class AController* EventInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "OnCharacterRevived");

	Params::BrickGameMode_OnCharacterRevived Parms{};

	Parms.Character = Character;
	Parms.EventInstigator = EventInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.RestartAllPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIncludeAlive                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameMode::RestartAllPlayers(bool bIncludeAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "RestartAllPlayers");

	Params::BrickGameMode_RestartAllPlayers Parms{};

	Parms.bIncludeAlive = bIncludeAlive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameMode.CalcDamage
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickGameMode::CalcDamage(float DamageAmount, class ABaseCharacter* Character, class AController* EventInstigator, class AActor* DamageCauser) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "CalcDamage");

	Params::BrickGameMode_CalcDamage Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.Character = Character;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameMode.GetNumPlayersAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameMode::GetNumPlayersAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "GetNumPlayersAlive");

	Params::BrickGameMode_GetNumPlayersAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameMode.IsReadyToEndRound
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FMatchWinner*                    OutWinner                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   bOutEndMatch                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickGameMode::IsReadyToEndRound(struct FMatchWinner* OutWinner, bool* bOutEndMatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "IsReadyToEndRound");

	Params::BrickGameMode_IsReadyToEndRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWinner != nullptr)
		*OutWinner = std::move(Parms.OutWinner);

	if (bOutEndMatch != nullptr)
		*bOutEndMatch = Parms.bOutEndMatch;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameMode.IsReadyToStartWarmup
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickGameMode::IsReadyToStartWarmup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameMode", "IsReadyToStartWarmup");

	Params::BrickGameMode_IsReadyToStartWarmup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTeam.OnRep_MaxScore
// (Final, Native, Private)

void UBrickTeam::OnRep_MaxScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "OnRep_MaxScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTeam.OnRep_Score
// (Final, Native, Private)

void UBrickTeam::OnRep_Score()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "OnRep_Score");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTeam.SetMaxScore
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMaxScore                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTeam::SetMaxScore(int32 NewMaxScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "SetMaxScore");

	Params::BrickTeam_SetMaxScore Parms{};

	Parms.NewMaxScore = NewMaxScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTeam.SetScore
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewScore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTeam::SetScore(int32 NewScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "SetScore");

	Params::BrickTeam_SetScore Parms{};

	Parms.NewScore = NewScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTeam.GetMaxScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickTeam::GetMaxScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "GetMaxScore");

	Params::BrickTeam_GetMaxScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTeam.GetScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickTeam::GetScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "GetScore");

	Params::BrickTeam_GetScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTeam.GetTeamDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBrickTeam::GetTeamDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "GetTeamDisplayName");

	Params::BrickTeam_GetTeamDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTeam.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGenericTeamId UBrickTeam::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTeam", "GetTeamId");

	Params::BrickTeam_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickSpacer.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSpacer::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSpacer", "SetColorStyle");

	Params::BrickSpacer_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupParams.BindOnPopupClosedDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(EPopupResult Result)>    Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UPopupParams::BindOnPopupClosedDelegate(TDelegate<void(EPopupResult Result)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupParams", "BindOnPopupClosedDelegate");

	Params::PopupParams_BindOnPopupClosedDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupParams.OnPopupClosed
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EPopupResult                      Result                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupParams::OnPopupClosed(const EPopupResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupParams", "OnPopupClosed");

	Params::PopupParams_OnPopupClosed Parms{};

	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PopupParams.OnPopupOpened
// (Event, Protected, BlueprintEvent)

void UPopupParams::OnPopupOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupParams", "OnPopupOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.PopupParams.GetOwningPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABasePlayerController*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABasePlayerController* UPopupParams::GetOwningPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupParams", "GetOwningPlayer");

	Params::PopupParams_GetOwningPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVehicleDownloadReplicator.OnRep_DownloadProgress
// (Final, Native, Private)

void ABrickVehicleDownloadReplicator::OnRep_DownloadProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVehicleDownloadReplicator", "OnRep_DownloadProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BindKeyPopupWidget.OnClickedRetry
// (Final, Native, Protected, BlueprintCallable)

void UBindKeyPopupWidget::OnClickedRetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindKeyPopupWidget", "OnClickedRetry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BindKeyPopupWidget.UpdateConflictedMappings
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bIsConflicted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FText>&              ConflictedMappingNames                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBindKeyPopupWidget::UpdateConflictedMappings(bool bIsConflicted, const TArray<class FText>& ConflictedMappingNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindKeyPopupWidget", "UpdateConflictedMappings");

	Params::BindKeyPopupWidget_UpdateConflictedMappings Parms{};

	Parms.bIsConflicted = bIsConflicted;
	Parms.ConflictedMappingNames = std::move(ConflictedMappingNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BindKeyPopupWidget.UpdateIsBindingKey
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsBinding                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBindKeyPopupWidget::UpdateIsBindingKey(bool bNewIsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BindKeyPopupWidget", "UpdateIsBindingKey");

	Params::BindKeyPopupWidget_UpdateIsBindingKey Parms{};

	Parms.bNewIsBinding = bNewIsBinding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BoolPropertyWidget.InitializeItem
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickComboBoxItemParams*        OutParams                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UBoolPropertyWidget::InitializeItem(int32 Item, struct FBrickComboBoxItemParams* OutParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoolPropertyWidget", "InitializeItem");

	Params::BoolPropertyWidget_InitializeItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParams != nullptr)
		*OutParams = std::move(Parms.OutParams);
}


// Function BrickRigs.BoolPropertyWidget.OnItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoolPropertyWidget::OnItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoolPropertyWidget", "OnItemSelected");

	Params::BoolPropertyWidget_OnItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBlock.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBlock::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBlock", "SetColorStyle");

	Params::BrickTextBlock_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBlock.SetStyleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBlock::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBlock", "SetStyleState");

	Params::BrickTextBlock_SetStyleState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBlock.SetTextStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUITextStyle                       NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBlock::SetTextStyle(EBrickUITextStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBlock", "SetTextStyle");

	Params::BrickTextBlock_SetTextStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickAssetManager.Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrickAssetManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickAssetManager* UBrickAssetManager::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickAssetManager", "Get");

	Params::BrickAssetManager_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.CockItem
// (Final, Native, Public, BlueprintCallable)

void ABrickCharacter::CockItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "CockItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.DropCarriedBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bYeet                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::DropCarriedBrick(bool bYeet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "DropCarriedBrick");

	Params::BrickCharacter_DropCarriedBrick Parms{};

	Parms.bYeet = bYeet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.EnterVehicle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickEditorObjectID&      InSeatID                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::EnterVehicle(class ABrickVehicle* InVehicle, const struct FBrickEditorObjectID& InSeatID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "EnterVehicle");

	Params::BrickCharacter_EnterVehicle Parms{};

	Parms.InVehicle = InVehicle;
	Parms.InSeatID = std::move(InSeatID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.EquipCurrentItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::EquipCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "EquipCurrentItem");

	Params::BrickCharacter_EquipCurrentItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.EquipItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AInventoryItem*                   InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipUnequip                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::EquipItem(class AInventoryItem* InItem, bool bSkipUnequip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "EquipItem");

	Params::BrickCharacter_EquipItem Parms{};

	Parms.InItem = InItem;
	Parms.bSkipUnequip = bSkipUnequip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.ExitVehicle
// (Final, Native, Public, BlueprintCallable)

void ABrickCharacter::ExitVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ExitVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ForceEjectFromVehicle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABrickCharacter::ForceEjectFromVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ForceEjectFromVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.OnRep_CarriedBrick
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FBrickCarryInfo&           OldCarriedBrick                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickCharacter::OnRep_CarriedBrick(const struct FBrickCarryInfo& OldCarriedBrick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "OnRep_CarriedBrick");

	Params::BrickCharacter_OnRep_CarriedBrick Parms{};

	Parms.OldCarriedBrick = std::move(OldCarriedBrick);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.OnRep_CurrentItem
// (Final, Native, Private)
// Parameters:
// class AInventoryItem*                   PrevItem                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::OnRep_CurrentItem(class AInventoryItem* PrevItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "OnRep_CurrentItem");

	Params::BrickCharacter_OnRep_CurrentItem Parms{};

	Parms.PrevItem = PrevItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.OnRep_VehicleSeatID
// (Final, Native, Private)

void ABrickCharacter::OnRep_VehicleSeatID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "OnRep_VehicleSeatID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.PickUpBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBrick*                           Brick                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::PickUpBrick(class UBrick* Brick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "PickUpBrick");

	Params::BrickCharacter_PickUpBrick Parms{};

	Parms.Brick = Brick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ReloadItem
// (Final, Native, Public, BlueprintCallable)

void ABrickCharacter::ReloadItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ReloadItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerCockItem
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerCockItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerCockItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerDropCarriedBrick
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FVector&                   BrickLocation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  BrickRotation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   BrickVelocity                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerDropCarriedBrick(const struct FVector& BrickLocation, const struct FRotator& BrickRotation, const struct FVector& BrickVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerDropCarriedBrick");

	Params::BrickCharacter_ServerDropCarriedBrick Parms{};

	Parms.BrickLocation = std::move(BrickLocation);
	Parms.BrickRotation = std::move(BrickRotation);
	Parms.BrickVelocity = std::move(BrickVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerEnterVehicle
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickEditorObjectID&      InSeatID                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerEnterVehicle(class ABrickVehicle* InVehicle, const struct FBrickEditorObjectID& InSeatID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerEnterVehicle");

	Params::BrickCharacter_ServerEnterVehicle Parms{};

	Parms.InVehicle = InVehicle;
	Parms.InSeatID = std::move(InSeatID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerExitVehicle
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerExitVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerExitVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerOnReplicatedAutoFire
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UFirearmComponent*                FirearmComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MuzzlePitchAndYaw                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerOnReplicatedAutoFire(class UFirearmComponent* FirearmComp, int32 MuzzlePitchAndYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerOnReplicatedAutoFire");

	Params::BrickCharacter_ServerOnReplicatedAutoFire Parms{};

	Parms.FirearmComp = FirearmComp;
	Parms.MuzzlePitchAndYaw = MuzzlePitchAndYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerOnReplicatedSingleFire
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UFirearmComponent*                FirearmComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MuzzlePitchAndYaw                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerOnReplicatedSingleFire(class UFirearmComponent* FirearmComp, int32 MuzzlePitchAndYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerOnReplicatedSingleFire");

	Params::BrickCharacter_ServerOnReplicatedSingleFire Parms{};

	Parms.FirearmComp = FirearmComp;
	Parms.MuzzlePitchAndYaw = MuzzlePitchAndYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerOnSingleFire
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UFirearmComponent*                FirearmComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerOnSingleFire(class UFirearmComponent* FirearmComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerOnSingleFire");

	Params::BrickCharacter_ServerOnSingleFire Parms{};

	Parms.FirearmComp = FirearmComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerOnStartAutoFire
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UFirearmComponent*                FirearmComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerOnStartAutoFire(class UFirearmComponent* FirearmComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerOnStartAutoFire");

	Params::BrickCharacter_ServerOnStartAutoFire Parms{};

	Parms.FirearmComp = FirearmComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerOnStopAutoFire
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UFirearmComponent*                FirearmComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   RoundsFired                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerOnStopAutoFire(class UFirearmComponent* FirearmComp, uint8 RoundsFired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerOnStopAutoFire");

	Params::BrickCharacter_ServerOnStopAutoFire Parms{};

	Parms.FirearmComp = FirearmComp;
	Parms.RoundsFired = RoundsFired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerOnThrewExplosive
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FPlayerViewPoint&          ViewPoint                                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerOnThrewExplosive(const struct FPlayerViewPoint& ViewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerOnThrewExplosive");

	Params::BrickCharacter_ServerOnThrewExplosive Parms{};

	Parms.ViewPoint = std::move(ViewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerPickUpBrick
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UBrick*                           Brick                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerPickUpBrick(class UBrick* Brick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerPickUpBrick");

	Params::BrickCharacter_ServerPickUpBrick Parms{};

	Parms.Brick = Brick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerReloadItem
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerReloadItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerReloadItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerSetCurrentItem
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AInventoryItem*                   NewItem                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerSetCurrentItem(class AInventoryItem* NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerSetCurrentItem");

	Params::BrickCharacter_ServerSetCurrentItem Parms{};

	Parms.NewItem = NewItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerStartExtinguish
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerStartExtinguish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerStartExtinguish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerStopExtinguish
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerStopExtinguish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerStopExtinguish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerThrowCurrentItem
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FPlayerViewPoint&          ViewPoint                                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerThrowCurrentItem(const struct FPlayerViewPoint& ViewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerThrowCurrentItem");

	Params::BrickCharacter_ServerThrowCurrentItem Parms{};

	Parms.ViewPoint = std::move(ViewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerThrowExplosive
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerThrowExplosive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerThrowExplosive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerUnequipCurrentItem
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickCharacter::ServerUnequipCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerUnequipCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerUpdateVehicleInput
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FVehicleInput&             NewInput                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FRepActuatorState>& NewActuatorStates                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USeatBrick*                       Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  RestartVersion                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   PackedView                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewAiming                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerUpdateVehicleInput(const struct FVehicleInput& NewInput, const TArray<struct FRepActuatorState>& NewActuatorStates, class USeatBrick* Seat, const struct FRestartTransformVersion& RestartVersion, int32 PackedView, bool bNewAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerUpdateVehicleInput");

	Params::BrickCharacter_ServerUpdateVehicleInput Parms{};

	Parms.NewInput = std::move(NewInput);
	Parms.NewActuatorStates = std::move(NewActuatorStates);
	Parms.Seat = Seat;
	Parms.RestartVersion = std::move(RestartVersion);
	Parms.PackedView = PackedView;
	Parms.bNewAiming = bNewAiming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ServerUpdateVehicleViewRotation
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class USeatBrick*                       Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PackedView                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewAiming                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::ServerUpdateVehicleViewRotation(class USeatBrick* Seat, int32 PackedView, bool bNewAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ServerUpdateVehicleViewRotation");

	Params::BrickCharacter_ServerUpdateVehicleViewRotation Parms{};

	Parms.Seat = Seat;
	Parms.PackedView = PackedView;
	Parms.bNewAiming = bNewAiming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.SetAimRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InAimRatio                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::SetAimRatio(float InAimRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "SetAimRatio");

	Params::BrickCharacter_SetAimRatio Parms{};

	Parms.InAimRatio = InAimRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.SetFireMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFireMode                               NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::SetFireMode(EFireMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "SetFireMode");

	Params::BrickCharacter_SetFireMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.SetWantsToFire
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInWantsToFire                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickCharacter::SetWantsToFire(bool bInWantsToFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "SetWantsToFire");

	Params::BrickCharacter_SetWantsToFire Parms{};

	Parms.bInWantsToFire = bInWantsToFire;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ThrowCurrentItem
// (Final, Native, Public, BlueprintCallable)

void ABrickCharacter::ThrowCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ThrowCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.ThrowExplosive
// (Final, Native, Public, BlueprintCallable)

void ABrickCharacter::ThrowExplosive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ThrowExplosive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickCharacter.CanEnterVehicle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickEditorObjectID*            InOutSeatID                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::CanEnterVehicle(class ABrickVehicle* InVehicle, struct FBrickEditorObjectID* InOutSeatID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "CanEnterVehicle");

	Params::BrickCharacter_CanEnterVehicle Parms{};

	Parms.InVehicle = InVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutSeatID != nullptr)
		*InOutSeatID = std::move(Parms.InOutSeatID);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.CanEquipItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AInventoryItem*                   InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::CanEquipItem(class AInventoryItem* InItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "CanEquipItem");

	Params::BrickCharacter_CanEquipItem Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.CanFire
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::CanFire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "CanFire");

	Params::BrickCharacter_CanFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.CanPickUpBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrick*                           Brick                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::CanPickUpBrick(class UBrick* Brick) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "CanPickUpBrick");

	Params::BrickCharacter_CanPickUpBrick Parms{};

	Parms.Brick = Brick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.GetAimRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickCharacter::GetAimRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "GetAimRatio");

	Params::BrickCharacter_GetAimRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.GetCarriedBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrick*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrick* ABrickCharacter::GetCarriedBrick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "GetCarriedBrick");

	Params::BrickCharacter_GetCarriedBrick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.GetCurrentItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AInventoryItem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AInventoryItem* ABrickCharacter::GetCurrentItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "GetCurrentItem");

	Params::BrickCharacter_GetCurrentItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.GetVehicleSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USeatBrick*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USeatBrick* ABrickCharacter::GetVehicleSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "GetVehicleSeat");

	Params::BrickCharacter_GetVehicleSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.GetVehicleSeatID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickEditorObjectID       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FBrickEditorObjectID ABrickCharacter::GetVehicleSeatID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "GetVehicleSeatID");

	Params::BrickCharacter_GetVehicleSeatID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.HasCurrentItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::HasCurrentItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "HasCurrentItem");

	Params::BrickCharacter_HasCurrentItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.IsCarryingBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::IsCarryingBrick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "IsCarryingBrick");

	Params::BrickCharacter_IsCarryingBrick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.IsFiring
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::IsFiring() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "IsFiring");

	Params::BrickCharacter_IsFiring Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.IsInDriverSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::IsInDriverSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "IsInDriverSeat");

	Params::BrickCharacter_IsInDriverSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickCharacter.ShouldFire
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickCharacter::ShouldFire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickCharacter", "ShouldFire");

	Params::BrickCharacter_ShouldFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CarWheelBrick.OnRootComponentWake
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              SleepingComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCarWheelBrick::OnRootComponentWake(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CarWheelBrick", "OnRootComponentWake");

	Params::CarWheelBrick_OnRootComponentWake Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.JoinSessionPopupWidget.CancelJoinSession
// (Final, Native, Public, BlueprintCallable)

void UJoinSessionPopupWidget::CancelJoinSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoinSessionPopupWidget", "CancelJoinSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.JoinSessionPopupWidget.JoinSession
// (Final, Native, Public, BlueprintCallable)

void UJoinSessionPopupWidget::JoinSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoinSessionPopupWidget", "JoinSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.JoinSessionPopupWidget.OnPasswordChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJoinSessionPopupWidget::OnPasswordChanged(const class FText& NewText, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoinSessionPopupWidget", "OnPasswordChanged");

	Params::JoinSessionPopupWidget_OnPasswordChanged Parms{};

	Parms.NewText = std::move(NewText);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.JoinSessionPopupWidget.UpdateJoinState
// (Event, Protected, BlueprintEvent)
// Parameters:
// EJoinSessionState                       InJoinState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPasswordRequired                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInHasPassword                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJoinSessionPopupWidget::UpdateJoinState(EJoinSessionState InJoinState, bool bInPasswordRequired, bool bInHasPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoinSessionPopupWidget", "UpdateJoinState");

	Params::JoinSessionPopupWidget_UpdateJoinState Parms{};

	Parms.InJoinState = InJoinState;
	Parms.bInPasswordRequired = bInPasswordRequired;
	Parms.bInHasPassword = bInHasPassword;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickPlayerState.OnRep_Deaths
// (Final, Native, Private)

void ABrickPlayerState::OnRep_Deaths()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_Deaths");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.OnRep_IsAdmin
// (Final, Native, Private)

void ABrickPlayerState::OnRep_IsAdmin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_IsAdmin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.OnRep_IsAlive
// (Final, Native, Private)

void ABrickPlayerState::OnRep_IsAlive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_IsAlive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.OnRep_IsTeamLeader
// (Final, Native, Private)

void ABrickPlayerState::OnRep_IsTeamLeader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_IsTeamLeader");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.OnRep_Kills
// (Final, Native, Private)

void ABrickPlayerState::OnRep_Kills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_Kills");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.OnRep_Money
// (Final, Native, Private)
// Parameters:
// float                                   PrevValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::OnRep_Money(float PrevValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_Money");

	Params::BrickPlayerState_OnRep_Money Parms{};

	Parms.PrevValue = PrevValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.OnRep_TeamId
// (Final, Native, Private)

void ABrickPlayerState::OnRep_TeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "OnRep_TeamId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetDeaths
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewDeaths                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetDeaths(int32 NewDeaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetDeaths");

	Params::BrickPlayerState_SetDeaths Parms{};

	Parms.NewDeaths = NewDeaths;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetIsAdmin
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsAdmin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetIsAdmin(bool bNewIsAdmin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetIsAdmin");

	Params::BrickPlayerState_SetIsAdmin Parms{};

	Parms.bNewIsAdmin = bNewIsAdmin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetIsAlive
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsAlive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetIsAlive(bool bInIsAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetIsAlive");

	Params::BrickPlayerState_SetIsAlive Parms{};

	Parms.bInIsAlive = bInIsAlive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetIsTeamLeader
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewLeader                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetIsTeamLeader(bool bNewLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetIsTeamLeader");

	Params::BrickPlayerState_SetIsTeamLeader Parms{};

	Parms.bNewLeader = bNewLeader;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetKills
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewKills                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetKills(int32 NewKills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetKills");

	Params::BrickPlayerState_SetKills Parms{};

	Parms.NewKills = NewKills;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetMoney
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetMoney(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetMoney");

	Params::BrickPlayerState_SetMoney Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.SetScore
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerState::SetScore(float NewScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "SetScore");

	Params::BrickPlayerState_SetScore Parms{};

	Parms.NewScore = NewScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerState.GetDeaths
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickPlayerState::GetDeaths() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "GetDeaths");

	Params::BrickPlayerState_GetDeaths Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.GetKills
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickPlayerState::GetKills() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "GetKills");

	Params::BrickPlayerState_GetKills Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.GetMoney
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickPlayerState::GetMoney() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "GetMoney");

	Params::BrickPlayerState_GetMoney Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.GetPlayerNameText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ABrickPlayerState::GetPlayerNameText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "GetPlayerNameText");

	Params::BrickPlayerState_GetPlayerNameText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.GetUncompressedPing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickPlayerState::GetUncompressedPing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "GetUncompressedPing");

	Params::BrickPlayerState_GetUncompressedPing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.IsAdmin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerState::IsAdmin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "IsAdmin");

	Params::BrickPlayerState_IsAdmin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerState::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "IsAlive");

	Params::BrickPlayerState_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.IsHost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerState::IsHost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "IsHost");

	Params::BrickPlayerState_IsHost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerState.IsTeamLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerState::IsTeamLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerState", "IsTeamLeader");

	Params::BrickPlayerState_IsTeamLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickConnectorsISMComponent.SetStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      NewFocusedColorStyle                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      NewStyleState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      NewFocusedStyleState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickConnectorsISMComponent::SetStyle(EBrickUIColorStyle NewColorStyle, EBrickUIColorStyle NewFocusedColorStyle, EBrickUIStyleState NewStyleState, EBrickUIStyleState NewFocusedStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickConnectorsISMComponent", "SetStyle");

	Params::BrickConnectorsISMComponent_SetStyle Parms{};

	Parms.NewColorStyle = NewColorStyle;
	Parms.NewFocusedColorStyle = NewFocusedColorStyle;
	Parms.NewStyleState = NewStyleState;
	Parms.NewFocusedStyleState = NewFocusedStyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickDataSingleton.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBrickDataSingleton*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickDataSingleton* UBrickDataSingleton::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickDataSingleton", "Get");

	Params::BrickDataSingleton_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickDataSingleton.GetColorDisplayName
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRoundValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBrickDataSingleton::GetColorDisplayName(const struct FLinearColor& Color, bool bRoundValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickDataSingleton", "GetColorDisplayName");

	Params::BrickDataSingleton_GetColorDisplayName Parms{};

	Parms.Color = std::move(Color);
	Parms.bRoundValue = bRoundValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.OnCapturedByChanged
// (Final, Native, Private)

void ACapturePoint::OnCapturedByChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "OnCapturedByChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CapturePoint.OnCapturingTeamChanged
// (Final, Native, Private)

void ACapturePoint::OnCapturingTeamChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "OnCapturingTeamChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CapturePoint.OnRep_CaptureRatio
// (Final, Native, Private)

void ACapturePoint::OnRep_CaptureRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "OnRep_CaptureRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CapturePoint.OnTriggerBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ACapturePoint::OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "OnTriggerBeginOverlap");

	Params::CapturePoint_OnTriggerBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CapturePoint.OnTriggerEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACapturePoint::OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "OnTriggerEndOverlap");

	Params::CapturePoint_OnTriggerEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CapturePoint.SetCapturedBy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewHasBeenCaptured                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACapturePoint::SetCapturedBy(const struct FGenericTeamId& TeamID, bool bNewHasBeenCaptured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "SetCapturedBy");

	Params::CapturePoint_SetCapturedBy Parms{};

	Parms.TeamID = std::move(TeamID);
	Parms.bNewHasBeenCaptured = bNewHasBeenCaptured;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.SetCaptureRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRatio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACapturePoint::SetCaptureRatio(float NewRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "SetCaptureRatio");

	Params::CapturePoint_SetCaptureRatio Parms{};

	Parms.NewRatio = NewRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.SetCapturingTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACapturePoint::SetCapturingTeam(const struct FGenericTeamId& TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "SetCapturingTeam");

	Params::CapturePoint_SetCapturingTeam Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.GetCapturedBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGenericTeamId ACapturePoint::GetCapturedBy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "GetCapturedBy");

	Params::CapturePoint_GetCapturedBy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.GetCapturePointShortDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ACapturePoint::GetCapturePointShortDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "GetCapturePointShortDisplayName");

	Params::CapturePoint_GetCapturePointShortDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.GetCaptureRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACapturePoint::GetCaptureRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "GetCaptureRatio");

	Params::CapturePoint_GetCaptureRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.GetCapturingTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGenericTeamId ACapturePoint::GetCapturingTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "GetCapturingTeam");

	Params::CapturePoint_GetCapturingTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.HasBeenCaptured
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACapturePoint::HasBeenCaptured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "HasBeenCaptured");

	Params::CapturePoint_HasBeenCaptured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.IsCapturePointOnBuilding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ABrickBuilding*             InBuilding                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACapturePoint::IsCapturePointOnBuilding(const class ABrickBuilding* InBuilding) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "IsCapturePointOnBuilding");

	Params::CapturePoint_IsCapturePointOnBuilding Parms{};

	Parms.InBuilding = InBuilding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CapturePoint.IsCharacterOnCapturePoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   InCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACapturePoint::IsCharacterOnCapturePoint(class ABaseCharacter* InCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturePoint", "IsCharacterOnCapturePoint");

	Params::CapturePoint_IsCharacterOnCapturePoint Parms{};

	Parms.InCharacter = InCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickEditorArrowComponent.SetArrowType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickEditorArrowType                   NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorArrowComponent::SetArrowType(EBrickEditorArrowType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorArrowComponent", "SetArrowType");

	Params::BrickEditorArrowComponent_SetArrowType Parms{};

	Parms.NewType = NewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorArrowComponent.SetCircularArrowAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorArrowComponent::SetCircularArrowAngle(float NewAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorArrowComponent", "SetCircularArrowAngle");

	Params::BrickEditorArrowComponent_SetCircularArrowAngle Parms{};

	Parms.NewAngle = NewAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorArrowComponent.SetCircularArrowRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorArrowComponent::SetCircularArrowRadius(float NewRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorArrowComponent", "SetCircularArrowRadius");

	Params::BrickEditorArrowComponent_SetCircularArrowRadius Parms{};

	Parms.NewRadius = NewRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorArrowComponent.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorArrowComponent::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorArrowComponent", "SetColorStyle");

	Params::BrickEditorArrowComponent_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorArrowComponent.SetLinearArrowLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorArrowComponent::SetLinearArrowLength(float NewLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorArrowComponent", "SetLinearArrowLength");

	Params::BrickEditorArrowComponent_SetLinearArrowLength Parms{};

	Parms.NewLength = NewLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CouplingBrick.Interact_DisengageCoupling
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCouplingBrick::Interact_DisengageCoupling(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CouplingBrick", "Interact_DisengageCoupling");

	Params::CouplingBrick_Interact_DisengageCoupling Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CouplingBrick.Interact_EngageCoupling
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCouplingBrick::Interact_EngageCoupling(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CouplingBrick", "Interact_EngageCoupling");

	Params::CouplingBrick_Interact_EngageCoupling Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorMirrorAxisWidget.OnClicked
// (Final, Native, Protected, BlueprintCallable)

void UBrickEditorMirrorAxisWidget::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorMirrorAxisWidget", "OnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorMirrorAxisWidget.UpdateCanBeSelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewCanBeSelected                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorMirrorAxisWidget::UpdateCanBeSelected(bool bNewCanBeSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorMirrorAxisWidget", "UpdateCanBeSelected");

	Params::BrickEditorMirrorAxisWidget_UpdateCanBeSelected Parms{};

	Parms.bNewCanBeSelected = bNewCanBeSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorMirrorAxisWidget.UpdateIsSelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorMirrorAxisWidget::UpdateIsSelected(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorMirrorAxisWidget", "UpdateIsSelected");

	Params::BrickEditorMirrorAxisWidget_UpdateIsSelected Parms{};

	Parms.bNewSelected = bNewSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorMirrorAxisWidget.UpdateMirrorAxis
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAxis                                   InAxis                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorMirrorAxisWidget::UpdateMirrorAxis(EAxis InAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorMirrorAxisWidget", "UpdateMirrorAxis");

	Params::BrickEditorMirrorAxisWidget_UpdateMirrorAxis Parms{};

	Parms.InAxis = InAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedAddToSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedAddToSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedAddToSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedCaptureThumbnail
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedCaptureThumbnail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedCaptureThumbnail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedCycleViewMode
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedCycleViewMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedCycleViewMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedDeleteSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedDeleteSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedDeleteSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedDuplicateSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedDuplicateSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedDuplicateSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedDuplicateSelectionMirrored
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedDuplicateSelectionMirrored()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedDuplicateSelectionMirrored");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedEditMetaData
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedEditMetaData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedEditMetaData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedEditorCancel
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedEditorCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedEditorCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedEditorCommit
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedEditorCommit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedEditorCommit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedExitEditor
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedExitEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedExitEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedExitEditorWithVehicle
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedExitEditorWithVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedExitEditorWithVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedFocusSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedFocusSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedFocusSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedHideSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedHideSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedHideSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedImportItem
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedImportItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedImportItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedInvertSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedInvertSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedInvertSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedMirrorSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedMirrorSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedMirrorSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedMoveAxisX
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedMoveAxisX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedMoveAxisX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedMoveAxisY
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedMoveAxisY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedMoveAxisY");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedMoveAxisZ
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedMoveAxisZ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedMoveAxisZ");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedMovePerpendicular
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedMovePerpendicular()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedMovePerpendicular");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedMoveSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedMoveSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedMoveSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedNewItem
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedNewItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedNewItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedOpenItem
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedOpenItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedOpenItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedRedo
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedRedo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedRedo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSaveItem
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSaveItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSaveItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSaveItemAs
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSaveItemAs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSaveItemAs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelect
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectAttached
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectAttached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectAttachedRecursive
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectAttachedRecursive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectAttachedRecursive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectByClass
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectByClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectByClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectByColor
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectByColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectByColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectByMaterial
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectByMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectByMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectByPattern
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectByPattern()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectByPattern");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedSelectByType
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedSelectByType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedSelectByType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedToggleMirrorMode
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedToggleMirrorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedToggleMirrorMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedToggleSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedToggleSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedToggleSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedToggleSnapping
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedToggleSnapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedToggleSnapping");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedToggleTransformSpace
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedToggleTransformSpace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedToggleTransformSpace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedUndo
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedUndo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedUndo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedUnhideAll
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedUnhideAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedUnhideAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedUploadItem
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedUploadItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedUploadItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnPressedUploadItemAs
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnPressedUploadItemAs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnPressedUploadItemAs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnReleasedAddToSelection
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnReleasedAddToSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnReleasedAddToSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnReleasedMovePerpendicular
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnReleasedMovePerpendicular()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnReleasedMovePerpendicular");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.OnReleasedSelect
// (Final, Native, Protected)

void UBaseEditorInputComponent::OnReleasedSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "OnReleasedSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BaseEditorInputComponent.GetCycleViewModeValueText
// (Final, Native, Protected, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBaseEditorInputComponent::GetCycleViewModeValueText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "GetCycleViewModeValueText");

	Params::BaseEditorInputComponent_GetCycleViewModeValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseEditorInputComponent.GetExitEditorWithVehicleEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEditorInputComponent::GetExitEditorWithVehicleEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "GetExitEditorWithVehicleEnabled");

	Params::BaseEditorInputComponent_GetExitEditorWithVehicleEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseEditorInputComponent.GetSaveItemAsEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEditorInputComponent::GetSaveItemAsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "GetSaveItemAsEnabled");

	Params::BaseEditorInputComponent_GetSaveItemAsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseEditorInputComponent.GetSaveItemEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEditorInputComponent::GetSaveItemEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "GetSaveItemEnabled");

	Params::BaseEditorInputComponent_GetSaveItemEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseEditorInputComponent.GetUploadItemAsEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEditorInputComponent::GetUploadItemAsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "GetUploadItemAsEnabled");

	Params::BaseEditorInputComponent_GetUploadItemAsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BaseEditorInputComponent.GetUploadItemEnabled
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEditorInputComponent::GetUploadItemEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEditorInputComponent", "GetUploadItemEnabled");

	Params::BaseEditorInputComponent_GetUploadItemEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ExplosiveItem.Explode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDamageEvent&              DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AExplosiveItem::Explode(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveItem", "Explode");

	Params::ExplosiveItem_Explode Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ExplosiveItem.OnRep_ExplosiveState
// (Final, Native, Protected)

void AExplosiveItem::OnRep_ExplosiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveItem", "OnRep_ExplosiveState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ExplosiveItem.PrimeExplosive
// (Final, Native, Public, BlueprintCallable)

void AExplosiveItem::PrimeExplosive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveItem", "PrimeExplosive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ExplosiveItem.SetExplosiveState
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// EExplosiveItemState                     NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AExplosiveItem::SetExplosiveState(EExplosiveItemState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveItem", "SetExplosiveState");

	Params::ExplosiveItem_SetExplosiveState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ExplosiveItem.IsPrimed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AExplosiveItem::IsPrimed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveItem", "IsPrimed");

	Params::ExplosiveItem_IsPrimed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.DashboardSliderWidget.UpdateColorStyle
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDashboardSliderWidget::UpdateColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DashboardSliderWidget", "UpdateColorStyle");

	Params::DashboardSliderWidget_UpdateColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.DashboardSliderWidget.UpdateIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   IconIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDashboardSliderWidget::UpdateIcon(int32 IconIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DashboardSliderWidget", "UpdateIcon");

	Params::DashboardSliderWidget_UpdateIcon Parms{};

	Parms.IconIndex = IconIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorObjectPropertyWidget.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void UBrickEditorObjectPropertyWidget::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObjectPropertyWidget", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorObjectPropertyWidget.OpenObjectPicker
// (Final, Native, Public, BlueprintCallable)

void UBrickEditorObjectPropertyWidget::OpenObjectPicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObjectPropertyWidget", "OpenObjectPicker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorObjectPropertyWidget.SelectObjects
// (Final, Native, Public, BlueprintCallable)

void UBrickEditorObjectPropertyWidget::SelectObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObjectPropertyWidget", "SelectObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorObjectPropertyWidget.UpdateSelectedObjects
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      FirstObjectName                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   NumSelectedObjects                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDefaultObjects                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorObjectPropertyWidget::UpdateSelectedObjects(const class FText& FirstObjectName, int32 NumSelectedObjects, bool bDefaultObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorObjectPropertyWidget", "UpdateSelectedObjects");

	Params::BrickEditorObjectPropertyWidget_UpdateSelectedObjects Parms{};

	Parms.FirstObjectName = std::move(FirstObjectName);
	Parms.NumSelectedObjects = NumSelectedObjects;
	Parms.bDefaultObjects = bDefaultObjects;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorParticleComponent.OnSystemFinishedCallback
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*         InParticleComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorParticleComponent::OnSystemFinishedCallback(class UParticleSystemComponent* InParticleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorParticleComponent", "OnSystemFinishedCallback");

	Params::BrickEditorParticleComponent_OnSystemFinishedCallback Parms{};

	Parms.InParticleComponent = InParticleComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.GravelSilo.Interact_CloseSilo
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGravelSilo::Interact_CloseSilo(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GravelSilo", "Interact_CloseSilo");

	Params::GravelSilo_Interact_CloseSilo Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.GravelSilo.Interact_OpenSilo
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGravelSilo::Interact_OpenSilo(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GravelSilo", "Interact_OpenSilo");

	Params::GravelSilo_Interact_OpenSilo Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.GravelSilo.OnRep_bIsSiloOpen
// (Final, Native, Private)

void AGravelSilo::OnRep_bIsSiloOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GravelSilo", "OnRep_bIsSiloOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorWidget.AddMirrorModeWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickEditorMirrorAxisWidget*     Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::AddMirrorModeWidget(class UBrickEditorMirrorAxisWidget* Widget, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "AddMirrorModeWidget");

	Params::BrickEditorWidget_AddMirrorModeWidget Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorWidget.AddModeWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UBrickEditorModeWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::AddModeWidget(class UBrickEditorModeWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "AddModeWidget");

	Params::BrickEditorWidget_AddModeWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorWidget.ClearPlacableFilter
// (Final, Native, Protected, BlueprintCallable)

void UBrickEditorWidget::ClearPlacableFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "ClearPlacableFilter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorWidget.OnMeasurementSystemChanged
// (Final, Native, Private)
// Parameters:
// EMeasurementSystem                      NewSystem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::OnMeasurementSystemChanged(EMeasurementSystem NewSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "OnMeasurementSystemChanged");

	Params::BrickEditorWidget_OnMeasurementSystemChanged Parms{};

	Parms.NewSystem = NewSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorWidget.OnPlacableSearchTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::OnPlacableSearchTextChanged(const class FText& NewText, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "OnPlacableSearchTextChanged");

	Params::BrickEditorWidget_OnPlacableSearchTextChanged Parms{};

	Parms.NewText = std::move(NewText);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickEditorWidget.UpdateCanClearPlacableFilter
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewCanClear                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::UpdateCanClearPlacableFilter(bool bNewCanClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "UpdateCanClearPlacableFilter");

	Params::BrickEditorWidget_UpdateCanClearPlacableFilter Parms{};

	Parms.bNewCanClear = bNewCanClear;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorWidget.UpdateCanPlaceObjects
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewCanPlace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::UpdateCanPlaceObjects(bool bNewCanPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "UpdateCanPlaceObjects");

	Params::BrickEditorWidget_UpdateCanPlaceObjects Parms{};

	Parms.bNewCanPlace = bNewCanPlace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorWidget.UpdateEditorUIScale
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::UpdateEditorUIScale(float NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "UpdateEditorUIScale");

	Params::BrickEditorWidget_UpdateEditorUIScale Parms{};

	Parms.NewScale = NewScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickEditorWidget.UpdateSelection
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      SelectionName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAnythingSelected                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickEditorWidget::UpdateSelection(const class FText& SelectionName, bool bAnythingSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickEditorWidget", "UpdateSelection");

	Params::BrickEditorWidget_UpdateSelection Parms{};

	Parms.SelectionName = std::move(SelectionName);
	Parms.bAnythingSelected = bAnythingSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDContainerWidget.AddGameOverlayWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGameOverlayWidget*               Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDContainerWidget::AddGameOverlayWidget(class UGameOverlayWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDContainerWidget", "AddGameOverlayWidget");

	Params::HUDContainerWidget_AddGameOverlayWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDContainerWidget.AddHUDWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDContainerWidget::AddHUDWidget(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDContainerWidget", "AddHUDWidget");

	Params::HUDContainerWidget_AddHUDWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickGameInstance.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickGameInstance*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGameInstance* UBrickGameInstance::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGameInstance", "Get");

	Params::BrickGameInstance_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameInstance.ClosePopup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPopupHandle&                    Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EPopupResult                            Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGameInstance::ClosePopup(struct FPopupHandle& Handle, EPopupResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "ClosePopup");

	Params::BrickGameInstance_ClosePopup Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameInstance.CreatePopupParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UPopupParams>         ParamsClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPopupParams*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPopupParams* UBrickGameInstance::CreatePopupParams(TSubclassOf<class UPopupParams> ParamsClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "CreatePopupParams");

	Params::BrickGameInstance_CreatePopupParams Parms{};

	Parms.ParamsClass = ParamsClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameInstance.OpenMainMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceExit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGameInstance::OpenMainMenu(bool bForceExit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "OpenMainMenu");

	Params::BrickGameInstance_OpenMainMenu Parms{};

	Parms.bForceExit = bForceExit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameInstance.OpenMessagePopup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPopupHandle&                    Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// bool                                    bCanCancel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(EPopupResult Result)>    ClosedDelegate                                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGameInstance::OpenMessagePopup(struct FPopupHandle& Handle, const class FText& Message, bool bCanCancel, TDelegate<void(EPopupResult Result)> ClosedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "OpenMessagePopup");

	Params::BrickGameInstance_OpenMessagePopup Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Message = std::move(Message);
	Parms.bCanCancel = bCanCancel;
	Parms.ClosedDelegate = ClosedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameInstance.OpenPopup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPopupHandle&                    Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UPopupParams*                     PopupParams                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bToggleOpen                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGameInstance::OpenPopup(struct FPopupHandle& Handle, class UPopupParams* PopupParams, bool bToggleOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "OpenPopup");

	Params::BrickGameInstance_OpenPopup Parms{};

	Parms.Handle = std::move(Handle);
	Parms.PopupParams = PopupParams;
	Parms.bToggleOpen = bToggleOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameInstance.QuitGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGameInstance::QuitGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "QuitGame");

	Params::BrickGameInstance_QuitGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameInstance.IsPopupOpen
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPopupHandle&              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGameInstance::IsPopupOpen(const struct FPopupHandle& Handle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameInstance", "IsPopupOpen");

	Params::BrickGameInstance_IsPopupOpen Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.CurrentItemWidget.FadeIn
// (Event, Public, BlueprintEvent)

void UCurrentItemWidget::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrentItemWidget", "FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.CurrentItemWidget.FadeOut
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCurrentItemWidget::FadeOut(bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrentItemWidget", "FadeOut");

	Params::CurrentItemWidget_FadeOut Parms{};

	Parms.bImmediate = bImmediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.CurrentItemWidget.UpdateAmmo
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Capacity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ammo                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCurrentItemWidget::UpdateAmmo(int32 Current, int32 Capacity, int32 Ammo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrentItemWidget", "UpdateAmmo");

	Params::CurrentItemWidget_UpdateAmmo Parms{};

	Parms.Current = Current;
	Parms.Capacity = Capacity;
	Parms.Ammo = Ammo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.CurrentItemWidget.UpdateAmmoType
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAmmoType                               NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCurrentItemWidget::UpdateAmmoType(EAmmoType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrentItemWidget", "UpdateAmmoType");

	Params::CurrentItemWidget_UpdateAmmoType Parms{};

	Parms.NewType = NewType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.CurrentItemWidget.UpdateFireMode
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EFireMode                         NewMode                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bHasFirearm                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCurrentItemWidget::UpdateFireMode(const EFireMode NewMode, const bool bHasFirearm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrentItemWidget", "UpdateFireMode");

	Params::CurrentItemWidget_UpdateFireMode Parms{};

	Parms.NewMode = NewMode;
	Parms.bHasFirearm = bHasFirearm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.CurrentItemWidget.UpdateItemName
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCurrentItemWidget::UpdateItemName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrentItemWidget", "UpdateItemName");

	Params::CurrentItemWidget_UpdateItemName Parms{};

	Parms.NewName = std::move(NewName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickGameSession.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickGameSession*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickGameSession* ABrickGameSession::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGameSession", "Get");

	Params::BrickGameSession_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickGameState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickGameState* ABrickGameState::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGameState", "Get");

	Params::BrickGameState_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.OnGameModeSubLevelLoaded
// (Final, Native, Protected)

void ABrickGameState::OnGameModeSubLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "OnGameModeSubLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.OnMatchTimerElapsed
// (Native, Event, Protected, BlueprintEvent)

void ABrickGameState::OnMatchTimerElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "OnMatchTimerElapsed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.OnRep_CurrentRound
// (Final, Native, Private)

void ABrickGameState::OnRep_CurrentRound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "OnRep_CurrentRound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.OnRep_MatchSettings
// (Final, Native, Private)

void ABrickGameState::OnRep_MatchSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "OnRep_MatchSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.OnRep_MatchWinner
// (Final, Native, Private)

void ABrickGameState::OnRep_MatchWinner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "OnRep_MatchWinner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.OnRep_NextMatchSettings
// (Final, Native, Private)

void ABrickGameState::OnRep_NextMatchSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "OnRep_NextMatchSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.SetCurrentRound
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewRound                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickGameState::SetCurrentRound(int32 NewRound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "SetCurrentRound");

	Params::BrickGameState_SetCurrentRound Parms{};

	Parms.NewRound = NewRound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.SetMatchSettings
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchSettings&            NewSettings                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickGameState::SetMatchSettings(const struct FMatchSettings& NewSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "SetMatchSettings");

	Params::BrickGameState_SetMatchSettings Parms{};

	Parms.NewSettings = std::move(NewSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.SetMatchWinner
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchWinner&              InWinner                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickGameState::SetMatchWinner(const struct FMatchWinner& InWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "SetMatchWinner");

	Params::BrickGameState_SetMatchWinner Parms{};

	Parms.InWinner = std::move(InWinner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.SetNextMatchSettings
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchSettings&            NewSettings                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickGameState::SetNextMatchSettings(const struct FMatchSettings& NewSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "SetNextMatchSettings");

	Params::BrickGameState_SetNextMatchSettings Parms{};

	Parms.NewSettings = std::move(NewSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGameState.CanPlayerJoinTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickGameState::CanPlayerJoinTeam(class ABrickPlayerController* PC, const struct FGenericTeamId& TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "CanPlayerJoinTeam");

	Params::BrickGameState_CanPlayerJoinTeam Parms{};

	Parms.PC = PC;
	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.DoesTeamExist
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickGameState::DoesTeamExist(const struct FGenericTeamId& TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "DoesTeamExist");

	Params::BrickGameState_DoesTeamExist Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.FindTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickTeam*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickTeam* ABrickGameState::FindTeam(const struct FGenericTeamId& TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "FindTeam");

	Params::BrickGameState_FindTeam Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetCurrentRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetCurrentRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetCurrentRound");

	Params::BrickGameState_GetCurrentRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetDefaultTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickTeam*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickTeam* ABrickGameState::GetDefaultTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetDefaultTeam");

	Params::BrickGameState_GetDefaultTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetDummyTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickTeam*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickTeam* ABrickGameState::GetDummyTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetDummyTeam");

	Params::BrickGameState_GetDummyTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetMatchRandomSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 ABrickGameState::GetMatchRandomSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetMatchRandomSeed");

	Params::BrickGameState_GetMatchRandomSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetMatchSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMatchSettings             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMatchSettings ABrickGameState::GetMatchSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetMatchSettings");

	Params::BrickGameState_GetMatchSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetMatchTimerRate
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetMatchTimerRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetMatchTimerRate");

	Params::BrickGameState_GetMatchTimerRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetMatchTimerRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetMatchTimerRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetMatchTimerRemaining");

	Params::BrickGameState_GetMatchTimerRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetMatchWinner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMatchWinner               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FMatchWinner ABrickGameState::GetMatchWinner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetMatchWinner");

	Params::BrickGameState_GetMatchWinner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetMaxPlayersInTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetMaxPlayersInTeam(const struct FGenericTeamId& TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetMaxPlayersInTeam");

	Params::BrickGameState_GetMaxPlayersInTeam Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetNextMatchSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMatchSettings             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMatchSettings ABrickGameState::GetNextMatchSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetNextMatchSettings");

	Params::BrickGameState_GetNextMatchSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetNumFreeSlotsInTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetNumFreeSlotsInTeam(const struct FGenericTeamId& TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetNumFreeSlotsInTeam");

	Params::BrickGameState_GetNumFreeSlotsInTeam Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetNumPlayersInTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId&            TeamID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetNumPlayersInTeam(const struct FGenericTeamId& TeamID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetNumPlayersInTeam");

	Params::BrickGameState_GetNumPlayersInTeam Parms{};

	Parms.TeamID = std::move(TeamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetNumPlayersToStartWarmup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABrickGameState::GetNumPlayersToStartWarmup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetNumPlayersToStartWarmup");

	Params::BrickGameState_GetNumPlayersToStartWarmup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetTeams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UBrickTeam*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UBrickTeam*> ABrickGameState::GetTeams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetTeams");

	Params::BrickGameState_GetTeams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetVehiclePrice
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVehicleSpawnProperties&   Props                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickGameState::GetVehiclePrice(const struct FVehicleSpawnProperties& Props) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetVehiclePrice");

	Params::BrickGameState_GetVehiclePrice Parms{};

	Parms.Props = std::move(Props);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGameState.GetZombieTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickTeam*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickTeam* ABrickGameState::GetZombieTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGameState", "GetZombieTeam");

	Params::BrickGameState_GetZombieTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickGridPanel.SetDefaultColumnFill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Coefficient                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridPanel::SetDefaultColumnFill(const float Coefficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPanel", "SetDefaultColumnFill");

	Params::BrickGridPanel_SetDefaultColumnFill Parms{};

	Parms.Coefficient = Coefficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGridPanel.SetDefaultRowFill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Coefficient                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridPanel::SetDefaultRowFill(const float Coefficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPanel", "SetDefaultRowFill");

	Params::BrickGridPanel_SetDefaultRowFill Parms{};

	Parms.Coefficient = Coefficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickGridPanel.SetSlotSpacingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EBrickUISpacingStyle              NewStyle                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridPanel::SetSlotSpacingStyle(const EBrickUISpacingStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPanel", "SetSlotSpacingStyle");

	Params::BrickGridPanel_SetSlotSpacingStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickHorizontalBox.SetSlotSpacingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUISpacingStyle                    NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickHorizontalBox::SetSlotSpacingStyle(EBrickUISpacingStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickHorizontalBox", "SetSlotSpacingStyle");

	Params::BrickHorizontalBox_SetSlotSpacingStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.ClearIconAtlas
// (Final, Native, Public, BlueprintCallable)

void UBrickImage::ClearIconAtlas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "ClearIconAtlas");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickImage::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "SetColorStyle");

	Params::BrickImage_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.SetIconAtlas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIIconAtlas                       NewAtlas                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickImage::SetIconAtlas(EBrickUIIconAtlas NewAtlas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "SetIconAtlas");

	Params::BrickImage_SetIconAtlas Parms{};

	Parms.NewAtlas = NewAtlas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.SetIconAtlasAndSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIIconAtlas                       NewAtlas                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickUIIconSlot&          NewSlot                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBrickImage::SetIconAtlasAndSlot(EBrickUIIconAtlas NewAtlas, const struct FBrickUIIconSlot& NewSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "SetIconAtlasAndSlot");

	Params::BrickImage_SetIconAtlasAndSlot Parms{};

	Parms.NewAtlas = NewAtlas;
	Parms.NewSlot = std::move(NewSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.SetIconSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickUIIconSlot&          NewSlot                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBrickImage::SetIconSlot(const struct FBrickUIIconSlot& NewSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "SetIconSlot");

	Params::BrickImage_SetIconSlot Parms{};

	Parms.NewSlot = std::move(NewSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.SetIsThrobber
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsThrobber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickImage::SetIsThrobber(bool bNewIsThrobber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "SetIsThrobber");

	Params::BrickImage_SetIsThrobber Parms{};

	Parms.bNewIsThrobber = bNewIsThrobber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.SetStyleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickImage::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "SetStyleState");

	Params::BrickImage_SetStyleState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickImage.IsLoadingImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickImage::IsLoadingImage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickImage", "IsLoadingImage");

	Params::BrickImage_IsLoadingImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.DragStrip.CreateTreeMID
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ADragStrip::CreateTreeMID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragStrip", "CreateTreeMID");

	Params::DragStrip_CreateTreeMID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.DragStrip.Interact_StartRace
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADragStrip::Interact_StartRace(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragStrip", "Interact_StartRace");

	Params::DragStrip_Interact_StartRace Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.DragStrip.OnRep_LeftLaneState
// (Final, Native, Public)

void ADragStrip::OnRep_LeftLaneState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragStrip", "OnRep_LeftLaneState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.DragStrip.OnRep_RaceState
// (Final, Native, Public)

void ADragStrip::OnRep_RaceState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragStrip", "OnRep_RaceState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.DragStrip.OnRep_RightLaneState
// (Final, Native, Public)

void ADragStrip::OnRep_RightLaneState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragStrip", "OnRep_RightLaneState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.DragStrip.GetInteractionLocation
// (Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ADragStrip::GetInteractionLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragStrip", "GetInteractionLocation");

	Params::DragStrip_GetInteractionLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickObjectPool.Get
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickObjectPool*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickObjectPool* UBrickObjectPool::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickObjectPool", "Get");

	Params::BrickObjectPool_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickObjectPool.GetWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UUserWidget>    WidgetClass                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UBrickObjectPool::GetWidget(const class UObject* WorldContextObject, const TSubclassOf<class UUserWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickObjectPool", "GetWidget");

	Params::BrickObjectPool_GetWidget Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickObjectPool.PoolWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickObjectPool::PoolWidget(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickObjectPool", "PoolWidget");

	Params::BrickObjectPool_PoolWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickObjectPool.PoolWidgets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UUserWidget*>&             Widgets                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const int32                             NumToKeep                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickObjectPool::PoolWidgets(TArray<class UUserWidget*>& Widgets, const int32 NumToKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickObjectPool", "PoolWidgets");

	Params::BrickObjectPool_PoolWidgets Parms{};

	Parms.Widgets = std::move(Widgets);
	Parms.NumToKeep = NumToKeep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Widgets = std::move(Parms.Widgets);
}


// Function BrickRigs.BrickObjectPool.RecycleWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUserWidget*>&             Widgets                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const TSubclassOf<class UUserWidget>    WidgetClass                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutRecycled                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UBrickObjectPool::RecycleWidget(const class UObject* WorldContextObject, TArray<class UUserWidget*>& Widgets, const TSubclassOf<class UUserWidget> WidgetClass, const int32 Index_0, bool* bOutRecycled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickObjectPool", "RecycleWidget");

	Params::BrickObjectPool_RecycleWidget Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Widgets = std::move(Widgets);
	Parms.WidgetClass = WidgetClass;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Widgets = std::move(Parms.Widgets);

	if (bOutRecycled != nullptr)
		*bOutRecycled = Parms.bOutRecycled;

	return Parms.ReturnValue;
}


// Function BrickRigs.DetonatorBrick.Interact_Detonate
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDetonatorBrick::Interact_Detonate(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetonatorBrick", "Interact_Detonate");

	Params::DetonatorBrick_Interact_Detonate Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ConnectorSpacingPropertyWidget.SetConnectorSpacing
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FScalableBrickConnectorSpacing&NewSpacing                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UConnectorSpacingPropertyWidget::SetConnectorSpacing(const struct FScalableBrickConnectorSpacing& NewSpacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConnectorSpacingPropertyWidget", "SetConnectorSpacing");

	Params::ConnectorSpacingPropertyWidget_SetConnectorSpacing Parms{};

	Parms.NewSpacing = std::move(NewSpacing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ConnectorSpacingPropertyWidget.UpdateConnectorSpacing
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FScalableBrickConnectorSpacing&NewSpacing                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const uint8                             AxisFlags                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConnectorSpacingPropertyWidget::UpdateConnectorSpacing(const struct FScalableBrickConnectorSpacing& NewSpacing, const uint8 AxisFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConnectorSpacingPropertyWidget", "UpdateConnectorSpacing");

	Params::ConnectorSpacingPropertyWidget_UpdateConnectorSpacing Parms{};

	Parms.NewSpacing = std::move(NewSpacing);
	Parms.AxisFlags = AxisFlags;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ContextMenuWidget.OnActionTriggered
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FName&                      ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReleased                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UContextMenuWidget::OnActionTriggered(const class FName& ActionName, bool bReleased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ContextMenuWidget", "OnActionTriggered");

	Params::ContextMenuWidget_OnActionTriggered Parms{};

	Parms.ActionName = ActionName;
	Parms.bReleased = bReleased;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ContextMenuWidget.UpdateTitleText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UContextMenuWidget::UpdateTitleText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ContextMenuWidget", "UpdateTitleText");

	Params::ContextMenuWidget_UpdateTitleText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickPlayerController.AccessInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryComponent*              InAccessedInventory                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::AccessInventory(class UInventoryComponent* InAccessedInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "AccessInventory");

	Params::BrickPlayerController_AccessInventory Parms{};

	Parms.InAccessedInventory = InAccessedInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.AdjustSlomoSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Dir                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::AdjustSlomoSpeed(int32 Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "AdjustSlomoSpeed");

	Params::BrickPlayerController_AdjustSlomoSpeed Parms{};

	Parms.Dir = Dir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.AdminSay
// (Final, Exec, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::AdminSay(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "AdminSay");

	Params::BrickPlayerController_AdminSay Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.CanCheat
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanCheat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanCheat");

	Params::BrickPlayerController_CanCheat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanRestartAt
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPlayerSpawnRequest*             InOutSpawnRequest                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bForceRestart                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayerSpawnResult                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerSpawnResult ABrickPlayerController::CanRestartAt(struct FPlayerSpawnRequest* InOutSpawnRequest, bool bForceRestart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanRestartAt");

	Params::BrickPlayerController_CanRestartAt Parms{};

	Parms.bForceRestart = bForceRestart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutSpawnRequest != nullptr)
		*InOutSpawnRequest = std::move(Parms.InOutSpawnRequest);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.ClientDamagedCharacter
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const struct FClientDamageInfo&         DamageInfo                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientDamagedCharacter(const struct FClientDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientDamagedCharacter");

	Params::BrickPlayerController_ClientDamagedCharacter Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ClientOnFailedToRestart
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EPlayerSpawnResult                      SpawnResult                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVehicleSpawnProperties&   Props                                                  (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientOnFailedToRestart(EPlayerSpawnResult SpawnResult, const struct FVehicleSpawnProperties& Props)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientOnFailedToRestart");

	Params::BrickPlayerController_ClientOnFailedToRestart Parms{};

	Parms.SpawnResult = SpawnResult;
	Parms.Props = std::move(Props);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ClientReceiveChatMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const struct FBrickChatMessage&         ChatMessage                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientReceiveChatMessage(const struct FBrickChatMessage& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientReceiveChatMessage");

	Params::BrickPlayerController_ClientReceiveChatMessage Parms{};

	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ClientReceiveChatMessages
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const TArray<struct FBrickChatMessage>& ChatMessages                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientReceiveChatMessages(const TArray<struct FBrickChatMessage>& ChatMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientReceiveChatMessages");

	Params::BrickPlayerController_ClientReceiveChatMessages Parms{};

	Parms.ChatMessages = std::move(ChatMessages);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ClientRevertVehicleDamage
// (Final, Net, NetReliable, Native, Event, Private, NetClient, NetValidate)
// Parameters:
// class ABrickVehicle*                    Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientRevertVehicleDamage(class ABrickVehicle* Vehicle, const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientRevertVehicleDamage");

	Params::BrickPlayerController_ClientRevertVehicleDamage Parms{};

	Parms.Vehicle = Vehicle;
	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ClientSentWrongAdminPassword
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// uint8                                   AttemptsRemaining                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientSentWrongAdminPassword(uint8 AttemptsRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientSentWrongAdminPassword");

	Params::BrickPlayerController_ClientSentWrongAdminPassword Parms{};

	Parms.AttemptsRemaining = AttemptsRemaining;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ClientWasKickedForDuration
// (Final, Net, NetReliable, Native, Event, Private, HasDefaults, NetClient)
// Parameters:
// const class FString&                    KickReason                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimespan&                 KickDuration                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ClientWasKickedForDuration(const class FString& KickReason, const struct FTimespan& KickDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ClientWasKickedForDuration");

	Params::BrickPlayerController_ClientWasKickedForDuration Parms{};

	Parms.KickReason = std::move(KickReason);
	Parms.KickDuration = std::move(KickDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.CloseInventory
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::CloseInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CloseInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.CloseMap
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::CloseMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CloseMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.CloseScoreboard
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::CloseScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CloseScoreboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.CloseVehicleBrowser
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::CloseVehicleBrowser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CloseVehicleBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.DestroyAllDummies
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::DestroyAllDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "DestroyAllDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.DestroyCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseCharacter*                   Char                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::DestroyCharacter(class ABaseCharacter* Char)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "DestroyCharacter");

	Params::BrickPlayerController_DestroyCharacter Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.EnterEditor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EUGCType                                InUGCType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUGCFileInfo&              InFileInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bImport                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::EnterEditor(EUGCType InUGCType, const struct FUGCFileInfo& InFileInfo, bool bImport, class AActor* EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "EnterEditor");

	Params::BrickPlayerController_EnterEditor Parms{};

	Parms.InUGCType = InUGCType;
	Parms.InFileInfo = std::move(InFileInfo);
	Parms.bImport = bImport;
	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.EnterFreeCam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::EnterFreeCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "EnterFreeCam");

	Params::BrickPlayerController_EnterFreeCam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.EnterVehicleEditor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::EnterVehicleEditor(class AActor* EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "EnterVehicleEditor");

	Params::BrickPlayerController_EnterVehicleEditor Parms{};

	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ExitEditor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUGCFileInfo&              InFileInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::ExitEditor(const struct FUGCFileInfo& InFileInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ExitEditor");

	Params::BrickPlayerController_ExitEditor Parms{};

	Parms.InFileInfo = std::move(InFileInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ExitFreeCam
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::ExitFreeCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ExitFreeCam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ExplodeVehicle
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::ExplodeVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ExplodeVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.JoinTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::JoinTeam(const struct FGenericTeamId& InTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "JoinTeam");

	Params::BrickPlayerController_JoinTeam Parms{};

	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.KillCharacter
// (Final, Exec, Native, Public, BlueprintCallable)

void ABrickPlayerController::KillCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "KillCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OnRep_AccessedInventory
// (Final, Native, Private)
// Parameters:
// class UInventoryComponent*              OldInventory                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::OnRep_AccessedInventory(class UInventoryComponent* OldInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OnRep_AccessedInventory");

	Params::BrickPlayerController_OnRep_AccessedInventory Parms{};

	Parms.OldInventory = OldInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OnRep_PlayerCharacter
// (Final, Native, Private)
// Parameters:
// class ABaseCharacter*                   OldCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::OnRep_PlayerCharacter(class ABaseCharacter* OldCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OnRep_PlayerCharacter");

	Params::BrickPlayerController_OnRep_PlayerCharacter Parms{};

	Parms.OldCharacter = OldCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OnRep_ReplicatedInventory
// (Final, Native, Private)

void ABrickPlayerController::OnRep_ReplicatedInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OnRep_ReplicatedInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OnRep_SpectatedCharacter
// (Final, Native, Private)

void ABrickPlayerController::OnRep_SpectatedCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OnRep_SpectatedCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OpenChat
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::OpenChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OpenChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OpenInventory
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::OpenInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OpenInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OpenMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bToggleOpen                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::OpenMap(bool bToggleOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OpenMap");

	Params::BrickPlayerController_OpenMap Parms{};

	Parms.bToggleOpen = bToggleOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OpenScoreboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bToggleOpen                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::OpenScoreboard(bool bToggleOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OpenScoreboard");

	Params::BrickPlayerController_OpenScoreboard Parms{};

	Parms.bToggleOpen = bToggleOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.OpenVehicleBrowser
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::OpenVehicleBrowser(class AActor* EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "OpenVehicleBrowser");

	Params::BrickPlayerController_OpenVehicleBrowser Parms{};

	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.PossessCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseCharacter*                   Char                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::PossessCharacter(class ABaseCharacter* Char)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "PossessCharacter");

	Params::BrickPlayerController_PossessCharacter Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.RecoverAllDummies
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::RecoverAllDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "RecoverAllDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.RequestAdminAccess
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PW                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::RequestAdminAccess(const class FString& PW)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "RequestAdminAccess");

	Params::BrickPlayerController_RequestAdminAccess Parms{};

	Parms.PW = std::move(PW);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ResetLevel
// (Final, Exec, Native, Public, BlueprintCallable)

void ABrickPlayerController::ResetLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ResetLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.RestartAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FPlayerSpawnRequest&       SpawnRequest                                           (Parm, NativeAccessSpecifierPublic)
// EPlayerSpawnResult                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerSpawnResult ABrickPlayerController::RestartAt(const struct FPlayerSpawnRequest& SpawnRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "RestartAt");

	Params::BrickPlayerController_RestartAt Parms{};

	Parms.SpawnRequest = std::move(SpawnRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.RestartAtNextSpawnPoint
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::RestartAtNextSpawnPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "RestartAtNextSpawnPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.RestartMatch
// (Final, Exec, Native, Public, BlueprintCallable)

void ABrickPlayerController::RestartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "RestartMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.RestartOnSpot
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::RestartOnSpot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "RestartOnSpot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.Say
// (Final, Exec, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::Say(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "Say");

	Params::BrickPlayerController_Say Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ScrapAllVehicles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIncludeUsed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ScrapAllVehicles(bool bIncludeUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ScrapAllVehicles");

	Params::BrickPlayerController_ScrapAllVehicles Parms{};

	Parms.bIncludeUsed = bIncludeUsed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ScrapVehicle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPerson                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ScrapVehicle(class ABrickVehicle* InVehicle, bool bInPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ScrapVehicle");

	Params::BrickPlayerController_ScrapVehicle Parms{};

	Parms.InVehicle = InVehicle;
	Parms.bInPerson = bInPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SendChatMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EChatContext                            Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::SendChatMessage(EChatContext Context, const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SendChatMessage");

	Params::BrickPlayerController_SendChatMessage Parms{};

	Parms.Context = Context;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerAccessInventory
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UInventoryComponent*              InInventory                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerAccessInventory(class UInventoryComponent* InInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerAccessInventory");

	Params::BrickPlayerController_ServerAccessInventory Parms{};

	Parms.InInventory = InInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerApplyMatchSettings
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bFade                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerApplyMatchSettings(bool bFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerApplyMatchSettings");

	Params::BrickPlayerController_ServerApplyMatchSettings Parms{};

	Parms.bFade = bFade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerAttachWinchBrick
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UWinchBrick*                      WinchBrick                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FWinchAttachTarget&        AttachTarget                                           (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerAttachWinchBrick(class UWinchBrick* WinchBrick, const struct FWinchAttachTarget& AttachTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerAttachWinchBrick");

	Params::BrickPlayerController_ServerAttachWinchBrick Parms{};

	Parms.WinchBrick = WinchBrick;
	Parms.AttachTarget = std::move(AttachTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerCheatMoney
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerCheatMoney(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerCheatMoney");

	Params::BrickPlayerController_ServerCheatMoney Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerCheatScore
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerCheatScore(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerCheatScore");

	Params::BrickPlayerController_ServerCheatScore Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerCycleCharacters
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bForward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerCycleCharacters(bool bForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerCycleCharacters");

	Params::BrickPlayerController_ServerCycleCharacters Parms{};

	Parms.bForward = bForward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerCycleVehicles
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bReverse                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerCycleVehicles(bool bReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerCycleVehicles");

	Params::BrickPlayerController_ServerCycleVehicles Parms{};

	Parms.bReverse = bReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerDestroyAllDummies
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickPlayerController::ServerDestroyAllDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerDestroyAllDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerDestroyCharacter
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ABaseCharacter*                   Char                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerDestroyCharacter(class ABaseCharacter* Char)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerDestroyCharacter");

	Params::BrickPlayerController_ServerDestroyCharacter Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerEngageCouplingBrick
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UCouplingBrick*                   CouplingBrick                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEngage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerEngageCouplingBrick(class UCouplingBrick* CouplingBrick, bool bEngage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerEngageCouplingBrick");

	Params::BrickPlayerController_ServerEngageCouplingBrick Parms{};

	Parms.CouplingBrick = CouplingBrick;
	Parms.bEngage = bEngage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerExplodeVehicle
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickPlayerController::ServerExplodeVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerExplodeVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerJoinTeam
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FGenericTeamId&            InTeamId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerJoinTeam(const struct FGenericTeamId& InTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerJoinTeam");

	Params::BrickPlayerController_ServerJoinTeam Parms{};

	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerKillCharacter
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickPlayerController::ServerKillCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerKillCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerOnAnyVehicleConstructed
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerOnAnyVehicleConstructed(class ABrickVehicle* InVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerOnAnyVehicleConstructed");

	Params::BrickPlayerController_ServerOnAnyVehicleConstructed Parms{};

	Parms.InVehicle = InVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerOnMeleeHit
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FRepHitInfo&               HitInfo                                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerOnMeleeHit(const struct FRepHitInfo& HitInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerOnMeleeHit");

	Params::BrickPlayerController_ServerOnMeleeHit Parms{};

	Parms.HitInfo = std::move(HitInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerOnPlayerChangedMatchSettings
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FMatchSettings&            NewSettings                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bApply                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFade                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerOnPlayerChangedMatchSettings(const struct FMatchSettings& NewSettings, bool bApply, bool bFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerOnPlayerChangedMatchSettings");

	Params::BrickPlayerController_ServerOnPlayerChangedMatchSettings Parms{};

	Parms.NewSettings = std::move(NewSettings);
	Parms.bApply = bApply;
	Parms.bFade = bFade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerOnProjectileHit
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FProjectileHitInfo&        HitInfo                                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerOnProjectileHit(const struct FProjectileHitInfo& HitInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerOnProjectileHit");

	Params::BrickPlayerController_ServerOnProjectileHit Parms{};

	Parms.HitInfo = std::move(HitInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerOpenGravelSilo
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class AGravelSilo*                      Silo                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerOpenGravelSilo(class AGravelSilo* Silo, bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerOpenGravelSilo");

	Params::BrickPlayerController_ServerOpenGravelSilo Parms{};

	Parms.Silo = Silo;
	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerPossessCharacter
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ABaseCharacter*                   Char                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerPossessCharacter(class ABaseCharacter* Char)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerPossessCharacter");

	Params::BrickPlayerController_ServerPossessCharacter Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerRecoverAllDummies
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickPlayerController::ServerRecoverAllDummies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerRecoverAllDummies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerRequestAdminAccess
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const class FString&                    PW                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerRequestAdminAccess(const class FString& PW)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerRequestAdminAccess");

	Params::BrickPlayerController_ServerRequestAdminAccess Parms{};

	Parms.PW = std::move(PW);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerResetLevel
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickPlayerController::ServerResetLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerResetLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerRestartAt
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FPlayerSpawnRequest&       SpawnRequest                                           (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerRestartAt(const struct FPlayerSpawnRequest& SpawnRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerRestartAt");

	Params::BrickPlayerController_ServerRestartAt Parms{};

	Parms.SpawnRequest = std::move(SpawnRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerRestartMatch
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ABrickPlayerController::ServerRestartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerRestartMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerScrapAllVehicles
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bIncludeUsed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerScrapAllVehicles(bool bIncludeUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerScrapAllVehicles");

	Params::BrickPlayerController_ServerScrapAllVehicles Parms{};

	Parms.bIncludeUsed = bIncludeUsed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerScrapVehicle
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPerson                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerScrapVehicle(class ABrickVehicle* InVehicle, bool bInPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerScrapVehicle");

	Params::BrickPlayerController_ServerScrapVehicle Parms{};

	Parms.InVehicle = InVehicle;
	Parms.bInPerson = bInPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerSendChatMessage
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// EChatContext                            Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerSendChatMessage(EChatContext Context, const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerSendChatMessage");

	Params::BrickPlayerController_ServerSendChatMessage Parms{};

	Parms.Context = Context;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerSetElevatorDirection
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class AElevator*                        Elevator                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EElevatorDirection                      Dir                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerSetElevatorDirection(class AElevator* Elevator, EElevatorDirection Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerSetElevatorDirection");

	Params::BrickPlayerController_ServerSetElevatorDirection Parms{};

	Parms.Elevator = Elevator;
	Parms.Dir = Dir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerSetSwitchBrickValue
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class USwitchBrick*                     SwitchBrick                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int8                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerSetSwitchBrickValue(class USwitchBrick* SwitchBrick, int8 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerSetSwitchBrickValue");

	Params::BrickPlayerController_ServerSetSwitchBrickValue Parms{};

	Parms.SwitchBrick = SwitchBrick;
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerSetVehiclePinMode
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// EVehiclePinMode                         PinMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerSetVehiclePinMode(EVehiclePinMode PinMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerSetVehiclePinMode");

	Params::BrickPlayerController_ServerSetVehiclePinMode Parms{};

	Parms.PinMode = PinMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerSpawnDummy
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  CompressedYaw                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerSpawnDummy(const struct FVector& Location, uint16 CompressedYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerSpawnDummy");

	Params::BrickPlayerController_ServerSpawnDummy Parms{};

	Parms.Location = std::move(Location);
	Parms.CompressedYaw = CompressedYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerSpectateNextCharacter
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bForward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerSpectateNextCharacter(bool bForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerSpectateNextCharacter");

	Params::BrickPlayerController_ServerSpectateNextCharacter Parms{};

	Parms.bForward = bForward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerStartDragRace
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ADragStrip*                       DragStrip                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerStartDragRace(class ADragStrip* DragStrip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerStartDragRace");

	Params::BrickPlayerController_ServerStartDragRace Parms{};

	Parms.DragStrip = DragStrip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerToggleInvincible
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bVehicle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerToggleInvincible(bool bVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerToggleInvincible");

	Params::BrickPlayerController_ServerToggleInvincible Parms{};

	Parms.bVehicle = bVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerTriggerDetonatorBrick
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UDetonatorBrick*                  DetonatorBrick                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerTriggerDetonatorBrick(class UDetonatorBrick* DetonatorBrick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerTriggerDetonatorBrick");

	Params::BrickPlayerController_ServerTriggerDetonatorBrick Parms{};

	Parms.DetonatorBrick = DetonatorBrick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerUpdateActuator
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FRepActuatorState&         NewState                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  RestartVersion                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerUpdateActuator(const struct FRepActuatorState& NewState, const struct FRestartTransformVersion& RestartVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerUpdateActuator");

	Params::BrickPlayerController_ServerUpdateActuator Parms{};

	Parms.NewState = std::move(NewState);
	Parms.RestartVersion = std::move(RestartVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerUpdateVehicleMovement
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ABrickVehicle*                    Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FRepBrickMovementState>&MovementSates                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const float                             OwnerTimestamp                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerUpdateVehicleMovement(class ABrickVehicle* Vehicle, const TArray<struct FRepBrickMovementState>& MovementSates, const float OwnerTimestamp, const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerUpdateVehicleMovement");

	Params::BrickPlayerController_ServerUpdateVehicleMovement Parms{};

	Parms.Vehicle = Vehicle;
	Parms.MovementSates = std::move(MovementSates);
	Parms.OwnerTimestamp = OwnerTimestamp;
	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ServerUpdateVehicleMovementAndDamage
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ABrickVehicle*                    Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FRepBrickMovementState>&MovementSates                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const float                             OwnerTimestamp                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickConnectionDamageBitfield&ConnectionDamage                                       (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRestartTransformVersion&  ComparisonIndex                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABrickPlayerController::ServerUpdateVehicleMovementAndDamage(class ABrickVehicle* Vehicle, const TArray<struct FRepBrickMovementState>& MovementSates, const float OwnerTimestamp, const struct FBrickConnectionDamageBitfield& ConnectionDamage, const struct FRestartTransformVersion& ComparisonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ServerUpdateVehicleMovementAndDamage");

	Params::BrickPlayerController_ServerUpdateVehicleMovementAndDamage Parms{};

	Parms.Vehicle = Vehicle;
	Parms.MovementSates = std::move(MovementSates);
	Parms.OwnerTimestamp = OwnerTimestamp;
	Parms.ConnectionDamage = std::move(ConnectionDamage);
	Parms.ComparisonIndex = std::move(ComparisonIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SetFixedCam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewFixedCam                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::SetFixedCam(bool bNewFixedCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SetFixedCam");

	Params::BrickPlayerController_SetFixedCam Parms{};

	Parms.bNewFixedCam = bNewFixedCam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SetFreeCamMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFreeCamMode                            NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::SetFreeCamMode(EFreeCamMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SetFreeCamMode");

	Params::BrickPlayerController_SetFreeCamMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SetPlayerCharacter
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseCharacter*                   InCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::SetPlayerCharacter(class ABaseCharacter* InCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SetPlayerCharacter");

	Params::BrickPlayerController_SetPlayerCharacter Parms{};

	Parms.InCharacter = InCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SetSpectatedCharacter
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseCharacter*                   InCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::SetSpectatedCharacter(class ABaseCharacter* InCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SetSpectatedCharacter");

	Params::BrickPlayerController_SetSpectatedCharacter Parms{};

	Parms.InCharacter = InCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SetVehiclePinMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVehiclePinMode                         PinMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::SetVehiclePinMode(EVehiclePinMode PinMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SetVehiclePinMode");

	Params::BrickPlayerController_SetVehiclePinMode Parms{};

	Parms.PinMode = PinMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ShowHUDWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftClassPtr<class UClass>&      HUDWidgetClass                                         (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ShowHUDWidget(const TSoftClassPtr<class UClass>& HUDWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ShowHUDWidget");

	Params::BrickPlayerController_ShowHUDWidget Parms{};

	Parms.HUDWidgetClass = HUDWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SpawnDummy
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::SpawnDummy(const struct FVector& Location, float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SpawnDummy");

	Params::BrickPlayerController_SpawnDummy Parms{};

	Parms.Location = std::move(Location);
	Parms.Yaw = Yaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.SpectateNextCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::SpectateNextCharacter(bool bForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "SpectateNextCharacter");

	Params::BrickPlayerController_SpectateNextCharacter Parms{};

	Parms.bForward = bForward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.ToggleInvincible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVehicle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickPlayerController::ToggleInvincible(bool bVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ToggleInvincible");

	Params::BrickPlayerController_ToggleInvincible Parms{};

	Parms.bVehicle = bVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.ToggleSlowMotion
// (Final, Native, Public, BlueprintCallable)

void ABrickPlayerController::ToggleSlowMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "ToggleSlowMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickPlayerController.CanAccessInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryComponent*              InInventory                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanAccessInventory(class UInventoryComponent* InInventory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanAccessInventory");

	Params::BrickPlayerController_CanAccessInventory Parms{};

	Parms.InInventory = InInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanDestroyAllDummies
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanDestroyAllDummies() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanDestroyAllDummies");

	Params::BrickPlayerController_CanDestroyAllDummies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanDestroyCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   Char                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanDestroyCharacter(class ABaseCharacter* Char) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanDestroyCharacter");

	Params::BrickPlayerController_CanDestroyCharacter Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanEnterEditor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUGCType                                InUGCType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanEnterEditor(EUGCType InUGCType, class AActor* EntryPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanEnterEditor");

	Params::BrickPlayerController_CanEnterEditor Parms{};

	Parms.InUGCType = InUGCType;
	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanEverBeAdmin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanEverBeAdmin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanEverBeAdmin");

	Params::BrickPlayerController_CanEverBeAdmin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanExplodeVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanExplodeVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanExplodeVehicle");

	Params::BrickPlayerController_CanExplodeVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanInteract
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanInteract() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanInteract");

	Params::BrickPlayerController_CanInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanJoinTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGenericTeamId&            InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanJoinTeam(const struct FGenericTeamId& InTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanJoinTeam");

	Params::BrickPlayerController_CanJoinTeam Parms{};

	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanOpenVehicleBrowser
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanOpenVehicleBrowser(class AActor* EntryPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanOpenVehicleBrowser");

	Params::BrickPlayerController_CanOpenVehicleBrowser Parms{};

	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanPinVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanPinVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanPinVehicle");

	Params::BrickPlayerController_CanPinVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanPossessCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   Char                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanPossessCharacter(class ABaseCharacter* Char) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanPossessCharacter");

	Params::BrickPlayerController_CanPossessCharacter Parms{};

	Parms.Char = Char;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanRecoverAllDummies
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanRecoverAllDummies() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanRecoverAllDummies");

	Params::BrickPlayerController_CanRecoverAllDummies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanRestartOnSpot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanRestartOnSpot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanRestartOnSpot");

	Params::BrickPlayerController_CanRestartOnSpot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanRestartVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanRestartVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanRestartVehicle");

	Params::BrickPlayerController_CanRestartVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanScrapAllVehicles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanScrapAllVehicles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanScrapAllVehicles");

	Params::BrickPlayerController_CanScrapAllVehicles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanScrapVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickVehicle*                    InVehicle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPerson                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanScrapVehicle(class ABrickVehicle* InVehicle, bool bInPerson) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanScrapVehicle");

	Params::BrickPlayerController_CanScrapVehicle Parms{};

	Parms.InVehicle = InVehicle;
	Parms.bInPerson = bInPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanSpawnAnywhere
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanSpawnAnywhere() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanSpawnAnywhere");

	Params::BrickPlayerController_CanSpawnAnywhere Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanSpawnDummy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bAtAll                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanSpawnDummy(bool bAtAll) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanSpawnDummy");

	Params::BrickPlayerController_CanSpawnDummy Parms{};

	Parms.bAtAll = bAtAll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanSpawnVehicle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUGCFileInfo&              FileInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRemoveCurrent                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayerSpawnResult                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerSpawnResult ABrickPlayerController::CanSpawnVehicle(const struct FUGCFileInfo& FileInfo, bool bRemoveCurrent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanSpawnVehicle");

	Params::BrickPlayerController_CanSpawnVehicle Parms{};

	Parms.FileInfo = std::move(FileInfo);
	Parms.bRemoveCurrent = bRemoveCurrent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanSpectateCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   InCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanSpectateCharacter(class ABaseCharacter* InCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanSpectateCharacter");

	Params::BrickPlayerController_CanSpectateCharacter Parms{};

	Parms.InCharacter = InCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanTeleportPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanTeleportPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanTeleportPlayer");

	Params::BrickPlayerController_CanTeleportPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanToggleInvincible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanToggleInvincible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanToggleInvincible");

	Params::BrickPlayerController_CanToggleInvincible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanUseFreeCam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanUseFreeCam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanUseFreeCam");

	Params::BrickPlayerController_CanUseFreeCam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanUseSlowMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanUseSlowMotion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanUseSlowMotion");

	Params::BrickPlayerController_CanUseSlowMotion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.CanViewInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::CanViewInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "CanViewInventory");

	Params::BrickPlayerController_CanViewInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.FindFocusedHUDIconComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHUDIconComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHUDIconComponent* ABrickPlayerController::FindFocusedHUDIconComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "FindFocusedHUDIconComponent");

	Params::BrickPlayerController_FindFocusedHUDIconComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetAccessedInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryComponent* ABrickPlayerController::GetAccessedInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetAccessedInventory");

	Params::BrickPlayerController_GetAccessedInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetBrickEditor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickEditor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickEditor* ABrickPlayerController::GetBrickEditor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetBrickEditor");

	Params::BrickPlayerController_GetBrickEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetEditorEntryPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ABrickPlayerController::GetEditorEntryPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetEditorEntryPoint");

	Params::BrickPlayerController_GetEditorEntryPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetFreeCamMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFreeCamMode                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFreeCamMode ABrickPlayerController::GetFreeCamMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetFreeCamMode");

	Params::BrickPlayerController_GetFreeCamMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetPlayerCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABaseCharacter* ABrickPlayerController::GetPlayerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetPlayerCharacter");

	Params::BrickPlayerController_GetPlayerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetPlayerVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickVehicle*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickVehicle* ABrickPlayerController::GetPlayerVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetPlayerVehicle");

	Params::BrickPlayerController_GetPlayerVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetRespawnTimerRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABrickPlayerController::GetRespawnTimerRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetRespawnTimerRemaining");

	Params::BrickPlayerController_GetRespawnTimerRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetSpectatedCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABaseCharacter* ABrickPlayerController::GetSpectatedCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetSpectatedCharacter");

	Params::BrickPlayerController_GetSpectatedCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetViewedCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABaseCharacter*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABaseCharacter* ABrickPlayerController::GetViewedCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetViewedCharacter");

	Params::BrickPlayerController_GetViewedCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.GetViewedVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickVehicle*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickVehicle* ABrickPlayerController::GetViewedVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "GetViewedVehicle");

	Params::BrickPlayerController_GetViewedVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.IsAdminByDefault
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::IsAdminByDefault() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "IsAdminByDefault");

	Params::BrickPlayerController_IsAdminByDefault Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.IsFreeCamFixed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::IsFreeCamFixed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "IsFreeCamFixed");

	Params::BrickPlayerController_IsFreeCamFixed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.IsInEditor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUGCType                                InUGCType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::IsInEditor(EUGCType InUGCType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "IsInEditor");

	Params::BrickPlayerController_IsInEditor Parms{};

	Parms.InUGCType = InUGCType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.IsInFreeCam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::IsInFreeCam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "IsInFreeCam");

	Params::BrickPlayerController_IsInFreeCam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickPlayerController.IsInventoryOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABrickPlayerController::IsInventoryOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPlayerController", "IsInventoryOpen");

	Params::BrickPlayerController_IsInventoryOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Elevator.Interact_ElevatorDown
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AElevator::Interact_ElevatorDown(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "Interact_ElevatorDown");

	Params::Elevator_Interact_ElevatorDown Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Elevator.Interact_ElevatorUp
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AElevator::Interact_ElevatorUp(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "Interact_ElevatorUp");

	Params::Elevator_Interact_ElevatorUp Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Elevator.Interact_StopElevator
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AElevator::Interact_StopElevator(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "Interact_StopElevator");

	Params::Elevator_Interact_StopElevator Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Elevator.OnElevatorStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FElevatorState&            NewState                                               (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void AElevator::OnElevatorStateChanged(const struct FElevatorState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "OnElevatorStateChanged");

	Params::Elevator_OnElevatorStateChanged Parms{};

	Parms.NewState = std::move(NewState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.Elevator.OnRep_RepElevatorState
// (Final, Native, Private)

void AElevator::OnRep_RepElevatorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "OnRep_RepElevatorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Elevator.SetElevatorDirection
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const EElevatorDirection                Dir                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AElevator::SetElevatorDirection(const EElevatorDirection Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "SetElevatorDirection");

	Params::Elevator_SetElevatorDirection Parms{};

	Parms.Dir = Dir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Elevator.SetElevatorState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FElevatorState&            NewState                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AElevator::SetElevatorState(const struct FElevatorState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "SetElevatorState");

	Params::Elevator_SetElevatorState Parms{};

	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Elevator.GetInteractionLocation
// (Event, Protected, HasDefaults, BlueprintEvent, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AElevator::GetInteractionLocation(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Elevator", "GetInteractionLocation");

	Params::Elevator_GetInteractionLocation Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickProjectile.OnRep_SeekingTarget
// (Final, Native, Private)
// Parameters:
// class AActor*                           OldTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickProjectile::OnRep_SeekingTarget(class AActor* OldTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickProjectile", "OnRep_SeekingTarget");

	Params::BrickProjectile_OnRep_SeekingTarget Parms{};

	Parms.OldTarget = OldTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WindowManagerWidget.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWindowManagerWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWindowManagerWidget* UWindowManagerWidget::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowManagerWidget", "Get");

	Params::WindowManagerWidget_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.WindowManagerWidget.AddActiveWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMainWidgetBase*                  Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWindowManagerWidget::AddActiveWidget(class UMainWidgetBase* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindowManagerWidget", "AddActiveWidget");

	Params::WindowManagerWidget_AddActiveWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.WindowManagerWidget.OnIntroSequenceFinished
// (Final, Native, Public, BlueprintCallable)

void UWindowManagerWidget::OnIntroSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindowManagerWidget", "OnIntroSequenceFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WindowManagerWidget.SetMenuOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWindowManagerWidget::SetMenuOpen(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindowManagerWidget", "SetMenuOpen");

	Params::WindowManagerWidget_SetMenuOpen Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WindowManagerWidget.CanOpenOrCloseMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWindowManagerWidget::CanOpenOrCloseMenu(bool bOpen) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindowManagerWidget", "CanOpenOrCloseMenu");

	Params::WindowManagerWidget_CanOpenOrCloseMenu Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.WindowManagerWidget.IsMenuOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWindowManagerWidget::IsMenuOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindowManagerWidget", "IsMenuOpen");

	Params::WindowManagerWidget_IsMenuOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickScrollBox.SetSlotSpacingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUISpacingStyle                    NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickScrollBox::SetSlotSpacingStyle(EBrickUISpacingStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickScrollBox", "SetSlotSpacingStyle");

	Params::BrickScrollBox_SetSlotSpacingStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.OnTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::OnTextChanged(const class FText& NewText, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "OnTextChanged");

	Params::BrickSliderWidget_OnTextChanged Parms{};

	Parms.NewText = std::move(NewText);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetCustomTextFormat
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InFormat                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetCustomTextFormat(const class FText& InFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetCustomTextFormat");

	Params::BrickSliderWidget_SetCustomTextFormat Parms{};

	Parms.InFormat = std::move(InFormat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetGridSnapMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EBrickSliderGridSnapMode          NewMode                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetGridSnapMode(const EBrickSliderGridSnapMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetGridSnapMode");

	Params::BrickSliderWidget_SetGridSnapMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetIsMarquee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInMarquee                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetIsMarquee(bool bInMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetIsMarquee");

	Params::BrickSliderWidget_SetIsMarquee Parms{};

	Parms.bInMarquee = bInMarquee;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetIsReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInReadOnly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetIsReadOnly(bool bInReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetIsReadOnly");

	Params::BrickSliderWidget_SetIsReadOnly Parms{};

	Parms.bInReadOnly = bInReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetMaxFractionalDigits
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxDigits                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetMaxFractionalDigits(int32 InMaxDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetMaxFractionalDigits");

	Params::BrickSliderWidget_SetMaxFractionalDigits Parms{};

	Parms.InMaxDigits = InMaxDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetValue(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetValue");

	Params::BrickSliderWidget_SetValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetValueRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMaxValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetValueRange(float InMinValue, float InMaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetValueRange");

	Params::BrickSliderWidget_SetValueRange Parms{};

	Parms.InMinValue = InMinValue;
	Parms.InMaxValue = InMaxValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.SetValueType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENumericValueType                       InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::SetValueType(ENumericValueType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "SetValueType");

	Params::BrickSliderWidget_SetValueType Parms{};

	Parms.InType = InType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickSliderWidget.UpdateIsDragging
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bIsDragging                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::UpdateIsDragging(const bool bIsDragging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "UpdateIsDragging");

	Params::BrickSliderWidget_UpdateIsDragging Parms{};

	Parms.bIsDragging = bIsDragging;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickSliderWidget.UpdateSliderPosition
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSliderWidget::UpdateSliderPosition(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "UpdateSliderPosition");

	Params::BrickSliderWidget_UpdateSliderPosition Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickSliderWidget.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBrickSliderWidget::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickSliderWidget", "GetValue");

	Params::BrickSliderWidget_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.ColorToHex
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeAlpha                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBrickStatics::ColorToHex(const struct FLinearColor& Color, const bool bIncludeAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "ColorToHex");

	Params::BrickStatics_ColorToHex Parms{};

	Parms.Color = std::move(Color);
	Parms.bIncludeAlpha = bIncludeAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.CreateUniqueNetId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      OSSName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUniqueNetIdRepl                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUniqueNetIdRepl UBrickStatics::CreateUniqueNetId(const class FName& OSSName, const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "CreateUniqueNetId");

	Params::BrickStatics_CreateUniqueNetId Parms{};

	Parms.OSSName = OSSName;
	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.ExtinguishActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickStatics::ExtinguishActor(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "ExtinguishActor");

	Params::BrickStatics_ExtinguishActor Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.GetPlayerUniqueNetId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerController*          PC                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUniqueNetIdRepl                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUniqueNetIdRepl UBrickStatics::GetPlayerUniqueNetId(const class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "GetPlayerUniqueNetId");

	Params::BrickStatics_GetPlayerUniqueNetId Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.GetProjectVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBrickStatics::GetProjectVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "GetProjectVersion");

	Params::BrickStatics_GetProjectVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.GetScalableBrickConnectorSpacingAxis
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FScalableBrickConnectorSpacing&ConnectorSpacing                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const EFluAxisSigned                    Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EConnectorSpacing                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EConnectorSpacing UBrickStatics::GetScalableBrickConnectorSpacingAxis(const struct FScalableBrickConnectorSpacing& ConnectorSpacing, const EFluAxisSigned Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "GetScalableBrickConnectorSpacingAxis");

	Params::BrickStatics_GetScalableBrickConnectorSpacingAxis Parms{};

	Parms.ConnectorSpacing = std::move(ConnectorSpacing);
	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.HexToColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Hex                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBrickStatics::HexToColor(const class FString& Hex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "HexToColor");

	Params::BrickStatics_HexToColor Parms{};

	Parms.Hex = std::move(Hex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.IsModdedAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Asset                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickStatics::IsModdedAsset(const class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "IsModdedAsset");

	Params::BrickStatics_IsModdedAsset Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.SetActorOnFire
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class APawn*                            Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickStatics::SetActorOnFire(const struct FHitResult& Hit, class APawn* Instigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "SetActorOnFire");

	Params::BrickStatics_SetActorOnFire Parms{};

	Parms.Hit = std::move(Hit);
	Parms.Instigator = Instigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.SetScalableBrickConnectorSpacingAxis
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FScalableBrickConnectorSpacing&  ConnectorSpacing                                       (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const EFluAxisSigned                    Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EConnectorSpacing                 NewSpacing                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickStatics::SetScalableBrickConnectorSpacingAxis(struct FScalableBrickConnectorSpacing& ConnectorSpacing, const EFluAxisSigned Axis, const EConnectorSpacing NewSpacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "SetScalableBrickConnectorSpacingAxis");

	Params::BrickStatics_SetScalableBrickConnectorSpacingAxis Parms{};

	Parms.ConnectorSpacing = std::move(ConnectorSpacing);
	Parms.Axis = Axis;
	Parms.NewSpacing = NewSpacing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ConnectorSpacing = std::move(Parms.ConnectorSpacing);
}


// Function BrickRigs.BrickStatics.ShowPlayerProfileUI
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class APlayerController*          OwnPC                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUniqueNetIdRepl&          PlayerId                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickStatics::ShowPlayerProfileUI(const class APlayerController* OwnPC, const struct FUniqueNetIdRepl& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "ShowPlayerProfileUI");

	Params::BrickStatics_ShowPlayerProfileUI Parms{};

	Parms.OwnPC = OwnPC;
	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.SpawnExplosion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UExplosiveMaterial>   ExplosiveMaterial                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class APawn*                            Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UPrimitiveComponent*>&ComponentsToIgnore                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBrickStatics::SpawnExplosion(class UObject* WorldContextObject, TSubclassOf<class UExplosiveMaterial> ExplosiveMaterial, float Volume, const struct FVector& Location, const struct FRotator& Rotation, class APawn* Instigator, class AActor* DamageCauser, const TArray<class UPrimitiveComponent*>& ComponentsToIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "SpawnExplosion");

	Params::BrickStatics_SpawnExplosion Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ExplosiveMaterial = ExplosiveMaterial;
	Parms.Volume = Volume;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Instigator = Instigator;
	Parms.DamageCauser = DamageCauser;
	Parms.ComponentsToIgnore = std::move(ComponentsToIgnore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickStatics.SpreadFire
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   BoundsMin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoundsMax                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpreadDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpreadProbability                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickStatics::SpreadFire(class UObject* WorldContextObject, const struct FTransform& Transform, const struct FVector& BoundsMin, const struct FVector& BoundsMax, float SpreadDistance, float SpreadProbability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "SpreadFire");

	Params::BrickStatics_SpreadFire Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Transform = std::move(Transform);
	Parms.BoundsMin = std::move(BoundsMin);
	Parms.BoundsMax = std::move(BoundsMax);
	Parms.SpreadDistance = SpreadDistance;
	Parms.SpreadProbability = SpreadProbability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickStatics.UniqueNetIdToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUniqueNetIdRepl&          UniqueNetId                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBrickStatics::UniqueNetIdToString(const struct FUniqueNetIdRepl& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickStatics", "UniqueNetIdToString");

	Params::BrickStatics_UniqueNetIdToString Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTextBoxWidget.OnTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::OnTextChanged(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "OnTextChanged");

	Params::BrickTextBoxWidget_OnTextChanged Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetAllowMultiLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowMultiLine                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetAllowMultiLine(bool bInAllowMultiLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetAllowMultiLine");

	Params::BrickTextBoxWidget_SetAllowMultiLine Parms{};

	Parms.bInAllowMultiLine = bInAllowMultiLine;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetBrushStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIBrushStyle                      InBrushStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetBrushStyle(EBrickUIBrushStyle InBrushStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetBrushStyle");

	Params::BrickTextBoxWidget_SetBrushStyle Parms{};

	Parms.InBrushStyle = InBrushStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetColorStyle(EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetColorStyle");

	Params::BrickTextBoxWidget_SetColorStyle Parms{};

	Parms.InColorStyle = InColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetCustomFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewUseCustomFocus                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewFocused                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetCustomFocus(bool bNewUseCustomFocus, bool bNewFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetCustomFocus");

	Params::BrickTextBoxWidget_SetCustomFocus Parms{};

	Parms.bNewUseCustomFocus = bNewUseCustomFocus;
	Parms.bNewFocused = bNewFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetHintText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetHintText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetHintText");

	Params::BrickTextBoxWidget_SetHintText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetIsMarquee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewMarquee                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetIsMarquee(bool bNewMarquee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetIsMarquee");

	Params::BrickTextBoxWidget_SetIsMarquee Parms{};

	Parms.bNewMarquee = bNewMarquee;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetIsPassword
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsPassword                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetIsPassword(bool bNewIsPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetIsPassword");

	Params::BrickTextBoxWidget_SetIsPassword Parms{};

	Parms.bNewIsPassword = bNewIsPassword;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetIsReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewReadOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetIsReadOnly(bool bNewReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetIsReadOnly");

	Params::BrickTextBoxWidget_SetIsReadOnly Parms{};

	Parms.bNewReadOnly = bNewReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetJustification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            NewJustification                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetJustification(ETextJustify NewJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetJustification");

	Params::BrickTextBoxWidget_SetJustification Parms{};

	Parms.NewJustification = NewJustification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetMaxTextLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxLength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetMaxTextLength(int32 InMaxLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetMaxTextLength");

	Params::BrickTextBoxWidget_SetMaxTextLength Parms{};

	Parms.InMaxLength = InMaxLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetPaddingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIPaddingStyle                    InPaddingStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetPaddingStyle(EBrickUIPaddingStyle InPaddingStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetPaddingStyle");

	Params::BrickTextBoxWidget_SetPaddingStyle Parms{};

	Parms.InPaddingStyle = InPaddingStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetPasswordVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetPasswordVisible(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetPasswordVisible");

	Params::BrickTextBoxWidget_SetPasswordVisible Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bValidateText                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetText(const class FText& InText, bool bValidateText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetText");

	Params::BrickTextBoxWidget_SetText Parms{};

	Parms.InText = std::move(InText);
	Parms.bValidateText = bValidateText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.SetTextStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUITextStyle                       InTextStyle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::SetTextStyle(EBrickUITextStyle InTextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "SetTextStyle");

	Params::BrickTextBoxWidget_SetTextStyle Parms{};

	Parms.InTextStyle = InTextStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.StartTyping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelectAllText                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::StartTyping(bool bSelectAllText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "StartTyping");

	Params::BrickTextBoxWidget_StartTyping Parms{};

	Parms.bSelectAllText = bSelectAllText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.TogglePasswordVisible
// (Final, Native, Public, BlueprintCallable)

void UBrickTextBoxWidget::TogglePasswordVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "TogglePasswordVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickTextBoxWidget.UpdateIsPassword
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsPassword                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::UpdateIsPassword(bool bNewIsPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "UpdateIsPassword");

	Params::BrickTextBoxWidget_UpdateIsPassword Parms{};

	Parms.bNewIsPassword = bNewIsPassword;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickTextBoxWidget.UpdatePasswordVisible
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTextBoxWidget::UpdatePasswordVisible(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "UpdatePasswordVisible");

	Params::BrickTextBoxWidget_UpdatePasswordVisible Parms{};

	Parms.bNewVisible = bNewVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BrickTextBoxWidget.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBrickTextBoxWidget::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "GetText");

	Params::BrickTextBoxWidget_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTextBoxWidget.IsMarquee
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTextBoxWidget::IsMarquee() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "IsMarquee");

	Params::BrickTextBoxWidget_IsMarquee Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTextBoxWidget.IsPasswordVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTextBoxWidget::IsPasswordVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "IsPasswordVisible");

	Params::BrickTextBoxWidget_IsPasswordVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTextBoxWidget.IsReadOnly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTextBoxWidget::IsReadOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "IsReadOnly");

	Params::BrickTextBoxWidget_IsReadOnly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickTextBoxWidget.IsTyping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTextBoxWidget::IsTyping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTextBoxWidget", "IsTyping");

	Params::BrickTextBoxWidget_IsTyping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.FormatRichTextStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickUITextStyle                       Style                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBrickUIStyle::FormatRichTextStyle(EBrickUITextStyle Style, const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "FormatRichTextStyle");

	Params::BrickUIStyle_FormatRichTextStyle Parms{};

	Parms.Style = Style;
	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetTeamAttitudeColorStyle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ETeamAttitude                           TeamAttitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUIColorStyle UBrickUIStyle::GetTeamAttitudeColorStyle(ETeamAttitude TeamAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "GetTeamAttitudeColorStyle");

	Params::BrickUIStyle_GetTeamAttitudeColorStyle Parms{};

	Parms.TeamAttitude = TeamAttitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetTeamAttitudeTextStyle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ETeamAttitude                           TeamAttitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUITextStyle                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUITextStyle UBrickUIStyle::GetTeamAttitudeTextStyle(ETeamAttitude TeamAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "GetTeamAttitudeTextStyle");

	Params::BrickUIStyle_GetTeamAttitudeTextStyle Parms{};

	Parms.TeamAttitude = TeamAttitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetUIStyle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class UBrickUIStyle* Style)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UBrickUIStyle::GetUIStyle(TDelegate<void(const class UBrickUIStyle* Style)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "GetUIStyle");

	Params::BrickUIStyle_GetUIStyle Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.InvertTeamAttitudeColorStyle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickUIColorStyle                      ColorStyle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUIColorStyle UBrickUIStyle::InvertTeamAttitudeColorStyle(EBrickUIColorStyle ColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "InvertTeamAttitudeColorStyle");

	Params::BrickUIStyle_InvertTeamAttitudeColorStyle Parms{};

	Parms.ColorStyle = ColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.SwitchButtonStyleState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickUIStyleState                      StyleState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUIStyleState UBrickUIStyle::SwitchButtonStyleState(EBrickUIStyleState StyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "SwitchButtonStyleState");

	Params::BrickUIStyle_SwitchButtonStyleState Parms{};

	Parms.StyleState = StyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.UnbindUIStyle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickUIStyle::UnbindUIStyle(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUIStyle", "UnbindUIStyle");

	Params::BrickUIStyle_UnbindUIStyle Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.BuildStyle
// (Event, Protected, BlueprintEvent)

void UBrickUIStyle::BuildStyle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "BuildStyle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.BrickUIStyle.SetBrush
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// EBrickUIBrushStyle                      BrushStyle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      StyleState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateBrush&               InBrush                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickUIStyle::SetBrush(EBrickUIBrushStyle BrushStyle, EBrickUIStyleState StyleState, const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "SetBrush");

	Params::BrickUIStyle_SetBrush Parms{};

	Parms.BrushStyle = BrushStyle;
	Parms.StyleState = StyleState;
	Parms.InBrush = std::move(InBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.SetColor
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      ColorStyle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      StyleState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InColor                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickUIStyle::SetColor(EBrickUIColorStyle ColorStyle, EBrickUIStyleState StyleState, const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "SetColor");

	Params::BrickUIStyle_SetColor Parms{};

	Parms.ColorStyle = ColorStyle;
	Parms.StyleState = StyleState;
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.SetIconAtlas
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBrickUIIconAtlas                       InIconAtlas                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickUIIconAtlas&         InAtlas                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBrickUIStyle::SetIconAtlas(EBrickUIIconAtlas InIconAtlas, const struct FBrickUIIconAtlas& InAtlas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "SetIconAtlas");

	Params::BrickUIStyle_SetIconAtlas Parms{};

	Parms.InIconAtlas = InIconAtlas;
	Parms.InAtlas = std::move(InAtlas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.SetPaddingStyle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBrickUIPaddingStyle                    PaddingStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMargin&                   InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBrickUIStyle::SetPaddingStyle(EBrickUIPaddingStyle PaddingStyle, const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "SetPaddingStyle");

	Params::BrickUIStyle_SetPaddingStyle Parms{};

	Parms.PaddingStyle = PaddingStyle;
	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.SetSpacingStyle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBrickUISpacingStyle                    SpacingStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSpacing                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickUIStyle::SetSpacingStyle(EBrickUISpacingStyle SpacingStyle, float InSpacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "SetSpacingStyle");

	Params::BrickUIStyle_SetSpacingStyle Parms{};

	Parms.SpacingStyle = SpacingStyle;
	Parms.InSpacing = InSpacing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.SetTextStyle
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// EBrickUITextStyle                       TextStyle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTextBlockStyle&           InTextStyle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickUIStyle::SetTextStyle(EBrickUITextStyle TextStyle, const struct FTextBlockStyle& InTextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "SetTextStyle");

	Params::BrickUIStyle_SetTextStyle Parms{};

	Parms.TextStyle = TextStyle;
	Parms.InTextStyle = std::move(InTextStyle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUIStyle.GetBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUIBrushStyle                      BrushStyle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      StyleState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateBrush&               Fallback                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UBrickUIStyle::GetBrush(EBrickUIBrushStyle BrushStyle, EBrickUIStyleState StyleState, const struct FSlateBrush& Fallback) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "GetBrush");

	Params::BrickUIStyle_GetBrush Parms{};

	Parms.BrushStyle = BrushStyle;
	Parms.StyleState = StyleState;
	Parms.Fallback = std::move(Fallback);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUIColorStyle                      ColorStyle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      StyleState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Fallback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FLinearColor UBrickUIStyle::GetColor(EBrickUIColorStyle ColorStyle, EBrickUIStyleState StyleState, const struct FLinearColor& Fallback) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "GetColor");

	Params::BrickUIStyle_GetColor Parms{};

	Parms.ColorStyle = ColorStyle;
	Parms.StyleState = StyleState;
	Parms.Fallback = std::move(Fallback);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUIPaddingStyle                    PaddingStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMargin&                   Fallback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UBrickUIStyle::GetPadding(EBrickUIPaddingStyle PaddingStyle, const struct FMargin& Fallback) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "GetPadding");

	Params::BrickUIStyle_GetPadding Parms{};

	Parms.PaddingStyle = PaddingStyle;
	Parms.Fallback = std::move(Fallback);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetSpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUISpacingStyle                    SpacingStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Fallback                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBrickUIStyle::GetSpacing(EBrickUISpacingStyle SpacingStyle, float Fallback) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "GetSpacing");

	Params::BrickUIStyle_GetSpacing Parms{};

	Parms.SpacingStyle = SpacingStyle;
	Parms.Fallback = Fallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUIStyle.GetTextStyle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUITextStyle                       TextStyle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTextBlockStyle&           Fallback                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FTextBlockStyle            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FTextBlockStyle UBrickUIStyle::GetTextStyle(EBrickUITextStyle TextStyle, const struct FTextBlockStyle& Fallback) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUIStyle", "GetTextStyle");

	Params::BrickUIStyle_GetTextStyle Parms{};

	Parms.TextStyle = TextStyle;
	Parms.Fallback = std::move(Fallback);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUserSettings.GetUserSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBrickUserSettings*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickUserSettings* UBrickUserSettings::GetUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickUserSettings", "GetUserSettings");

	Params::BrickUserSettings_GetUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUserSettings.CycleBrickUnitsDisplayMode
// (Final, Native, Public, BlueprintCallable)

void UBrickUserSettings::CycleBrickUnitsDisplayMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserSettings", "CycleBrickUnitsDisplayMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUserSettings.SetBrickUnitsDisplayMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EBrickUnitsDisplayMode&           NewMode                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickUserSettings::SetBrickUnitsDisplayMode(const EBrickUnitsDisplayMode& NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserSettings", "SetBrickUnitsDisplayMode");

	Params::BrickUserSettings_SetBrickUnitsDisplayMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUserSettings.SetColorDisplayMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EColorDisplayMode                 NewMode                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickUserSettings::SetColorDisplayMode(const EColorDisplayMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserSettings", "SetColorDisplayMode");

	Params::BrickUserSettings_SetColorDisplayMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickUserSettings.GetBrickUnitsDisplayMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickUnitsDisplayMode                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickUnitsDisplayMode UBrickUserSettings::GetBrickUnitsDisplayMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserSettings", "GetBrickUnitsDisplayMode");

	Params::BrickUserSettings_GetBrickUnitsDisplayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickUserSettings.GetColorDisplayMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EColorDisplayMode                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EColorDisplayMode UBrickUserSettings::GetColorDisplayMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickUserSettings", "GetColorDisplayMode");

	Params::BrickUserSettings_GetColorDisplayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickVerticalBox.SetSlotSpacingStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUISpacingStyle                    NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickVerticalBox::SetSlotSpacingStyle(EBrickUISpacingStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickVerticalBox", "SetSlotSpacingStyle");

	Params::BrickVerticalBox_SetSlotSpacingStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickWorldSettings.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickWorldSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickWorldSettings* ABrickWorldSettings::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickWorldSettings", "Get");

	Params::BrickWorldSettings_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.BrickWorldSettings.AddHeatSeekingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickWorldSettings::AddHeatSeekingTarget(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickWorldSettings", "AddHeatSeekingTarget");

	Params::BrickWorldSettings_AddHeatSeekingTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BrickWorldSettings.RemoveHeatSeekingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABrickWorldSettings::RemoveHeatSeekingTarget(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickWorldSettings", "RemoveHeatSeekingTarget");

	Params::BrickWorldSettings_RemoveHeatSeekingTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnHeldCycleExplosives
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnHeldCycleExplosives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnHeldCycleExplosives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnHeldCycleSlots
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnHeldCycleSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnHeldCycleSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnHeldKill
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnHeldKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnHeldKill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedAim
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedAim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedCycleExplosives
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedCycleExplosives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedCycleExplosives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedCycleFireMode
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedCycleFireMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedCycleFireMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedCycleSlots
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedCycleSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedCycleSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedFire
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedKill
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedKill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedPrimarySlot
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedPrimarySlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedPrimarySlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedReload
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedSecondarySlot
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedSecondarySlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedSecondarySlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedSpecialSlot
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedSpecialSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedSpecialSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedThrowItem
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedThrowItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedThrowItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnPressedUnequipItem
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnPressedUnequipItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnPressedUnequipItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnReleasedAim
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnReleasedAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnReleasedAim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnReleasedCycleExplosives
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnReleasedCycleExplosives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnReleasedCycleExplosives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnReleasedCycleSlots
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnReleasedCycleSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnReleasedCycleSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnReleasedFire
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnReleasedFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnReleasedFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnReleasedKill
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnReleasedKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnReleasedKill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnTappedCycleExplosives
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnTappedCycleExplosives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnTappedCycleExplosives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnTappedCycleSlots
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnTappedCycleSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnTappedCycleSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerPawnInputComponent.OnTappedKill
// (Final, Native, Protected)

void UPlayerPawnInputComponent::OnTappedKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerPawnInputComponent", "OnTappedKill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnPressedCrouch
// (Final, Native, Private)

void UCharacterInputComponent::OnPressedCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnPressedCrouch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnPressedJump
// (Final, Native, Private)

void UCharacterInputComponent::OnPressedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnPressedJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnPressedSprint
// (Final, Native, Private)

void UCharacterInputComponent::OnPressedSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnPressedSprint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnReleasedCrouch
// (Final, Native, Private)

void UCharacterInputComponent::OnReleasedCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnReleasedCrouch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnReleasedJump
// (Final, Native, Private)

void UCharacterInputComponent::OnReleasedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnReleasedJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnReleasedSprint
// (Final, Native, Private)

void UCharacterInputComponent::OnReleasedSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnReleasedSprint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.OnToggleCrouch
// (Final, Native, Private)

void UCharacterInputComponent::OnToggleCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "OnToggleCrouch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.WalkForward
// (Final, Native, Private)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterInputComponent::WalkForward(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "WalkForward");

	Params::CharacterInputComponent_WalkForward Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CharacterInputComponent.WalkRight
// (Final, Native, Private)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterInputComponent::WalkRight(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInputComponent", "WalkRight");

	Params::CharacterInputComponent_WalkRight Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WorldSetupActor.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AWorldSetupActor*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AWorldSetupActor* AWorldSetupActor::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WorldSetupActor", "Get");

	Params::WorldSetupActor_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ChatMessageInputComponent.OnPressedKickPlayer
// (Final, Native, Private)

void UChatMessageInputComponent::OnPressedKickPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageInputComponent", "OnPressedKickPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ChatMessageInputComponent.OnPressedViewVehicle
// (Final, Native, Private)

void UChatMessageInputComponent::OnPressedViewVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageInputComponent", "OnPressedViewVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ChatMessageInputComponent.GetKickPlayerEnabled
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChatMessageInputComponent::GetKickPlayerEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageInputComponent", "GetKickPlayerEnabled");

	Params::ChatMessageInputComponent_GetKickPlayerEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ChatMessageWidget.OpenContextMenu
// (Final, Native, Public, BlueprintCallable)

void UChatMessageWidget::OpenContextMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageWidget", "OpenContextMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ChatMessageWidget.UpdateColorStyle
// (Event, Public, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatMessageWidget::UpdateColorStyle(EBrickUIColorStyle NewColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageWidget", "UpdateColorStyle");

	Params::ChatMessageWidget_UpdateColorStyle Parms{};

	Parms.NewColorStyle = NewColorStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ChatMessageWidget.UpdateMessageText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChatMessageWidget::UpdateMessageText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageWidget", "UpdateMessageText");

	Params::ChatMessageWidget_UpdateMessageText Parms{};

	Parms.NewText = std::move(NewText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ColorPropertyWidget.SetColorPropertyValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EValueChangedEventType            EventType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UColorPropertyWidget::SetColorPropertyValue(const struct FColor& Color, const EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ColorPropertyWidget", "SetColorPropertyValue");

	Params::ColorPropertyWidget_SetColorPropertyValue Parms{};

	Parms.Color = std::move(Color);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ColorPropertyWidget.UpdateColorPropertyValue
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FColor&                    NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bValueChanged                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UColorPropertyWidget::UpdateColorPropertyValue(const struct FColor& NewColor, const bool bValueChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ColorPropertyWidget", "UpdateColorPropertyValue");

	Params::ColorPropertyWidget_UpdateColorPropertyValue Parms{};

	Parms.NewColor = std::move(NewColor);
	Parms.bValueChanged = bValueChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ColorPropertyWidget.HasAlphaChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UColorPropertyWidget::HasAlphaChannel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ColorPropertyWidget", "HasAlphaChannel");

	Params::ColorPropertyWidget_HasAlphaChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ColorWheelWidget.SetColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UColorWheelWidget::SetColor(const struct FLinearColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ColorWheelWidget", "SetColor");

	Params::ColorWheelWidget_SetColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.OnInputMethodChanged
// (Final, Native, Private)
// Parameters:
// EInputMethod                            NewInputMethod                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::OnInputMethodChanged(EInputMethod NewInputMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "OnInputMethodChanged");

	Params::ControlHintWidget_OnInputMethodChanged Parms{};

	Parms.NewInputMethod = NewInputMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InActionName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputActionTriggerType                 InTriggerType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetAction(class FName InActionName, EInputActionTriggerType InTriggerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetAction");

	Params::ControlHintWidget_SetAction Parms{};

	Parms.InActionName = InActionName;
	Parms.InTriggerType = InTriggerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetColorStyle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetColorStyle");

	Params::ControlHintWidget_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetDisplayInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FDisplayInfo&              InDisplayInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UControlHintWidget::SetDisplayInfo(const struct FDisplayInfo& InDisplayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetDisplayInfo");

	Params::ControlHintWidget_SetDisplayInfo Parms{};

	Parms.InDisplayInfo = std::move(InDisplayInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetDisplayInfoMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControlHintDisplayInfoMode             NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetDisplayInfoMode(EControlHintDisplayInfoMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetDisplayInfoMode");

	Params::ControlHintWidget_SetDisplayInfoMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetInputChordScale
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetInputChordScale(float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetInputChordScale");

	Params::ControlHintWidget_SetInputChordScale Parms{};

	Parms.InScale = InScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetShowInputChord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetShowInputChord(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetShowInputChord");

	Params::ControlHintWidget_SetShowInputChord Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetShowUnboundKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetShowUnboundKey(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetShowUnboundKey");

	Params::ControlHintWidget_SetShowUnboundKey Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetStyleState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetStyleState");

	Params::ControlHintWidget_SetStyleState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.SetTextStyle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrickUITextStyle                       NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::SetTextStyle(EBrickUITextStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "SetTextStyle");

	Params::ControlHintWidget_SetTextStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.UpdateDisplayInfo
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FDisplayInfo&              NewDisplayInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateDisplayInfo(const struct FDisplayInfo& NewDisplayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateDisplayInfo");

	Params::ControlHintWidget_UpdateDisplayInfo Parms{};

	Parms.NewDisplayInfo = std::move(NewDisplayInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.UpdateHoldProgress
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   InHoldProgress                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateHoldProgress(float InHoldProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateHoldProgress");

	Params::ControlHintWidget_UpdateHoldProgress Parms{};

	Parms.InHoldProgress = InHoldProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ControlHintWidget.UpdateIconVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateIconVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateIconVisibility");

	Params::ControlHintWidget_UpdateIconVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.UpdateInputChordStyleState
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EBrickUIStyleState                      InStyleState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsHoldAction                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateInputChordStyleState(EBrickUIStyleState InStyleState, bool bInIsHoldAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateInputChordStyleState");

	Params::ControlHintWidget_UpdateInputChordStyleState Parms{};

	Parms.InStyleState = InStyleState;
	Parms.bInIsHoldAction = bInIsHoldAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.UpdateInputChordVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateInputChordVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateInputChordVisibility");

	Params::ControlHintWidget_UpdateInputChordVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ControlHintWidget.UpdateIsHoldAction
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsHoldAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateIsHoldAction(bool bIsHoldAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateIsHoldAction");

	Params::ControlHintWidget_UpdateIsHoldAction Parms{};

	Parms.bIsHoldAction = bIsHoldAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ControlHintWidget.UpdateTextVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UControlHintWidget::UpdateTextVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ControlHintWidget", "UpdateTextVisibility");

	Params::ControlHintWidget_UpdateTextVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CrosshairWidget.OnHUDVisibilityChanged
// (Final, Native, Private)
// Parameters:
// EHUDVisibility                          NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrosshairWidget::OnHUDVisibilityChanged(EHUDVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrosshairWidget", "OnHUDVisibilityChanged");

	Params::CrosshairWidget_OnHUDVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.CrosshairWidget.PlayHitAnimation
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FClientDamageInfo&         DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCrosshairWidget::PlayHitAnimation(const struct FClientDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrosshairWidget", "PlayHitAnimation");

	Params::CrosshairWidget_PlayHitAnimation Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.CrosshairWidget.UpdateIsAttachingWinch
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewAttaching                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrosshairWidget::UpdateIsAttachingWinch(bool bNewAttaching)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrosshairWidget", "UpdateIsAttachingWinch");

	Params::CrosshairWidget_UpdateIsAttachingWinch Parms{};

	Parms.bNewAttaching = bNewAttaching;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.CrosshairWidget.UpdateWinchAttachment
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bBlockingHit                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithinRange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrosshairWidget::UpdateWinchAttachment(bool bBlockingHit, bool bWithinRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrosshairWidget", "UpdateWinchAttachment");

	Params::CrosshairWidget_UpdateWinchAttachment Parms{};

	Parms.bBlockingHit = bBlockingHit;
	Parms.bWithinRange = bWithinRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.DashboardIconWidget.UpdateIconImage
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InIconIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDashboardIconWidget::UpdateIconImage(bool bInVisible, EBrickUIColorStyle InColorStyle, int32 InIconIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DashboardIconWidget", "UpdateIconImage");

	Params::DashboardIconWidget_UpdateIconImage Parms{};

	Parms.bInVisible = bInVisible;
	Parms.InColorStyle = InColorStyle;
	Parms.InIconIndex = InIconIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.DashboardWidget.AddIconWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDashboardIconWidget*             Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDashboardWidget::AddIconWidget(class UDashboardIconWidget* Widget, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DashboardWidget", "AddIconWidget");

	Params::DashboardWidget_AddIconWidget Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.DashboardWidget.AddSliderWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDashboardSliderWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDashboardWidget::AddSliderWidget(class UDashboardSliderWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DashboardWidget", "AddSliderWidget");

	Params::DashboardWidget_AddSliderWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.DashboardWidget.UpdateSliderWidgetSlot
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDashboardSliderWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSliders                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDashboardWidget::UpdateSliderWidgetSlot(class UDashboardSliderWidget* Widget, int32 Index_0, int32 NumSliders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DashboardWidget", "UpdateSliderWidgetSlot");

	Params::DashboardWidget_UpdateSliderWidgetSlot Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;
	Parms.NumSliders = NumSliders;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.VehicleInputComponent.Brake
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleInputComponent::Brake(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "Brake");

	Params::VehicleInputComponent_Brake Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnHeldCycleCamera
// (Final, Native, Protected)

void UVehicleInputComponent::OnHeldCycleCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnHeldCycleCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnHeldCycleFireActionMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnHeldCycleFireActionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnHeldCycleFireActionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnHeldCycleSeats
// (Final, Native, Protected)

void UVehicleInputComponent::OnHeldCycleSeats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnHeldCycleSeats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnHeldCycleSiren
// (Final, Native, Protected)

void UVehicleInputComponent::OnHeldCycleSiren()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnHeldCycleSiren");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnHeldPinVehicle
// (Final, Native, Protected)

void UVehicleInputComponent::OnHeldPinVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnHeldPinVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnHeldToggleSteering
// (Final, Native, Protected)

void UVehicleInputComponent::OnHeldToggleSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnHeldToggleSteering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction1
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction2
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction3
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction4
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction4");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction5
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction5");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction6
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction6");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction7
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction7()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction7");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedAction8
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedAction8()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedAction8");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedBeacon
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedBeacon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedBeacon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedCaptureVehicleThumbnail
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedCaptureVehicleThumbnail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedCaptureVehicleThumbnail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedCycleCamera
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedCycleCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedCycleCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedCycleCameraMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedCycleCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedCycleCameraMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedCycleFireActionMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedCycleFireActionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedCycleFireActionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedCycleSeats
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedCycleSeats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedCycleSeats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedCycleSiren
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedCycleSiren()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedCycleSiren");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedExitVehicle
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedExitVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedExitVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedHandBrake
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedHandBrake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedHandBrake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedHeadlight
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedHeadlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedHeadlight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedHorn
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedHorn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedHorn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedOperationMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedOperationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedOperationMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedPinVehicle
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedPinVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedPinVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedShiftDown
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedShiftDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedShiftDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedShiftUp
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedShiftUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedShiftUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedToggleSteering
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedToggleSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedToggleSteering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnPressedWarningLight
// (Final, Native, Protected)

void UVehicleInputComponent::OnPressedWarningLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnPressedWarningLight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction1
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction2
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction3
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction4
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction4");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction5
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction5");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction6
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction6");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction7
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction7()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction7");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedAction8
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedAction8()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedAction8");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedCycleCamera
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedCycleCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedCycleCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedCycleFireActionMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedCycleFireActionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedCycleFireActionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedCycleSeats
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedCycleSeats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedCycleSeats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedCycleSiren
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedCycleSiren()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedCycleSiren");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedHandBrake
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedHandBrake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedHandBrake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedHorn
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedHorn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedHorn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedOperationMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedOperationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedOperationMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedPinVehicle
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedPinVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedPinVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnReleasedToggleSteering
// (Final, Native, Protected)

void UVehicleInputComponent::OnReleasedToggleSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnReleasedToggleSteering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnTappedCycleCamera
// (Final, Native, Protected)

void UVehicleInputComponent::OnTappedCycleCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnTappedCycleCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnTappedCycleFireActionMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnTappedCycleFireActionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnTappedCycleFireActionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnTappedCycleSeats
// (Final, Native, Protected)

void UVehicleInputComponent::OnTappedCycleSeats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnTappedCycleSeats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnTappedCycleSiren
// (Final, Native, Protected)

void UVehicleInputComponent::OnTappedCycleSiren()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnTappedCycleSiren");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnTappedPinVehicle
// (Final, Native, Protected)

void UVehicleInputComponent::OnTappedPinVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnTappedPinVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnTappedToggleSteering
// (Final, Native, Protected)

void UVehicleInputComponent::OnTappedToggleSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnTappedToggleSteering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.OnToggleOperationMode
// (Final, Native, Protected)

void UVehicleInputComponent::OnToggleOperationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "OnToggleOperationMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.Pitch
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleInputComponent::Pitch(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "Pitch");

	Params::VehicleInputComponent_Pitch Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.Steering
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleInputComponent::Steering(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "Steering");

	Params::VehicleInputComponent_Steering Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.Throttle
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleInputComponent::Throttle(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "Throttle");

	Params::VehicleInputComponent_Throttle Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.ViewPitch
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleInputComponent::ViewPitch(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "ViewPitch");

	Params::VehicleInputComponent_ViewPitch Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.ViewYaw
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleInputComponent::ViewYaw(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "ViewYaw");

	Params::VehicleInputComponent_ViewYaw Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleInputComponent.GetCycleCameraModeValueText
// (Final, Native, Protected, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVehicleInputComponent::GetCycleCameraModeValueText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleInputComponent", "GetCycleCameraModeValueText");

	Params::VehicleInputComponent_GetCycleCameraModeValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.DriverInputComponent.OnPressedCycleTransmissionMode
// (Final, Native, Private)

void UDriverInputComponent::OnPressedCycleTransmissionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DriverInputComponent", "OnPressedCycleTransmissionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.DriverInputComponent.OnPressedToggleAutoCounterSteering
// (Final, Native, Private)

void UDriverInputComponent::OnPressedToggleAutoCounterSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DriverInputComponent", "OnPressedToggleAutoCounterSteering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.DriverInputComponent.GetCycleTransmissionModeValueText
// (Final, Native, Private, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UDriverInputComponent::GetCycleTransmissionModeValueText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DriverInputComponent", "GetCycleTransmissionModeValueText");

	Params::DriverInputComponent_GetCycleTransmissionModeValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.DriverInputComponent.GetToggleAutoCounterSteeringValueText
// (Final, Native, Private, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UDriverInputComponent::GetToggleAutoCounterSteeringValueText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DriverInputComponent", "GetToggleAutoCounterSteeringValueText");

	Params::DriverInputComponent_GetToggleAutoCounterSteeringValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.EditorInputComponent.MoveForward
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorInputComponent::MoveForward(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorInputComponent", "MoveForward");

	Params::EditorInputComponent_MoveForward Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.EditorInputComponent.MoveRight
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorInputComponent::MoveRight(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorInputComponent", "MoveRight");

	Params::EditorInputComponent_MoveRight Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.EditorInputComponent.MoveUp
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEditorInputComponent::MoveUp(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorInputComponent", "MoveUp");

	Params::EditorInputComponent_MoveUp Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.EnumPropertyWidget.InitializeItem
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickComboBoxItemParams*        OutParams                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UEnumPropertyWidget::InitializeItem(int32 Item, struct FBrickComboBoxItemParams* OutParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EnumPropertyWidget", "InitializeItem");

	Params::EnumPropertyWidget_InitializeItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParams != nullptr)
		*OutParams = std::move(Parms.OutParams);
}


// Function BrickRigs.EnumPropertyWidget.OnItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEnumPropertyWidget::OnItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EnumPropertyWidget", "OnItemSelected");

	Params::EnumPropertyWidget_OnItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FadingPanelWidget.FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFadingPanelWidget::FadeIn(bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "FadeIn");

	Params::FadingPanelWidget_FadeIn Parms{};

	Parms.bImmediate = bImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FadingPanelWidget.FadeInTimer
// (Final, Native, Public, BlueprintCallable)

void UFadingPanelWidget::FadeInTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "FadeInTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FadingPanelWidget.FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFadingPanelWidget::FadeOut(bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "FadeOut");

	Params::FadingPanelWidget_FadeOut Parms{};

	Parms.bImmediate = bImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FadingPanelWidget.FadeOutTimer
// (Final, Native, Public, BlueprintCallable)

void UFadingPanelWidget::FadeOutTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "FadeOutTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FadingPanelWidget.UpdateFadeAnimation
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   FadeAmount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFadingPanelWidget::UpdateFadeAnimation(float FadeAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "UpdateFadeAnimation");

	Params::FadingPanelWidget_UpdateFadeAnimation Parms{};

	Parms.FadeAmount = FadeAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FadingPanelWidget.IsFadedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFadingPanelWidget::IsFadedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "IsFadedIn");

	Params::FadingPanelWidget_IsFadedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FadingPanelWidget.IsFadingIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFadingPanelWidget::IsFadingIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "IsFadingIn");

	Params::FadingPanelWidget_IsFadingIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FadingPanelWidget.IsFadingOut
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFadingPanelWidget::IsFadingOut() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadingPanelWidget", "IsFadingOut");

	Params::FadingPanelWidget_IsFadingOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.CockIfNeeded
// (Final, Native, Public, BlueprintCallable)

void AFirearm::CockIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "CockIfNeeded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.EjectShell
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bFromManualReload                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFirearm::EjectShell(bool bFromManualReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "EjectShell");

	Params::Firearm_EjectShell Parms{};

	Parms.bFromManualReload = bFromManualReload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.ReloadIfNeeded
// (Final, Native, Public, BlueprintCallable)

void AFirearm::ReloadIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "ReloadIfNeeded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.ResetFirearm
// (Final, Native, Public, BlueprintCallable)

void AFirearm::ResetFirearm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "ResetFirearm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.ServerOnReleasedBolt
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void AFirearm::ServerOnReleasedBolt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "ServerOnReleasedBolt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.ServerOnReloaded
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void AFirearm::ServerOnReloaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "ServerOnReloaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.SetFireMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFireMode                               NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFirearm::SetFireMode(EFireMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "SetFireMode");

	Params::Firearm_SetFireMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Firearm.CanCock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::CanCock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "CanCock");

	Params::Firearm_CanCock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.CanReload
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::CanReload() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "CanReload");

	Params::Firearm_CanReload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetBarrel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABarrelAttachment*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABarrelAttachment* AFirearm::GetBarrel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetBarrel");

	Params::Firearm_GetBarrel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetChamberState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EChamberState                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChamberState AFirearm::GetChamberState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetChamberState");

	Params::Firearm_GetChamberState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetFireMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFireMode                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFireMode AFirearm::GetFireMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetFireMode");

	Params::Firearm_GetFireMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetMagazine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFirearm::GetMagazine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetMagazine");

	Params::Firearm_GetMagazine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetMagazineCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFirearm::GetMagazineCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetMagazineCapacity");

	Params::Firearm_GetMagazineCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetNumFireModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFirearm::GetNumFireModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetNumFireModes");

	Params::Firearm_GetNumFireModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.GetSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASightAttachment*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASightAttachment* AFirearm::GetSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "GetSight");

	Params::Firearm_GetSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.HasFireMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFireMode                               NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::HasFireMode(EFireMode NewMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "HasFireMode");

	Params::Firearm_HasFireMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.HasMagazine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::HasMagazine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "HasMagazine");

	Params::Firearm_HasMagazine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.HasToCock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::HasToCock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "HasToCock");

	Params::Firearm_HasToCock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.HasToReload
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::HasToReload() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "HasToReload");

	Params::Firearm_HasToReload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.Firearm.IsFiring
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFirearm::IsFiring() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Firearm", "IsFiring");

	Params::Firearm_IsFiring Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PingIndicatorWidget.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "SetColorStyle");

	Params::PingIndicatorWidget_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PingIndicatorWidget.SetMinDisplayPing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPing                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::SetMinDisplayPing(int32 InPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "SetMinDisplayPing");

	Params::PingIndicatorWidget_SetMinDisplayPing Parms{};

	Parms.InPing = InPing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PingIndicatorWidget.SetPing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPing                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::SetPing(int32 InPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "SetPing");

	Params::PingIndicatorWidget_SetPing Parms{};

	Parms.InPing = InPing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PingIndicatorWidget.SetPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABrickPlayerState*                InPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::SetPlayerState(class ABrickPlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "SetPlayerState");

	Params::PingIndicatorWidget_SetPlayerState Parms{};

	Parms.InPlayerState = InPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PingIndicatorWidget.SetStyleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "SetStyleState");

	Params::PingIndicatorWidget_SetStyleState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PingIndicatorWidget.SetTextStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUITextStyle                       NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::SetTextStyle(EBrickUITextStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "SetTextStyle");

	Params::PingIndicatorWidget_SetTextStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PingIndicatorWidget.UpdatePing
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   InPing                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPingIndicatorWidget::UpdatePing(int32 InPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingIndicatorWidget", "UpdatePing");

	Params::PingIndicatorWidget_UpdatePing Parms{};

	Parms.InPing = InPing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FirearmComponent.OnRep_FirearmState
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FFirearmState&             PrevState                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFirearmComponent::OnRep_FirearmState(const struct FFirearmState& PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirearmComponent", "OnRep_FirearmState");

	Params::FirearmComponent_OnRep_FirearmState Parms{};

	Parms.PrevState = std::move(PrevState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupContainerWidget.AddPopupWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UPopupWidget*                     Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupContainerWidget::AddPopupWidget(class UPopupWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "AddPopupWidget");

	Params::PopupContainerWidget_AddPopupWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PopupContainerWidget.CancelPopup
// (Final, Native, Protected, BlueprintCallable)

void UPopupContainerWidget::CancelPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "CancelPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupContainerWidget.ConfirmPopup
// (Final, Native, Protected, BlueprintCallable)

void UPopupContainerWidget::ConfirmPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "ConfirmPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupContainerWidget.CreateCancelButton
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMenuButtonWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuButtonWidget* UPopupContainerWidget::CreateCancelButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "CreateCancelButton");

	Params::PopupContainerWidget_CreateCancelButton Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupContainerWidget.CreateConfirmButton
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMenuButtonWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuButtonWidget* UPopupContainerWidget::CreateConfirmButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "CreateConfirmButton");

	Params::PopupContainerWidget_CreateConfirmButton Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.PopupContainerWidget.SetButtonPanelVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupContainerWidget::SetButtonPanelVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "SetButtonPanelVisibility");

	Params::PopupContainerWidget_SetButtonPanelVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupContainerWidget.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupContainerWidget::SetColorStyle(EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "SetColorStyle");

	Params::PopupContainerWidget_SetColorStyle Parms{};

	Parms.InColorStyle = InColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PopupContainerWidget.UpdateButtonPanelVisibility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupContainerWidget::UpdateButtonPanelVisibility(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "UpdateButtonPanelVisibility");

	Params::PopupContainerWidget_UpdateButtonPanelVisibility Parms{};

	Parms.bNewVisible = bNewVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PopupContainerWidget.UpdateColorStyle
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupContainerWidget::UpdateColorStyle(EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "UpdateColorStyle");

	Params::PopupContainerWidget_UpdateColorStyle Parms{};

	Parms.InColorStyle = InColorStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PopupContainerWidget.UpdateContentSlot
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bShowContent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPopupSizeRule                          SizeRule                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPopupContainerWidget::UpdateContentSlot(bool bShowContent, EPopupSizeRule SizeRule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "UpdateContentSlot");

	Params::PopupContainerWidget_UpdateContentSlot Parms{};

	Parms.bShowContent = bShowContent;
	Parms.SizeRule = SizeRule;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PopupContainerWidget.UpdateTitleText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewTitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPopupContainerWidget::UpdateTitleText(const class FText& NewTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupContainerWidget", "UpdateTitleText");

	Params::PopupContainerWidget_UpdateTitleText Parms{};

	Parms.NewTitle = std::move(NewTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlacableObjectWidget.OnButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UPlacableObjectWidget::OnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlacableObjectWidget", "OnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlacableObjectWidget.OpenContextMenu
// (Final, Native, Public, BlueprintCallable)

void UPlacableObjectWidget::OpenContextMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlacableObjectWidget", "OpenContextMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlacableObjectWidget.UpdateIsFilterWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsFilter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlacableObjectWidget::UpdateIsFilterWidget(bool bNewIsFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlacableObjectWidget", "UpdateIsFilterWidget");

	Params::PlacableObjectWidget_UpdateIsFilterWidget Parms{};

	Parms.bNewIsFilter = bNewIsFilter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayersMenuWidget.KickPlayer
// (Final, Native, Public, BlueprintCallable)

void UPlayersMenuWidget::KickPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayersMenuWidget", "KickPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayersMenuWidget.ShowPlayerProfile
// (Final, Native, Public, BlueprintCallable)

void UPlayersMenuWidget::ShowPlayerProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayersMenuWidget", "ShowPlayerProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayersMenuWidget.UpdateCanKickPlayer
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanKick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayersMenuWidget::UpdateCanKickPlayer(bool bCanKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayersMenuWidget", "UpdateCanKickPlayer");

	Params::PlayersMenuWidget_UpdateCanKickPlayer Parms{};

	Parms.bCanKick = bCanKick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayersMenuWidget.UpdateCanShowPlayerProfile
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanShow                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayersMenuWidget::UpdateCanShowPlayerProfile(bool bCanShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayersMenuWidget", "UpdateCanShowPlayerProfile");

	Params::PlayersMenuWidget_UpdateCanShowPlayerProfile Parms{};

	Parms.bCanShow = bCanShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyContainerInputComponent.OnPressedCopyValue
// (Final, Native, Private)

void UPropertyContainerInputComponent::OnPressedCopyValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "OnPressedCopyValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyContainerInputComponent.OnPressedPasteValue
// (Final, Native, Private)

void UPropertyContainerInputComponent::OnPressedPasteValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "OnPressedPasteValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyContainerInputComponent.OnPressedPickValue
// (Final, Native, Private)

void UPropertyContainerInputComponent::OnPressedPickValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "OnPressedPickValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyContainerInputComponent.OnPressedSelectByValue
// (Final, Native, Private)

void UPropertyContainerInputComponent::OnPressedSelectByValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "OnPressedSelectByValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyContainerInputComponent.GetCopyValueEnabled
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPropertyContainerInputComponent::GetCopyValueEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "GetCopyValueEnabled");

	Params::PropertyContainerInputComponent_GetCopyValueEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyContainerInputComponent.GetPasteValueEnabled
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPropertyContainerInputComponent::GetPasteValueEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "GetPasteValueEnabled");

	Params::PropertyContainerInputComponent_GetPasteValueEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyContainerInputComponent.GetPickValueEnabled
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPropertyContainerInputComponent::GetPickValueEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "GetPickValueEnabled");

	Params::PropertyContainerInputComponent_GetPickValueEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyContainerInputComponent.GetSelectByValueEnabled
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPropertyContainerInputComponent::GetSelectByValueEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerInputComponent", "GetSelectByValueEnabled");

	Params::PropertyContainerInputComponent_GetSelectByValueEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FlashSequenceItemWidget.UpdateIsLit
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewLit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFlashSequenceItemWidget::UpdateIsLit(bool bNewLit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlashSequenceItemWidget", "UpdateIsLit");

	Params::FlashSequenceItemWidget_UpdateIsLit Parms{};

	Parms.bNewLit = bNewLit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerIconWidget.UpdatePlayerIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsLocalPlayer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewIsTeamLeader                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterStateOfHealth                 NewStateOfHealth                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewCanBeDamaged                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerIconWidget::UpdatePlayerIcon(bool bNewIsLocalPlayer, bool bNewIsTeamLeader, ECharacterStateOfHealth NewStateOfHealth, bool bNewCanBeDamaged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerIconWidget", "UpdatePlayerIcon");

	Params::PlayerIconWidget_UpdatePlayerIcon Parms{};

	Parms.bNewIsLocalPlayer = bNewIsLocalPlayer;
	Parms.bNewIsTeamLeader = bNewIsTeamLeader;
	Parms.NewStateOfHealth = NewStateOfHealth;
	Parms.bNewCanBeDamaged = bNewCanBeDamaged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertiesPanelWidget.AddCategoryWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UPropertyCategoryWidget*          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropertiesPanelWidget::AddCategoryWidget(class UPropertyCategoryWidget* Widget, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertiesPanelWidget", "AddCategoryWidget");

	Params::PropertiesPanelWidget_AddCategoryWidget Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertiesPanelWidget.AddProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           InContainers                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBrickPropertyReflectionFilter&InFilter                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPropertiesPanelWidget::AddProperties(const TArray<class UObject*>& InContainers, const struct FBrickPropertyReflectionFilter& InFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertiesPanelWidget", "AddProperties");

	Params::PropertiesPanelWidget_AddProperties Parms{};

	Parms.InContainers = std::move(InContainers);
	Parms.InFilter = std::move(InFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertiesPanelWidget.ClearProperties
// (Final, Native, Public, BlueprintCallable)

void UPropertiesPanelWidget::ClearProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertiesPanelWidget", "ClearProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertiesPanelWidget.UpdateProperties
// (Final, Native, Public, BlueprintCallable)

void UPropertiesPanelWidget::UpdateProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertiesPanelWidget", "UpdateProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.FluMathStatics.AxisToIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EAxis                             Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFluMathStatics::AxisToIndex(const EAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "AxisToIndex");

	Params::FluMathStatics_AxisToIndex Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.BitmaskHasFlag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             BitMask                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFluMathStatics::BitmaskHasFlag(const int32 BitMask, const uint8 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "BitmaskHasFlag");

	Params::FluMathStatics_BitmaskHasFlag Parms{};

	Parms.BitMask = BitMask;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.BitmaskSetFlag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             BitMask                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFlag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFluMathStatics::BitmaskSetFlag(const int32 BitMask, const uint8 Index_0, const bool bFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "BitmaskSetFlag");

	Params::FluMathStatics_BitmaskSetFlag Parms{};

	Parms.BitMask = BitMask;
	Parms.Index_0 = Index_0;
	Parms.bFlag = bFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.IndexToAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAxis                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAxis UFluMathStatics::IndexToAxis(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "IndexToAxis");

	Params::FluMathStatics_IndexToAxis Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.IntegrateEllipseArcLength
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Radius                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AngleRad                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Steps                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFluMathStatics::IntegrateEllipseArcLength(const struct FVector2D& Radius, const float AngleRad, const int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "IntegrateEllipseArcLength");

	Params::FluMathStatics_IntegrateEllipseArcLength Parms{};

	Parms.Radius = std::move(Radius);
	Parms.AngleRad = AngleRad;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.IsAxisSignedPositive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EFluAxisSigned                    Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFluMathStatics::IsAxisSignedPositive(const EFluAxisSigned Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "IsAxisSignedPositive");

	Params::FluMathStatics_IsAxisSignedPositive Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.MakeAxisSigned
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EAxis                             Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bPositiveAxis                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluAxisSigned                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFluAxisSigned UFluMathStatics::MakeAxisSigned(const EAxis Axis, const bool bPositiveAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "MakeAxisSigned");

	Params::FluMathStatics_MakeAxisSigned Parms{};

	Parms.Axis = Axis;
	Parms.bPositiveAxis = bPositiveAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.MakeBitmask
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const uint8                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFluMathStatics::MakeBitmask(const uint8 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "MakeBitmask");

	Params::FluMathStatics_MakeBitmask Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.QuatToNiceRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     Quat                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UFluMathStatics::QuatToNiceRotator(const struct FQuat& Quat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "QuatToNiceRotator");

	Params::FluMathStatics_QuatToNiceRotator Parms{};

	Parms.Quat = std::move(Quat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.RemapAxisLockAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EFluAxisLock                      AxisLock                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAxis                             Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAxis                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAxis UFluMathStatics::RemapAxisLockAxis(const EFluAxisLock AxisLock, const EAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "RemapAxisLockAxis");

	Params::FluMathStatics_RemapAxisLockAxis Parms{};

	Parms.AxisLock = AxisLock;
	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.RemapAxisLockIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EFluAxisLock                      AxisLock                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AxisIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFluMathStatics::RemapAxisLockIndex(const EFluAxisLock AxisLock, const int32 AxisIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "RemapAxisLockIndex");

	Params::FluMathStatics_RemapAxisLockIndex Parms{};

	Parms.AxisLock = AxisLock;
	Parms.AxisIndex = AxisIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.RotateVector2D90
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NumFlips                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UFluMathStatics::RotateVector2D90(const struct FVector2D& Vector, const int32 NumFlips)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "RotateVector2D90");

	Params::FluMathStatics_RotateVector2D90 Parms{};

	Parms.Vector = std::move(Vector);
	Parms.NumFlips = NumFlips;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.SplitAxisSigned
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const EFluAxisSigned                    Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAxis*                                  OutAxis                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutPositiveAxis                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluMathStatics::SplitAxisSigned(const EFluAxisSigned Axis, EAxis* OutAxis, bool* bOutPositiveAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "SplitAxisSigned");

	Params::FluMathStatics_SplitAxisSigned Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAxis != nullptr)
		*OutAxis = Parms.OutAxis;

	if (bOutPositiveAxis != nullptr)
		*bOutPositiveAxis = Parms.bOutPositiveAxis;
}


// Function BrickRigs.FluMathStatics.Vector2DAngle2Deg
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFluMathStatics::Vector2DAngle2Deg(const struct FVector2D& A, const struct FVector2D& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "Vector2DAngle2Deg");

	Params::FluMathStatics_Vector2DAngle2Deg Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.Vector2DAngle2Rad
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFluMathStatics::Vector2DAngle2Rad(const struct FVector2D& A, const struct FVector2D& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "Vector2DAngle2Rad");

	Params::FluMathStatics_Vector2DAngle2Rad Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.Vector2DAngleDeg
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFluMathStatics::Vector2DAngleDeg(const struct FVector2D& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "Vector2DAngleDeg");

	Params::FluMathStatics_Vector2DAngleDeg Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.Vector2DAngleRad
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFluMathStatics::Vector2DAngleRad(const struct FVector2D& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "Vector2DAngleRad");

	Params::FluMathStatics_Vector2DAngleRad Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.FluMathStatics.WrapIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Num                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFluMathStatics::WrapIndex(const int32 Index_0, const int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluMathStatics", "WrapIndex");

	Params::FluMathStatics_WrapIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyListInterface.AddPropertyContainerWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UPropertyContainerWidget*         Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPropertyListInterface::AddPropertyContainerWidget(class UPropertyContainerWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PropertyListInterface", "AddPropertyContainerWidget");

	Params::PropertyListInterface_AddPropertyContainerWidget Parms{};

	Parms.Widget = Widget;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyListInterface.UpdatePropertyContainerWidgetSlot
// (Event, Public, BlueprintEvent)
// Parameters:
// class UPropertyContainerWidget*         Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumPerRow                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPropertyListInterface::UpdatePropertyContainerWidgetSlot(class UPropertyContainerWidget* Widget, int32 Index_0, int32 NumPerRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PropertyListInterface", "UpdatePropertyContainerWidgetSlot");

	Params::PropertyListInterface_UpdatePropertyContainerWidgetSlot Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;
	Parms.NumPerRow = NumPerRow;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameOverlayWidget*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameOverlayWidget* UGameOverlayWidget::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameOverlayWidget", "Get");

	Params::GameOverlayWidget_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.GameOverlayWidget.AddChatWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UChatWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::AddChatWidget(class UChatWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "AddChatWidget");

	Params::GameOverlayWidget_AddChatWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.AddHUDNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::AddHUDNotification(class UHUDNotificationWidget* Widget, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "AddHUDNotification");

	Params::GameOverlayWidget_AddHUDNotification Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.AddInputHelpWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UInputHelpWidget*                 Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::AddInputHelpWidget(class UInputHelpWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "AddInputHelpWidget");

	Params::GameOverlayWidget_AddInputHelpWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.AddMatchStateWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMatchStateWidget*                Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::AddMatchStateWidget(class UMatchStateWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "AddMatchStateWidget");

	Params::GameOverlayWidget_AddMatchStateWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.AddMatchTimerWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMatchTimerWidget*                Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::AddMatchTimerWidget(class UMatchTimerWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "AddMatchTimerWidget");

	Params::GameOverlayWidget_AddMatchTimerWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.AddTeamScoreWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTeamScoreWidget*                 Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           TeamAttitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::AddTeamScoreWidget(class UTeamScoreWidget* Widget, ETeamAttitude TeamAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "AddTeamScoreWidget");

	Params::GameOverlayWidget_AddTeamScoreWidget Parms{};

	Parms.Widget = Widget;
	Parms.TeamAttitude = TeamAttitude;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.CreateHUDNotification
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Context                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldFadeOut                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHUDNotificationWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHUDNotificationWidget* UGameOverlayWidget::CreateHUDNotification(const class FName& Context, bool bShouldFadeOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "CreateHUDNotification");

	Params::GameOverlayWidget_CreateHUDNotification Parms{};

	Parms.Context = Context;
	Parms.bShouldFadeOut = bShouldFadeOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.GameOverlayWidget.OnCameraModeChanged
// (Final, Native, Private)
// Parameters:
// ECameraMode                             NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::OnCameraModeChanged(ECameraMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "OnCameraModeChanged");

	Params::GameOverlayWidget_OnCameraModeChanged Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.GameOverlayWidget.OnHUDVisibilityChanged
// (Final, Native, Private)
// Parameters:
// EHUDVisibility                          NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::OnHUDVisibilityChanged(EHUDVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "OnHUDVisibilityChanged");

	Params::GameOverlayWidget_OnHUDVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.GameOverlayWidget.ToggleInputHelpOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUpdateFocus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameOverlayWidget::ToggleInputHelpOpen(bool bUpdateFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "ToggleInputHelpOpen");

	Params::GameOverlayWidget_ToggleInputHelpOpen Parms{};

	Parms.bUpdateFocus = bUpdateFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.GameOverlayWidget.UpdateCameraModeNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraMode                             NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateCameraModeNotification(class UHUDNotificationWidget* Widget, ECameraMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateCameraModeNotification");

	Params::GameOverlayWidget_UpdateCameraModeNotification Parms{};

	Parms.Widget = Widget;
	Parms.NewMode = NewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateCameraSpeedNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewSpeedRatio                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewMaxSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateCameraSpeedNotification(class UHUDNotificationWidget* Widget, float NewSpeedRatio, float NewMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateCameraSpeedNotification");

	Params::GameOverlayWidget_UpdateCameraSpeedNotification Parms{};

	Parms.Widget = Widget;
	Parms.NewSpeedRatio = NewSpeedRatio;
	Parms.NewMaxSpeed = NewMaxSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateCameraZoomNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewZoomRatio                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateCameraZoomNotification(class UHUDNotificationWidget* Widget, float NewZoomRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateCameraZoomNotification");

	Params::GameOverlayWidget_UpdateCameraZoomNotification Parms{};

	Parms.Widget = Widget;
	Parms.NewZoomRatio = NewZoomRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateFreeCamNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInFreeCam                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFreeCamMode                            InFreeCamMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFixedCam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateFreeCamNotification(class UHUDNotificationWidget* Widget, bool bIsInFreeCam, EFreeCamMode InFreeCamMode, bool bIsFixedCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateFreeCamNotification");

	Params::GameOverlayWidget_UpdateFreeCamNotification Parms{};

	Parms.Widget = Widget;
	Parms.bIsInFreeCam = bIsInFreeCam;
	Parms.InFreeCamMode = InFreeCamMode;
	Parms.bIsFixedCam = bIsFixedCam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateHUDVisibilityNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHUDVisibility                          NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateHUDVisibilityNotification(class UHUDNotificationWidget* Widget, EHUDVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateHUDVisibilityNotification");

	Params::GameOverlayWidget_UpdateHUDVisibilityNotification Parms{};

	Parms.Widget = Widget;
	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateMoneyNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAmount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AmountAdded                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateMoneyNotification(class UHUDNotificationWidget* Widget, float NewAmount, float AmountAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateMoneyNotification");

	Params::GameOverlayWidget_UpdateMoneyNotification Parms{};

	Parms.Widget = Widget;
	Parms.NewAmount = NewAmount;
	Parms.AmountAdded = AmountAdded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateProjectileCameraNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateProjectileCameraNotification(class UHUDNotificationWidget* Widget, bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateProjectileCameraNotification");

	Params::GameOverlayWidget_UpdateProjectileCameraNotification Parms{};

	Parms.Widget = Widget;
	Parms.bNewEnabled = bNewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateRespawnDelayNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Remaining                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateRespawnDelayNotification(class UHUDNotificationWidget* Widget, float Remaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateRespawnDelayNotification");

	Params::GameOverlayWidget_UpdateRespawnDelayNotification Parms{};

	Parms.Widget = Widget;
	Parms.Remaining = Remaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateRestartFailedNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateRestartFailedNotification(class UHUDNotificationWidget* Widget, const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateRestartFailedNotification");

	Params::GameOverlayWidget_UpdateRestartFailedNotification Parms{};

	Parms.Widget = Widget;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateSaveNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAutoSave                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateSaveNotification(class UHUDNotificationWidget* Widget, bool bSuccess, bool bIsAutoSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateSaveNotification");

	Params::GameOverlayWidget_UpdateSaveNotification Parms{};

	Parms.Widget = Widget;
	Parms.bSuccess = bSuccess;
	Parms.bIsAutoSave = bIsAutoSave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateSlomoNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlomoSpeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInvertSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSlomoEnabled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateSlomoNotification(class UHUDNotificationWidget* Widget, float SlomoSpeed, bool bInvertSpeed, bool bSlomoEnabled, bool bIsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateSlomoNotification");

	Params::GameOverlayWidget_UpdateSlomoNotification Parms{};

	Parms.Widget = Widget;
	Parms.SlomoSpeed = SlomoSpeed;
	Parms.bInvertSpeed = bInvertSpeed;
	Parms.bSlomoEnabled = bSlomoEnabled;
	Parms.bIsPaused = bIsPaused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateThumbnailNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateThumbnailNotification(class UHUDNotificationWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateThumbnailNotification");

	Params::GameOverlayWidget_UpdateThumbnailNotification Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateVehicleCameraNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      CameraDisplayName                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateVehicleCameraNotification(class UHUDNotificationWidget* Widget, const class FText& CameraDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateVehicleCameraNotification");

	Params::GameOverlayWidget_UpdateVehicleCameraNotification Parms{};

	Parms.Widget = Widget;
	Parms.CameraDisplayName = std::move(CameraDisplayName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateVehicleConstructionNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      VehicleDisplayName                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateVehicleConstructionNotification(class UHUDNotificationWidget* Widget, const class FText& VehicleDisplayName, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateVehicleConstructionNotification");

	Params::GameOverlayWidget_UpdateVehicleConstructionNotification Parms{};

	Parms.Widget = Widget;
	Parms.VehicleDisplayName = std::move(VehicleDisplayName);
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateVehicleDownloadNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      VehicleDisplayName                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateVehicleDownloadNotification(class UHUDNotificationWidget* Widget, const class FText& VehicleDisplayName, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateVehicleDownloadNotification");

	Params::GameOverlayWidget_UpdateVehicleDownloadNotification Parms{};

	Parms.Widget = Widget;
	Parms.VehicleDisplayName = std::move(VehicleDisplayName);
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.GameOverlayWidget.UpdateVehicleSeatNotification
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UHUDNotificationWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      SeatDisplayName                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGameOverlayWidget::UpdateVehicleSeatNotification(class UHUDNotificationWidget* Widget, const class FText& SeatDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameOverlayWidget", "UpdateVehicleSeatNotification");

	Params::GameOverlayWidget_UpdateVehicleSeatNotification Parms{};

	Parms.Widget = Widget;
	Parms.SeatDisplayName = std::move(SeatDisplayName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.Garage.Interact_EnterEditor
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGarage::Interact_EnterEditor(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Garage", "Interact_EnterEditor");

	Params::Garage_Interact_EnterEditor Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Garage.Interact_Inventory
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGarage::Interact_Inventory(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Garage", "Interact_Inventory");

	Params::Garage_Interact_Inventory Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.Garage.Interact_SpawnVehicle
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGarage::Interact_SpawnVehicle(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Garage", "Interact_SpawnVehicle");

	Params::Garage_Interact_SpawnVehicle Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.GenericPropertyWidget.OnTextChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericPropertyWidget::OnTextChanged(const class FText& Text, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericPropertyWidget", "OnTextChanged");

	Params::GenericPropertyWidget_OnTextChanged Parms{};

	Parms.Text = std::move(Text);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ReuploadPopupWidget.ViewOriginalAuthorInBrowser
// (Final, Native, Public, BlueprintCallable)

void UReuploadPopupWidget::ViewOriginalAuthorInBrowser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReuploadPopupWidget", "ViewOriginalAuthorInBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ReuploadPopupWidget.ViewOriginalItemInBrowser
// (Final, Native, Public, BlueprintCallable)

void UReuploadPopupWidget::ViewOriginalItemInBrowser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReuploadPopupWidget", "ViewOriginalItemInBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ReuploadPopupWidget.GetOriginalAuthorName
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText*                            OutName                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UReuploadPopupWidget::GetOriginalAuthorName(class FText* OutName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReuploadPopupWidget", "GetOriginalAuthorName");

	Params::ReuploadPopupWidget_GetOriginalAuthorName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutName != nullptr)
		*OutName = std::move(Parms.OutName);

	return Parms.ReturnValue;
}


// Function BrickRigs.RestrictedAreaWidget.OnFadedOut
// (Final, Native, Public, BlueprintCallable)

void URestrictedAreaWidget::OnFadedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestrictedAreaWidget", "OnFadedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RestrictedAreaWidget.PlayFadeInAnim
// (Event, Protected, BlueprintEvent)

void URestrictedAreaWidget::PlayFadeInAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestrictedAreaWidget", "PlayFadeInAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.RestrictedAreaWidget.PlayFadeOutAnim
// (Event, Protected, BlueprintEvent)

void URestrictedAreaWidget::PlayFadeOutAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestrictedAreaWidget", "PlayFadeOutAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.RestrictedAreaWidget.UpdateTimerRemaining
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   TimeRemaining                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URestrictedAreaWidget::UpdateTimerRemaining(float TimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestrictedAreaWidget", "UpdateTimerRemaining");

	Params::RestrictedAreaWidget_UpdateTimerRemaining Parms{};

	Parms.TimeRemaining = TimeRemaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HealthBarWidget.OnHUDVisibilityChanged
// (Final, Native, Private)
// Parameters:
// EHUDVisibility                          NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHealthBarWidget::OnHUDVisibilityChanged(EHUDVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HealthBarWidget", "OnHUDVisibilityChanged");

	Params::HealthBarWidget_OnHUDVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HealthBarWidget.UpdateCanBeDamaged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewCanBeDamaged                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHealthBarWidget::UpdateCanBeDamaged(bool bNewCanBeDamaged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HealthBarWidget", "UpdateCanBeDamaged");

	Params::HealthBarWidget_UpdateCanBeDamaged Parms{};

	Parms.bNewCanBeDamaged = bNewCanBeDamaged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HealthBarWidget.UpdateHealingState
// (Event, Public, BlueprintEvent)
// Parameters:
// ECharacterHealingState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHealthBarWidget::UpdateHealingState(ECharacterHealingState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HealthBarWidget", "UpdateHealingState");

	Params::HealthBarWidget_UpdateHealingState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HealthBarWidget.UpdateHealth
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewHealth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHealthBarWidget::UpdateHealth(float NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HealthBarWidget", "UpdateHealth");

	Params::HealthBarWidget_UpdateHealth Parms{};

	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MenuSettingsPageWidget.AddProperties
// (Native, Event, Protected, BlueprintEvent)

void UMenuSettingsPageWidget::AddProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuSettingsPageWidget", "AddProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ScoreboardPlayerWidget.OnButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UScoreboardPlayerWidget::OnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardPlayerWidget", "OnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ScoreboardPlayerWidget.UpdateButtonStyle
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLocalPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           TeamAttitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreboardPlayerWidget::UpdateButtonStyle(bool bNewSelected, bool bIsLocalPlayer, ETeamAttitude TeamAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardPlayerWidget", "UpdateButtonStyle");

	Params::ScoreboardPlayerWidget_UpdateButtonStyle Parms{};

	Parms.bNewSelected = bNewSelected;
	Parms.bIsLocalPlayer = bIsLocalPlayer;
	Parms.TeamAttitude = TeamAttitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ScoreboardPlayerWidget.UpdateIsAdmin
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsAdmin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreboardPlayerWidget::UpdateIsAdmin(bool bIsAdmin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardPlayerWidget", "UpdateIsAdmin");

	Params::ScoreboardPlayerWidget_UpdateIsAdmin Parms{};

	Parms.bIsAdmin = bIsAdmin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ScoreboardPlayerWidget.UpdateIsAlive
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsAlive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreboardPlayerWidget::UpdateIsAlive(bool bIsAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardPlayerWidget", "UpdateIsAlive");

	Params::ScoreboardPlayerWidget_UpdateIsAlive Parms{};

	Parms.bIsAlive = bIsAlive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HostGamePageWidget.StartGame
// (Final, Native, Public, BlueprintCallable)

void UHostGamePageWidget::StartGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HostGamePageWidget", "StartGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HostGamePageWidget.UpdatePlayButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanPlay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOnline                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHostGamePageWidget::UpdatePlayButton(bool bCanPlay, bool bIsOnline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HostGamePageWidget", "UpdatePlayButton");

	Params::HostGamePageWidget_UpdatePlayButton Parms{};

	Parms.bCanPlay = bCanPlay;
	Parms.bIsOnline = bIsOnline;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDIconComponent.MakeAxisInteractionOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText&                      DisplayText                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class ABrickPlayerController* InPC, float Val)>OnInteractionAxis                                      (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// struct FInteractionOption               ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FInteractionOption UHUDIconComponent::MakeAxisInteractionOption(const class FText& DisplayText, bool bIsEnabled, TDelegate<void(class ABrickPlayerController* InPC, float Val)> OnInteractionAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HUDIconComponent", "MakeAxisInteractionOption");

	Params::HUDIconComponent_MakeAxisInteractionOption Parms{};

	Parms.DisplayText = std::move(DisplayText);
	Parms.bIsEnabled = bIsEnabled;
	Parms.OnInteractionAxis = OnInteractionAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.HUDIconComponent.MakeInteractionOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText&                      DisplayText                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class ABrickPlayerController* InPC)>OnInteraction                                          (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// struct FInteractionOption               ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FInteractionOption UHUDIconComponent::MakeInteractionOption(const class FText& DisplayText, bool bIsEnabled, TDelegate<void(class ABrickPlayerController* InPC)> OnInteraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HUDIconComponent", "MakeInteractionOption");

	Params::HUDIconComponent_MakeInteractionOption Parms{};

	Parms.DisplayText = std::move(DisplayText);
	Parms.bIsEnabled = bIsEnabled;
	Parms.OnInteraction = OnInteraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.HUDIconComponent.Interact_PlaceMarker
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconComponent::Interact_PlaceMarker(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "Interact_PlaceMarker");

	Params::HUDIconComponent_Interact_PlaceMarker Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconComponent.Interact_Spawn
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconComponent::Interact_Spawn(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "Interact_Spawn");

	Params::HUDIconComponent_Interact_Spawn Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconComponent.SetGetInteractionOptionsDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(class ABrickPlayerController* PC, struct FInteractionOptions* OutOptions)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UHUDIconComponent::SetGetInteractionOptionsDelegate(TDelegate<void(class ABrickPlayerController* PC, struct FInteractionOptions* OutOptions)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "SetGetInteractionOptionsDelegate");

	Params::HUDIconComponent_SetGetInteractionOptionsDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconComponent.SetGetMaxDrawDistDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(class ABrickPlayerController* PC)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UHUDIconComponent::SetGetMaxDrawDistDelegate(TDelegate<void(class ABrickPlayerController* PC)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "SetGetMaxDrawDistDelegate");

	Params::HUDIconComponent_SetGetMaxDrawDistDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconComponent.SetIconLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconComponent::SetIconLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "SetIconLocation");

	Params::HUDIconComponent_SetIconLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconComponent.SetIconLocationDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UHUDIconComponent::SetIconLocationDelegate(TDelegate<void()> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "SetIconLocationDelegate");

	Params::HUDIconComponent_SetIconLocationDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconComponent.SetShouldIconBeVisibleDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(class ABrickPlayerController* PC, const struct FHUDIconContext& Context)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UHUDIconComponent::SetShouldIconBeVisibleDelegate(TDelegate<void(class ABrickPlayerController* PC, const struct FHUDIconContext& Context)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconComponent", "SetShouldIconBeVisibleDelegate");

	Params::HUDIconComponent_SetShouldIconBeVisibleDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconContainerWidget.AddCrosshairWidgets
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class UMapCrosshairWidget*>&Widgets                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHUDIconContainerWidget::AddCrosshairWidgets(const TArray<class UMapCrosshairWidget*>& Widgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "AddCrosshairWidgets");

	Params::HUDIconContainerWidget_AddCrosshairWidgets Parms{};

	Parms.Widgets = std::move(Widgets);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDIconContainerWidget.AddIconWidget
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UHUDIconWidget*                   Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconContainerWidget::AddIconWidget(class UHUDIconWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "AddIconWidget");

	Params::HUDIconContainerWidget_AddIconWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconContainerWidget.AddInteractionWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UInteractionWidget*               Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconContainerWidget::AddInteractionWidget(class UInteractionWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "AddInteractionWidget");

	Params::HUDIconContainerWidget_AddInteractionWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDIconContainerWidget.OnSpawnButtonClicked
// (Final, Native, Private)

void UHUDIconContainerWidget::OnSpawnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "OnSpawnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconContainerWidget.OnSpawnButtonDoubleClicked
// (Final, Native, Private)

void UHUDIconContainerWidget::OnSpawnButtonDoubleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "OnSpawnButtonDoubleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconContainerWidget.OnUpdateButtonContentStyle
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      InContentStyleState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconContainerWidget::OnUpdateButtonContentStyle(EBrickUIColorStyle InColorStyle, EBrickUIStyleState InContentStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "OnUpdateButtonContentStyle");

	Params::HUDIconContainerWidget_OnUpdateButtonContentStyle Parms{};

	Parms.InColorStyle = InColorStyle;
	Parms.InContentStyleState = InContentStyleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDIconContainerWidget.UpdateContainerStyle
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewCanSpawn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDIconContainerWidget::UpdateContainerStyle(bool bNewSelected, bool bNewCanSpawn, EBrickUIColorStyle NewColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDIconContainerWidget", "UpdateContainerStyle");

	Params::HUDIconContainerWidget_UpdateContainerStyle Parms{};

	Parms.bNewSelected = bNewSelected;
	Parms.bNewCanSpawn = bNewCanSpawn;
	Parms.NewColorStyle = NewColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDNotificationWidget.InitializeNotification
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBrickUIIconSlot&          InIconSlot                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDNotificationWidget::InitializeNotification(const struct FBrickUIIconSlot& InIconSlot, const class FText& InText, EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDNotificationWidget", "InitializeNotification");

	Params::HUDNotificationWidget_InitializeNotification Parms{};

	Parms.InIconSlot = std::move(InIconSlot);
	Parms.InText = std::move(InText);
	Parms.InColorStyle = InColorStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDNotificationWidget.OnFadedOut
// (Final, Native, Protected, BlueprintCallable)

void UHUDNotificationWidget::OnFadedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDNotificationWidget", "OnFadedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.HUDNotificationWidget.PlayFadeInAnim
// (Event, Protected, BlueprintEvent)

void UHUDNotificationWidget::PlayFadeInAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDNotificationWidget", "PlayFadeInAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.HUDNotificationWidget.PlayFadeOutAnim
// (Event, Protected, BlueprintEvent)

void UHUDNotificationWidget::PlayFadeOutAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDNotificationWidget", "PlayFadeOutAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.HUDNotificationWidget.UpdateIsThumbnailNotification
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsThumbnail                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDNotificationWidget::UpdateIsThumbnailNotification(bool bNewIsThumbnail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDNotificationWidget", "UpdateIsThumbnailNotification");

	Params::HUDNotificationWidget_UpdateIsThumbnailNotification Parms{};

	Parms.bNewIsThumbnail = bNewIsThumbnail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.HUDWidgetInterface.AddGameOverlayWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UGameOverlayWidget*               Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IHUDWidgetInterface::AddGameOverlayWidget(class UGameOverlayWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HUDWidgetInterface", "AddGameOverlayWidget");

	Params::HUDWidgetInterface_AddGameOverlayWidget Parms{};

	Parms.Widget = Widget;

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.HurtMarkerWidget.PlayHurtMarkerAnimation
// (Event, Protected, BlueprintEvent)

void UHurtMarkerWidget::PlayHurtMarkerAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HurtMarkerWidget", "PlayHurtMarkerAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.ScoreboardTeamWidget.JoinTeam
// (Final, Native, Public, BlueprintCallable)

void UScoreboardTeamWidget::JoinTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardTeamWidget", "JoinTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ScoreboardTeamWidget.UpdateCanEverJoinTeam
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanJoin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreboardTeamWidget::UpdateCanEverJoinTeam(bool bCanJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardTeamWidget", "UpdateCanEverJoinTeam");

	Params::ScoreboardTeamWidget_UpdateCanEverJoinTeam Parms{};

	Parms.bCanJoin = bCanJoin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ScoreboardTeamWidget.UpdateCanJoinTeam
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanJoin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreboardTeamWidget::UpdateCanJoinTeam(bool bCanJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardTeamWidget", "UpdateCanJoinTeam");

	Params::ScoreboardTeamWidget_UpdateCanJoinTeam Parms{};

	Parms.bCanJoin = bCanJoin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ScoreboardTeamWidget.UpdateTeamAttitude
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsOwnTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           NewAttitude                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreboardTeamWidget::UpdateTeamAttitude(bool bIsOwnTeam, ETeamAttitude NewAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreboardTeamWidget", "UpdateTeamAttitude");

	Params::ScoreboardTeamWidget_UpdateTeamAttitude Parms{};

	Parms.bIsOwnTeam = bIsOwnTeam;
	Parms.NewAttitude = NewAttitude;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ServerBrowserWidget.JoinServer
// (Final, Native, Public, BlueprintCallable)

void UServerBrowserWidget::JoinServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerBrowserWidget", "JoinServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ServerBrowserWidget.OnListEntrySelected
// (Final, Native, Private)
// Parameters:
// class UPagedListEntryWidget*            Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoubleClick                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UServerBrowserWidget::OnListEntrySelected(class UPagedListEntryWidget* Widget, bool bDoubleClick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerBrowserWidget", "OnListEntrySelected");

	Params::ServerBrowserWidget_OnListEntrySelected Parms{};

	Parms.Widget = Widget;
	Parms.bDoubleClick = bDoubleClick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ServerBrowserWidget.OnLoadListPage
// (Final, Native, Private)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UServerBrowserWidget::OnLoadListPage(int32 NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerBrowserWidget", "OnLoadListPage");

	Params::ServerBrowserWidget_OnLoadListPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ServerBrowserWidget.RefreshServers
// (Final, Native, Public, BlueprintCallable)

void UServerBrowserWidget::RefreshServers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerBrowserWidget", "RefreshServers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ServerBrowserWidget.UpdateCanJoin
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanJoin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UServerBrowserWidget::UpdateCanJoin(bool bCanJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerBrowserWidget", "UpdateCanJoin");

	Params::ServerBrowserWidget_UpdateCanJoin Parms{};

	Parms.bCanJoin = bCanJoin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ServerBrowserWidget.UpdateCanRefresh
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanRefresh                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UServerBrowserWidget::UpdateCanRefresh(bool bCanRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerBrowserWidget", "UpdateCanRefresh");

	Params::ServerBrowserWidget_UpdateCanRefresh Parms{};

	Parms.bCanRefresh = bCanRefresh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionCategoryWidget.InitializeCategory
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InCategoryName                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInputActionCategoryWidget::InitializeCategory(const class FText& InCategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionCategoryWidget", "InitializeCategory");

	Params::InputActionCategoryWidget_InitializeCategory Parms{};

	Parms.InCategoryName = std::move(InCategoryName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionCategoryWidget.OpenCategory
// (Final, Native, Protected, BlueprintCallable)

void UInputActionCategoryWidget::OpenCategory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionCategoryWidget", "OpenCategory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionCategoryWidget.UpdateInputActionListMode
// (Event, Protected, BlueprintEvent)
// Parameters:
// EInputActionListMode                    NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionCategoryWidget::UpdateInputActionListMode(EInputActionListMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionCategoryWidget", "UpdateInputActionListMode");

	Params::InputActionCategoryWidget_UpdateInputActionListMode Parms{};

	Parms.NewMode = NewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionCategoryWidget.UpdateIsSelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionCategoryWidget::UpdateIsSelected(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionCategoryWidget", "UpdateIsSelected");

	Params::InputActionCategoryWidget_UpdateIsSelected Parms{};

	Parms.bNewSelected = bNewSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionCategoryWidget.GetWidgetToFocus
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInputActionCategoryWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionCategoryWidget", "GetWidgetToFocus");

	Params::InputActionCategoryWidget_GetWidgetToFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.InputActionListWidget.AddActionWidget
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UInputActionWidget*               Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ActionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionListWidget::AddActionWidget(class UInputActionWidget* Widget, int32 ActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionListWidget", "AddActionWidget");

	Params::InputActionListWidget_AddActionWidget Parms{};

	Parms.Widget = Widget;
	Parms.ActionIndex = ActionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionListWidget.AddCategoryWidget
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UInputActionCategoryWidget*       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CategoryIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionListWidget::AddCategoryWidget(class UInputActionCategoryWidget* Widget, int32 CategoryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionListWidget", "AddCategoryWidget");

	Params::InputActionListWidget_AddCategoryWidget Parms{};

	Parms.Widget = Widget;
	Parms.CategoryIndex = CategoryIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionListWidget.FadeIn
// (Event, Protected, BlueprintEvent)

void UInputActionListWidget::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionListWidget", "FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.InputActionListWidget.UpdateInputActionListMode
// (Event, Protected, BlueprintEvent)
// Parameters:
// EInputActionListMode                    NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionListWidget::UpdateInputActionListMode(EInputActionListMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionListWidget", "UpdateInputActionListMode");

	Params::InputActionListWidget_UpdateInputActionListMode Parms{};

	Parms.NewMode = NewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionListWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInputActionListWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionListWidget", "GetWidgetToFocus");

	Params::InputActionListWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InputActionWidget.OnActionClicked
// (Final, Native, Protected, BlueprintCallable)

void UInputActionWidget::OnActionClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "OnActionClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionWidget.OnActionPressed
// (Final, Native, Protected, BlueprintCallable)

void UInputActionWidget::OnActionPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "OnActionPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionWidget.OnActionReleased
// (Final, Native, Protected, BlueprintCallable)

void UInputActionWidget::OnActionReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "OnActionReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionWidget.RebindAction
// (Final, Native, Protected, BlueprintCallable)

void UInputActionWidget::RebindAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "RebindAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionWidget.UpdateCanActionBeRebound
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInCanBeRebound                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionWidget::UpdateCanActionBeRebound(bool bInCanBeRebound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "UpdateCanActionBeRebound");

	Params::InputActionWidget_UpdateCanActionBeRebound Parms{};

	Parms.bInCanBeRebound = bInCanBeRebound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionWidget.UpdateDisplayInfo
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FDisplayInfo&              InDisplayInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInputActionWidget::UpdateDisplayInfo(const struct FDisplayInfo& InDisplayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "UpdateDisplayInfo");

	Params::InputActionWidget_UpdateDisplayInfo Parms{};

	Parms.InDisplayInfo = std::move(InDisplayInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionWidget.UpdateInputActionListMode
// (Event, Protected, BlueprintEvent)
// Parameters:
// EInputActionListMode                    NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionWidget::UpdateInputActionListMode(EInputActionListMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "UpdateInputActionListMode");

	Params::InputActionWidget_UpdateInputActionListMode Parms{};

	Parms.NewMode = NewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputActionWidget.UpdateIsActionEnabled
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInCanBeExecuted                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionWidget::UpdateIsActionEnabled(bool bInCanBeExecuted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "UpdateIsActionEnabled");

	Params::InputActionWidget_UpdateIsActionEnabled Parms{};

	Parms.bInCanBeExecuted = bInCanBeExecuted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputActionWidget.GetWidgetToFocus
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInputActionWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionWidget", "GetWidgetToFocus");

	Params::InputActionWidget_GetWidgetToFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.InputChordWidget.AddKeyWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UInputKeyWidget*                  Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::AddKeyWidget(class UInputKeyWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "AddKeyWidget");

	Params::InputChordWidget_AddKeyWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputChordWidget.AddSpacerWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::AddSpacerWidget(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "AddSpacerWidget");

	Params::InputChordWidget_AddSpacerWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputChordWidget.SetColorStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "SetColorStyle");

	Params::InputChordWidget_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputChordWidget.SetInputChord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FInputChord&               InInputChord                                           (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowAsGamepadKey                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::SetInputChord(const struct FInputChord& InInputChord, bool bShowAsGamepadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "SetInputChord");

	Params::InputChordWidget_SetInputChord Parms{};

	Parms.InInputChord = std::move(InInputChord);
	Parms.bShowAsGamepadKey = bShowAsGamepadKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputChordWidget.SetShowUnboundKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::SetShowUnboundKey(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "SetShowUnboundKey");

	Params::InputChordWidget_SetShowUnboundKey Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputChordWidget.SetStyleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "SetStyleState");

	Params::InputChordWidget_SetStyleState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputChordWidget.UpdateSpacerColorStyleAndStyleState
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIColorStyle                      NewColorStyle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickUIStyleState                      NewStyleState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputChordWidget::UpdateSpacerColorStyleAndStyleState(class UUserWidget* Widget, EBrickUIColorStyle NewColorStyle, EBrickUIStyleState NewStyleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputChordWidget", "UpdateSpacerColorStyleAndStyleState");

	Params::InputChordWidget_UpdateSpacerColorStyleAndStyleState Parms{};

	Parms.Widget = Widget;
	Parms.NewColorStyle = NewColorStyle;
	Parms.NewStyleState = NewStyleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputHelpWidget.GetGameOverlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameOverlayWidget*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameOverlayWidget* UInputHelpWidget::GetGameOverlay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputHelpWidget", "GetGameOverlay");

	Params::InputHelpWidget_GetGameOverlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InputHelpWidget.GetWidgetToFocus
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInputHelpWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputHelpWidget", "GetWidgetToFocus");

	Params::InputHelpWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.SpectatorInputComponent.MoveForward
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatorInputComponent::MoveForward(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "MoveForward");

	Params::SpectatorInputComponent_MoveForward Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.MoveRight
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatorInputComponent::MoveRight(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "MoveRight");

	Params::SpectatorInputComponent_MoveRight Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.MoveUp
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatorInputComponent::MoveUp(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "MoveUp");

	Params::SpectatorInputComponent_MoveUp Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnPressedCaptureVehicleThumbnail
// (Final, Native, Protected)

void USpectatorInputComponent::OnPressedCaptureVehicleThumbnail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnPressedCaptureVehicleThumbnail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnPressedPlacePawn
// (Final, Native, Protected)

void USpectatorInputComponent::OnPressedPlacePawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnPressedPlacePawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnPressedShiftSpeed
// (Final, Native, Protected)

void USpectatorInputComponent::OnPressedShiftSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnPressedShiftSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnPressedSpawnDummy
// (Final, Native, Protected)

void USpectatorInputComponent::OnPressedSpawnDummy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnPressedSpawnDummy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnReleasedPlacePawn
// (Final, Native, Protected)

void USpectatorInputComponent::OnReleasedPlacePawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnReleasedPlacePawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnReleasedShiftSpeed
// (Final, Native, Protected)

void USpectatorInputComponent::OnReleasedShiftSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnReleasedShiftSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.OnReleasedSpawnDummy
// (Final, Native, Protected)

void USpectatorInputComponent::OnReleasedSpawnDummy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "OnReleasedSpawnDummy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorInputComponent.RotatePawnCW
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatorInputComponent::RotatePawnCW(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorInputComponent", "RotatePawnCW");

	Params::SpectatorInputComponent_RotatePawnCW Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputKeyWidget.SetKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInUsedAsModifier                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputKeyWidget::SetKey(const struct FKey& InKey, bool bInUsedAsModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputKeyWidget", "SetKey");

	Params::InputKeyWidget_SetKey Parms{};

	Parms.InKey = std::move(InKey);
	Parms.bInUsedAsModifier = bInUsedAsModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputKeyWidget.UpdateDisplayInfo
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FKeyDisplayTableRow&       DisplayInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsGamepadKey                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputKeyWidget::UpdateDisplayInfo(const struct FKeyDisplayTableRow& DisplayInfo, bool bIsGamepadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputKeyWidget", "UpdateDisplayInfo");

	Params::InputKeyWidget_UpdateDisplayInfo Parms{};

	Parms.DisplayInfo = std::move(DisplayInfo);
	Parms.bIsGamepadKey = bIsGamepadKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputMappingKeyWidget.OnClickedButton
// (Final, Native, Private)

void UInputMappingKeyWidget::OnClickedButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputMappingKeyWidget", "OnClickedButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputMappingKeyWidget.UpdateConflictedState
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewConflicted                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingKeyWidget::UpdateConflictedState(bool bNewConflicted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputMappingKeyWidget", "UpdateConflictedState");

	Params::InputMappingKeyWidget_UpdateConflictedState Parms{};

	Parms.bNewConflicted = bNewConflicted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.WinchBrick.Interact_AttachWinch
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWinchBrick::Interact_AttachWinch(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WinchBrick", "Interact_AttachWinch");

	Params::WinchBrick_Interact_AttachWinch Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WinchBrick.Interact_DetachWinch
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWinchBrick::Interact_DetachWinch(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WinchBrick", "Interact_DetachWinch");

	Params::WinchBrick_Interact_DetachWinch Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WinchBrick.OnRep_AttachTarget
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FWinchAttachTarget&        PrevAttachTarget                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UWinchBrick::OnRep_AttachTarget(const struct FWinchAttachTarget& PrevAttachTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WinchBrick", "OnRep_AttachTarget");

	Params::WinchBrick_OnRep_AttachTarget Parms{};

	Parms.PrevAttachTarget = std::move(PrevAttachTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.WinchBrick.OnRep_RepRopeLength
// (Final, Native, Private)

void UWinchBrick::OnRep_RepRopeLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WinchBrick", "OnRep_RepRopeLength");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputMappingPropertyWidget.AddKeyWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UInputMappingKeyWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingPropertyWidget::AddKeyWidget(class UInputMappingKeyWidget* Widget, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputMappingPropertyWidget", "AddKeyWidget");

	Params::InputMappingPropertyWidget_AddKeyWidget Parms{};

	Parms.Widget = Widget;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputMappingPropertyWidget.AddMapping
// (Final, Native, Public, BlueprintCallable)

void UInputMappingPropertyWidget::AddMapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputMappingPropertyWidget", "AddMapping");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InputMappingPropertyWidget.UpdateCanAddMapping
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanAdd                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputMappingPropertyWidget::UpdateCanAddMapping(bool bCanAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputMappingPropertyWidget", "UpdateCanAddMapping");

	Params::InputMappingPropertyWidget_UpdateCanAddMapping Parms{};

	Parms.bCanAdd = bCanAdd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InputSettingsPageWidget.RevertInputMappings
// (Final, Native, Public, BlueprintCallable)

void UInputSettingsPageWidget::RevertInputMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputSettingsPageWidget", "RevertInputMappings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InteractionOptionWidget.OnClickedInteract
// (Final, Native, Protected, BlueprintCallable)

void UInteractionOptionWidget::OnClickedInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionOptionWidget", "OnClickedInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InteractionOptionWidget.UpdateCanBeClicked
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInCanBeClicked                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionOptionWidget::UpdateCanBeClicked(bool bInCanBeClicked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionOptionWidget", "UpdateCanBeClicked");

	Params::InteractionOptionWidget_UpdateCanBeClicked Parms{};

	Parms.bInCanBeClicked = bInCanBeClicked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InteractionOptionWidget.UpdateColorStyle
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionOptionWidget::UpdateColorStyle(EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionOptionWidget", "UpdateColorStyle");

	Params::InteractionOptionWidget_UpdateColorStyle Parms{};

	Parms.InColorStyle = InColorStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InteractionWidget.AddOptionWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UInteractionOptionWidget*         Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OptionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionWidget::AddOptionWidget(class UInteractionOptionWidget* Widget, int32 OptionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionWidget", "AddOptionWidget");

	Params::InteractionWidget_AddOptionWidget Parms{};

	Parms.Widget = Widget;
	Parms.OptionIndex = OptionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InventoryContainerWidget.UpdateHasInventory
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bHasInventory                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryContainerWidget::UpdateHasInventory(bool bHasInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryContainerWidget", "UpdateHasInventory");

	Params::InventoryContainerWidget_UpdateHasInventory Parms{};

	Parms.bHasInventory = bHasInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InventoryContainerWidget.UpdateOwnerMoney
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewMoney                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryContainerWidget::UpdateOwnerMoney(float NewMoney)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryContainerWidget", "UpdateOwnerMoney");

	Params::InventoryContainerWidget_UpdateOwnerMoney Parms{};

	Parms.NewMoney = NewMoney;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InventorySlotWidget.AddSubInventoryWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UInventoryContainerWidget*        Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventorySlotWidget::AddSubInventoryWidget(class UInventoryContainerWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySlotWidget", "AddSubInventoryWidget");

	Params::InventorySlotWidget_AddSubInventoryWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.InventorySlotWidget.OnButtonClicked
// (Final, Native, Protected, BlueprintCallable)

void UInventorySlotWidget::OnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySlotWidget", "OnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.InventorySlotWidget.OnButtonDragged
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGeometry&                 InGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UInventorySlotWidget::OnButtonDragged(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySlotWidget", "OnButtonDragged");

	Params::InventorySlotWidget_OnButtonDragged Parms{};

	Parms.InGeometry = std::move(InGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.InventorySlotWidget.UpdateSlotApperance
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInIsDragWidget                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsSpecialSlot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsValidSlot                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInCanDrag                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsDragging                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInCanDrop                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInDropReplace                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsDragOver                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventorySlotWidget::UpdateSlotApperance(bool bInIsDragWidget, bool bInIsSpecialSlot, bool bInIsValidSlot, bool bInCanDrag, bool bInIsDragging, bool bInCanDrop, bool bInDropReplace, bool bInIsDragOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySlotWidget", "UpdateSlotApperance");

	Params::InventorySlotWidget_UpdateSlotApperance Parms{};

	Parms.bInIsDragWidget = bInIsDragWidget;
	Parms.bInIsSpecialSlot = bInIsSpecialSlot;
	Parms.bInIsValidSlot = bInIsValidSlot;
	Parms.bInCanDrag = bInCanDrag;
	Parms.bInIsDragging = bInIsDragging;
	Parms.bInCanDrop = bInCanDrop;
	Parms.bInDropReplace = bInDropReplace;
	Parms.bInIsDragOver = bInIsDragOver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TargetMarkerIconWidget.UpdateAmmoType
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAmmoType                               NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetMarkerIconWidget::UpdateAmmoType(EAmmoType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMarkerIconWidget", "UpdateAmmoType");

	Params::TargetMarkerIconWidget_UpdateAmmoType Parms{};

	Parms.NewType = NewType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TargetMarkerIconWidget.UpdateFireAction
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewActionIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetMarkerIconWidget::UpdateFireAction(int32 NewActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMarkerIconWidget", "UpdateFireAction");

	Params::TargetMarkerIconWidget_UpdateFireAction Parms{};

	Parms.NewActionIndex = NewActionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TargetMarkerIconWidget.UpdateHasValidTarget
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewHasValidTarget                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetMarkerIconWidget::UpdateHasValidTarget(bool bNewHasValidTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMarkerIconWidget", "UpdateHasValidTarget");

	Params::TargetMarkerIconWidget_UpdateHasValidTarget Parms{};

	Parms.bNewHasValidTarget = bNewHasValidTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TargetMarkerIconWidget.UpdateTargetDistance
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewDist                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetMarkerIconWidget::UpdateTargetDistance(float NewDist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMarkerIconWidget", "UpdateTargetDistance");

	Params::TargetMarkerIconWidget_UpdateTargetDistance Parms{};

	Parms.NewDist = NewDist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.BuildingPart.Fill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   MeshIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuildingPart::Fill(uint8 MeshIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingPart", "Fill");

	Params::BuildingPart_Fill Parms{};

	Parms.MeshIdx = MeshIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BuildingPart.Floor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Floor_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MeshIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuildingPart::Floor(int32 Floor_0, uint8 MeshIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingPart", "Floor");

	Params::BuildingPart_Floor Parms{};

	Parms.Floor_0 = Floor_0;
	Parms.MeshIdx = MeshIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BuildingPart.Grid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Dist                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MeshIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuildingPart::Grid(int32 Dist, uint8 MeshIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingPart", "Grid");

	Params::BuildingPart_Grid Parms{};

	Parms.Dist = Dist;
	Parms.MeshIdx = MeshIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BuildingPart.Place
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBuildingSide                           Side                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Floor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MeshIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuildingPart::Place(EBuildingSide Side, int32 Floor, int32 Position, uint8 MeshIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingPart", "Place");

	Params::BuildingPart_Place Parms{};

	Parms.Side = Side;
	Parms.Floor = Floor;
	Parms.Position = Position;
	Parms.MeshIdx = MeshIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.BuildingPart.Rect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBuildingSide                           Side                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFloor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFloor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndPosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MeshIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuildingPart::Rect(EBuildingSide Side, int32 StartFloor, int32 EndFloor, int32 StartPosition, int32 EndPosition, uint8 MeshIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingPart", "Rect");

	Params::BuildingPart_Rect Parms{};

	Parms.Side = Side;
	Parms.StartFloor = StartFloor;
	Parms.EndFloor = EndFloor;
	Parms.StartPosition = StartPosition;
	Parms.EndPosition = EndPosition;
	Parms.MeshIdx = MeshIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ThrusterBrick.OnRep_RepAccumulatedInput
// (Final, Native, Private)

void UThrusterBrick::OnRep_RepAccumulatedInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrusterBrick", "OnRep_RepAccumulatedInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.LoadoutContainer.Interact_Inventory
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALoadoutContainer::Interact_Inventory(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutContainer", "Interact_Inventory");

	Params::LoadoutContainer_Interact_Inventory Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.LoadoutContainer.UpdateAnimation
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   InAnimRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALoadoutContainer::UpdateAnimation(float InAnimRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutContainer", "UpdateAnimation");

	Params::LoadoutContainer_UpdateAnimation Parms{};

	Parms.InAnimRatio = InAnimRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MapCrosshairWidget.SetColorStyle
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      NewStyle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapCrosshairWidget::SetColorStyle(EBrickUIColorStyle NewStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCrosshairWidget", "SetColorStyle");

	Params::MapCrosshairWidget_SetColorStyle Parms{};

	Parms.NewStyle = NewStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MapCrosshairWidget.SetStyleState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrickUIStyleState                      NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapCrosshairWidget::SetStyleState(EBrickUIStyleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCrosshairWidget", "SetStyleState");

	Params::MapCrosshairWidget_SetStyleState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.RadioButtonPanel.GetSelectedWidgets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class URadioButtonWidget*>*      OutWidgets                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URadioButtonPanel::GetSelectedWidgets(TArray<class URadioButtonWidget*>* OutWidgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonPanel", "GetSelectedWidgets");

	Params::RadioButtonPanel_GetSelectedWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWidgets != nullptr)
		*OutWidgets = std::move(Parms.OutWidgets);
}


// Function BrickRigs.RadioButtonPanel.SelectButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URadioButtonWidget*               Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URadioButtonPanel::SelectButton(class URadioButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonPanel", "SelectButton");

	Params::RadioButtonPanel_SelectButton Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RadioButtonPanel.UnselectAll
// (Final, Native, Public, BlueprintCallable)

void URadioButtonPanel::UnselectAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonPanel", "UnselectAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RadioButtonPanel.UnselectButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URadioButtonWidget*               Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URadioButtonPanel::UnselectButton(class URadioButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonPanel", "UnselectButton");

	Params::RadioButtonPanel_UnselectButton Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RadioButtonPanel.GetNumSelectedWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URadioButtonPanel::GetNumSelectedWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonPanel", "GetNumSelectedWidgets");

	Params::RadioButtonPanel_GetNumSelectedWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.RadioButtonPanel.GetSelectedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class URadioButtonWidget*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URadioButtonWidget* URadioButtonPanel::GetSelectedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonPanel", "GetSelectedWidget");

	Params::RadioButtonPanel_GetSelectedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MapWidget.OnMeasurementSystemChanged
// (Final, Native, Private)
// Parameters:
// EMeasurementSystem                      NewSystem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapWidget::OnMeasurementSystemChanged(EMeasurementSystem NewSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "OnMeasurementSystemChanged");

	Params::MapWidget_OnMeasurementSystemChanged Parms{};

	Parms.NewSystem = NewSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MapWidget.ResetPanAndZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInitialize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapWidget::ResetPanAndZoom(bool bInitialize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "ResetPanAndZoom");

	Params::MapWidget_ResetPanAndZoom Parms{};

	Parms.bInitialize = bInitialize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MapWidget.UpdateViewportPannedOrZoomed
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapWidget::UpdateViewportPannedOrZoomed(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "UpdateViewportPannedOrZoomed");

	Params::MapWidget_UpdateViewportPannedOrZoomed Parms{};

	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MapWidget.CreateMapMID
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UMapWidget::CreateMapMID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "CreateMapMID");

	Params::MapWidget_CreateMapMID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.MapWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMapWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "GetWidgetToFocus");

	Params::MapWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MatchMenuWidget.RestartMatch
// (Final, Native, Public, BlueprintCallable)

void UMatchMenuWidget::RestartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchMenuWidget", "RestartMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MatchMenuWidget.UpdateIsAdmin
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsAdmin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchMenuWidget::UpdateIsAdmin(bool bNewIsAdmin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchMenuWidget", "UpdateIsAdmin");

	Params::MatchMenuWidget_UpdateIsAdmin Parms{};

	Parms.bNewIsAdmin = bNewIsAdmin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MatchMenuWidget.UpdateRestartMatchButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanRestart                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSameLevelAndMode                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchMenuWidget::UpdateRestartMatchButton(bool bCanRestart, bool bSameLevelAndMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchMenuWidget", "UpdateRestartMatchButton");

	Params::MatchMenuWidget_UpdateRestartMatchButton Parms{};

	Parms.bCanRestart = bCanRestart;
	Parms.bSameLevelAndMode = bSameLevelAndMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MatchTimerWidget.UpdateTimer
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchTimerWidget::UpdateTimer(int32 NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchTimerWidget", "UpdateTimer");

	Params::MatchTimerWidget_UpdateTimer Parms{};

	Parms.NewTime = NewTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MenuButtonPanelWidget.ClearButtons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bManualRemove                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuButtonPanelWidget::ClearButtons(bool bManualRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonPanelWidget", "ClearButtons");

	Params::MenuButtonPanelWidget_ClearButtons Parms{};

	Parms.bManualRemove = bManualRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonPanelWidget.CreateButton
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      DisplayText                                            (Parm, NativeAccessSpecifierPublic)
// int32                                   IconIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UMenuButtonWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuButtonWidget* UMenuButtonPanelWidget::CreateButton(const class FText& DisplayText, int32 IconIndex, const TDelegate<void()>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonPanelWidget", "CreateButton");

	Params::MenuButtonPanelWidget_CreateButton Parms{};

	Parms.DisplayText = std::move(DisplayText);
	Parms.IconIndex = IconIndex;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MenuButtonPanelWidget.RemoveUnusedButtons
// (Final, Native, Public, BlueprintCallable)

void UMenuButtonPanelWidget::RemoveUnusedButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonPanelWidget", "RemoveUnusedButtons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonPanelWidget.SetNumButtonsPerRow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuButtonPanelWidget::SetNumButtonsPerRow(int32 NewNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonPanelWidget", "SetNumButtonsPerRow");

	Params::MenuButtonPanelWidget_SetNumButtonsPerRow Parms{};

	Parms.NewNum = NewNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuButtonPanelWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMenuButtonPanelWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonPanelWidget", "GetWidgetToFocus");

	Params::MenuButtonPanelWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UGCTagsPropertyWidget.InitializeDepartmentItem
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickComboBoxItemParams*        OutParams                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UUGCTagsPropertyWidget::InitializeDepartmentItem(int32 Item, struct FBrickComboBoxItemParams* OutParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTagsPropertyWidget", "InitializeDepartmentItem");

	Params::UGCTagsPropertyWidget_InitializeDepartmentItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParams != nullptr)
		*OutParams = std::move(Parms.OutParams);
}


// Function BrickRigs.UGCTagsPropertyWidget.InitializeEraItem
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickComboBoxItemParams*        OutParams                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UUGCTagsPropertyWidget::InitializeEraItem(int32 Item, struct FBrickComboBoxItemParams* OutParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTagsPropertyWidget", "InitializeEraItem");

	Params::UGCTagsPropertyWidget_InitializeEraItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParams != nullptr)
		*OutParams = std::move(Parms.OutParams);
}


// Function BrickRigs.UGCTagsPropertyWidget.InitializeTypeItem
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickComboBoxItemParams*        OutParams                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UUGCTagsPropertyWidget::InitializeTypeItem(int32 Item, struct FBrickComboBoxItemParams* OutParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTagsPropertyWidget", "InitializeTypeItem");

	Params::UGCTagsPropertyWidget_InitializeTypeItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParams != nullptr)
		*OutParams = std::move(Parms.OutParams);
}


// Function BrickRigs.UGCTagsPropertyWidget.OnDepartmentItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCTagsPropertyWidget::OnDepartmentItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTagsPropertyWidget", "OnDepartmentItemSelected");

	Params::UGCTagsPropertyWidget_OnDepartmentItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCTagsPropertyWidget.OnEraItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCTagsPropertyWidget::OnEraItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTagsPropertyWidget", "OnEraItemSelected");

	Params::UGCTagsPropertyWidget_OnEraItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCTagsPropertyWidget.OnTypeItemSelected
// (Final, Native, Private)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCTagsPropertyWidget::OnTypeItemSelected(int32 Item, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTagsPropertyWidget", "OnTypeItemSelected");

	Params::UGCTagsPropertyWidget_OnTypeItemSelected Parms{};

	Parms.Item = Item;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.AddOrRemoveSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAdd                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::AddOrRemoveSelectedItem(bool bAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "AddOrRemoveSelectedItem");

	Params::UGCBrowserWidget_AddOrRemoveSelectedItem Parms{};

	Parms.bAdd = bAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.ClearItems
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::ClearItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "ClearItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.CreateAddOrRemoveItemButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsArrayProperty                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSelected                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::CreateAddOrRemoveItemButton(bool bIsArrayProperty, bool bIsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateAddOrRemoveItemButton");

	Params::UGCBrowserWidget_CreateAddOrRemoveItemButton Parms{};

	Parms.bIsArrayProperty = bIsArrayProperty;
	Parms.bIsSelected = bIsSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCBrowserWidget.CreateCancelButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateCancelButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateCancelButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateClearItemsButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsArrayProperty                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::CreateClearItemsButton(bool bIsArrayProperty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateClearItemsButton");

	Params::UGCBrowserWidget_CreateClearItemsButton Parms{};

	Parms.bIsArrayProperty = bIsArrayProperty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCBrowserWidget.CreateDeleteButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateDeleteButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateDeleteButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateDuplicateButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateDuplicateButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateDuplicateButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateEditButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateEditButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateEditButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateImportButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateImportButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateImportButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateNewItem
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::CreateNewItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateNewItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.CreateNewItemButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateNewItemButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateNewItemButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateOpenInExplorerButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateOpenInExplorerButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateOpenInExplorerButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateRecoverAutoSaveButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateRecoverAutoSaveButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateRecoverAutoSaveButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateSaveNewButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateSaveNewButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateSaveNewButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateSaveOverwriteButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateSaveOverwriteButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateSaveOverwriteButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateSpawnButton
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bCanReplaceCurrent                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanSpawn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      SpawnFailureText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::CreateSpawnButton(bool bCanReplaceCurrent, bool bCanSpawn, const class FText& SpawnFailureText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateSpawnButton");

	Params::UGCBrowserWidget_CreateSpawnButton Parms{};

	Parms.bCanReplaceCurrent = bCanReplaceCurrent;
	Parms.bCanSpawn = bCanSpawn;
	Parms.SpawnFailureText = std::move(SpawnFailureText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCBrowserWidget.CreateSpawnInvincibilityButton
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      CurrentInvincibilityText                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::CreateSpawnInvincibilityButton(const class FText& CurrentInvincibilityText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateSpawnInvincibilityButton");

	Params::UGCBrowserWidget_CreateSpawnInvincibilityButton Parms{};

	Parms.CurrentInvincibilityText = std::move(CurrentInvincibilityText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCBrowserWidget.CreateSubscribeButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsSubscribed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::CreateSubscribeButton(bool bIsSubscribed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateSubscribeButton");

	Params::UGCBrowserWidget_CreateSubscribeButton Parms{};

	Parms.bIsSubscribed = bIsSubscribed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCBrowserWidget.CreateUpdateExistingButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateUpdateExistingButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateUpdateExistingButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateUploadNewButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateUploadNewButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateUploadNewButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateViewInBrowserButton
// (Event, Protected, BlueprintEvent)

void UUGCBrowserWidget::CreateViewInBrowserButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateViewInBrowserButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.UGCBrowserWidget.CreateVoteButtons
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EFluUGCItemVote                   Vote                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::CreateVoteButtons(const EFluUGCItemVote Vote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CreateVoteButtons");

	Params::UGCBrowserWidget_CreateVoteButtons Parms{};

	Parms.Vote = Vote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCBrowserWidget.CycleVehicleSpawnInvincibility
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::CycleVehicleSpawnInvincibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "CycleVehicleSpawnInvincibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.DeleteSelectedItem
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::DeleteSelectedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "DeleteSelectedItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.DuplicateSelectedItem
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::DuplicateSelectedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "DuplicateSelectedItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.EditSelectedItem
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::EditSelectedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "EditSelectedItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.FavoriteSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFavorite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::FavoriteSelectedItem(bool bFavorite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "FavoriteSelectedItem");

	Params::UGCBrowserWidget_FavoriteSelectedItem Parms{};

	Parms.bFavorite = bFavorite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.ImportSelectedItem
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::ImportSelectedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "ImportSelectedItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.OnListEntrySelected
// (Final, Native, Private)
// Parameters:
// class UPagedListEntryWidget*            Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoubleClick                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::OnListEntrySelected(class UPagedListEntryWidget* Widget, bool bDoubleClick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "OnListEntrySelected");

	Params::UGCBrowserWidget_OnListEntrySelected Parms{};

	Parms.Widget = Widget;
	Parms.bDoubleClick = bDoubleClick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.OnLoadListPage
// (Final, Native, Private)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::OnLoadListPage(int32 NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "OnLoadListPage");

	Params::UGCBrowserWidget_OnLoadListPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.OpenSelectedItemInExplorer
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::OpenSelectedItemInExplorer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "OpenSelectedItemInExplorer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.RecoverSelectedAutoSave
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::RecoverSelectedAutoSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "RecoverSelectedAutoSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.SaveItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOverwriteSelected                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::SaveItem(bool bOverwriteSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "SaveItem");

	Params::UGCBrowserWidget_SaveItem Parms{};

	Parms.bOverwriteSelected = bOverwriteSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.SetSelectedItemVote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EFluUGCItemVote                   Vote                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::SetSelectedItemVote(const EFluUGCItemVote Vote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "SetSelectedItemVote");

	Params::UGCBrowserWidget_SetSelectedItemVote Parms{};

	Parms.Vote = Vote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.SpawnSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReplaceCurrent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::SpawnSelectedItem(bool bReplaceCurrent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "SpawnSelectedItem");

	Params::UGCBrowserWidget_SpawnSelectedItem Parms{};

	Parms.bReplaceCurrent = bReplaceCurrent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.SubscribeSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSubscribe                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::SubscribeSelectedItem(bool bSubscribe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "SubscribeSelectedItem");

	Params::UGCBrowserWidget_SubscribeSelectedItem Parms{};

	Parms.bSubscribe = bSubscribe;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.UploadItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUpdateSelected                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCBrowserWidget::UploadItem(bool bUpdateSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "UploadItem");

	Params::UGCBrowserWidget_UploadItem Parms{};

	Parms.bUpdateSelected = bUpdateSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCBrowserWidget.ViewSelectedItemInBrowser
// (Final, Native, Public, BlueprintCallable)

void UUGCBrowserWidget::ViewSelectedItemInBrowser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCBrowserWidget", "ViewSelectedItemInBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuWidget.AddMenuPage
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMenuPageWidget*                  Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuWidget::AddMenuPage(class UMenuPageWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "AddMenuPage");

	Params::MenuWidget_AddMenuPage Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MenuWidget.CloseMenu
// (Final, Native, Public, BlueprintCallable)

void UMenuWidget::CloseMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "CloseMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuWidget.CreateBackButton
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMenuWidget::CreateBackButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "CreateBackButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.MenuWidget.OnClickedBack
// (Final, Native, Protected, BlueprintCallable)

void UMenuWidget::OnClickedBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "OnClickedBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuWidget.OnClickedQuickGame
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMenuWidget::OnClickedQuickGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "OnClickedQuickGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.MenuWidget.OnMenuContextChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FName&                      NewContext                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuWidget::OnMenuContextChanged(const class FName& NewContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "OnMenuContextChanged");

	Params::MenuWidget_OnMenuContextChanged Parms{};

	Parms.NewContext = NewContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MenuWidget.OpenMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InMenu                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuWidget::OpenMenu(class FName InMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "OpenMenu");

	Params::MenuWidget_OpenMenu Parms{};

	Parms.InMenu = InMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuWidget.PlayMenuTransition
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UMenuWidget::PlayMenuTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "PlayMenuTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuWidget.RemoveMenuPage
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMenuPageWidget*                  Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuWidget::RemoveMenuPage(class UMenuPageWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "RemoveMenuPage");

	Params::MenuWidget_RemoveMenuPage Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MenuWidget.SetTitleText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMenuWidget::SetTitleText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "SetTitleText");

	Params::MenuWidget_SetTitleText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.MenuWidget.ShowMenuPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             WidgetClass                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      TitleText                                              (Parm, NativeAccessSpecifierPublic)

void UMenuWidget::ShowMenuPage(TSoftClassPtr<class UClass> WidgetClass, const class FText& TitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "ShowMenuPage");

	Params::MenuWidget_ShowMenuPage Parms{};

	Parms.WidgetClass = WidgetClass;
	Parms.TitleText = std::move(TitleText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.MenuWidget.StepBack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMenuWidget::StepBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "StepBack");

	Params::MenuWidget_StepBack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.MenuWidget.IsMainMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMenuWidget::IsMainMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuWidget", "IsMainMenu");

	Params::MenuWidget_IsMainMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.BeginPlay
// (Event, Public, BlueprintEvent)

void UModHook::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "BeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.ModHook.EndPlay
// (Event, Public, BlueprintEvent)

void UModHook::EndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "EndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.ModHook.OnCharacterBeginPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::OnCharacterBeginPlay(class ABaseCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OnCharacterBeginPlay");

	Params::ModHook_OnCharacterBeginPlay Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.OnPlayerControllerBeginPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// class ABasePlayerController*            PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::OnPlayerControllerBeginPlay(class ABasePlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OnPlayerControllerBeginPlay");

	Params::ModHook_OnPlayerControllerBeginPlay Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.OnSpectatorBeginPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// class ABrickSpectatorPawn*              Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::OnSpectatorBeginPlay(class ABrickSpectatorPawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OnSpectatorBeginPlay");

	Params::ModHook_OnSpectatorBeginPlay Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.OnVehicleBeginPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// class ABrickVehicle*                    Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::OnVehicleBeginPlay(class ABrickVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OnVehicleBeginPlay");

	Params::ModHook_OnVehicleBeginPlay Parms{};

	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.OverrideBillboardTexture
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>& Texture                                                (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABillboard*                       Billboard                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UModHook::OverrideBillboardTexture(const TSoftObjectPtr<class UTexture2D>& Texture, class ABillboard* Billboard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideBillboardTexture");

	Params::ModHook_OverrideBillboardTexture Parms{};

	Parms.Texture = Texture;
	Parms.Billboard = Billboard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideCharacterLoadout
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInventoryLoadout&         Loadout                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ABaseCharacter*                   Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInventoryLoadout                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInventoryLoadout UModHook::OverrideCharacterLoadout(const struct FInventoryLoadout& Loadout, class ABaseCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideCharacterLoadout");

	Params::ModHook_OverrideCharacterLoadout Parms{};

	Parms.Loadout = std::move(Loadout);
	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideGameModeClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class AGameModeBase>        GameModeClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Portal                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGameModeBase>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGameModeBase> UModHook::OverrideGameModeClass(TSubclassOf<class AGameModeBase> GameModeClass, const class FString& MapName, const class FString& Options, const class FString& Portal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideGameModeClass");

	Params::ModHook_OverrideGameModeClass Parms{};

	Parms.GameModeClass = GameModeClass;
	Parms.MapName = std::move(MapName);
	Parms.Options = std::move(Options);
	Parms.Portal = std::move(Portal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideGameStateClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class AGameStateBase>       GameStateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGameStateBase>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGameStateBase> UModHook::OverrideGameStateClass(TSubclassOf<class AGameStateBase> GameStateClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideGameStateClass");

	Params::ModHook_OverrideGameStateClass Parms{};

	Parms.GameStateClass = GameStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideLoadoutContainerItems
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<TSubclassOf<class AInventoryItem>>&ItemClasses                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AInventoryItem>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class AInventoryItem>> UModHook::OverrideLoadoutContainerItems(const TArray<TSubclassOf<class AInventoryItem>>& ItemClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideLoadoutContainerItems");

	Params::ModHook_OverrideLoadoutContainerItems Parms{};

	Parms.ItemClasses = std::move(ItemClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideLoadSubLevel
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bLoadLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameModeInfo*                    GameMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModHook::OverrideLoadSubLevel(bool bLoadLevel, const class FString& LevelName, class UGameModeInfo* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideLoadSubLevel");

	Params::ModHook_OverrideLoadSubLevel Parms{};

	Parms.bLoadLevel = bLoadLevel;
	Parms.LevelName = std::move(LevelName);
	Parms.GameMode = GameMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideMenu
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UMenuWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      Context                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModHook::OverrideMenu(class UMenuWidget* Widget, const class FName& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideMenu");

	Params::ModHook_OverrideMenu Parms{};

	Parms.Widget = Widget;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideMenuSequence
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TSoftClassPtr<class UClass>&      SequenceClass                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UModHook::OverrideMenuSequence(const TSoftClassPtr<class UClass>& SequenceClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideMenuSequence");

	Params::ModHook_OverrideMenuSequence Parms{};

	Parms.SequenceClass = SequenceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideMenuWorldSetupParams
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FWorldSetupParams&         Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FWorldSetupParams                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWorldSetupParams UModHook::OverrideMenuWorldSetupParams(const struct FWorldSetupParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideMenuWorldSetupParams");

	Params::ModHook_OverrideMenuWorldSetupParams Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverridePawnClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class APawn>                PawnClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APawn>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class APawn> UModHook::OverridePawnClass(TSubclassOf<class APawn> PawnClass, class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverridePawnClass");

	Params::ModHook_OverridePawnClass Parms{};

	Parms.PawnClass = PawnClass;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverridePlayerCameraManagerClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class APlayerCameraManager> PlayerCameraManagerClass                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABasePlayerController*            PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APlayerCameraManager> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class APlayerCameraManager> UModHook::OverridePlayerCameraManagerClass(TSubclassOf<class APlayerCameraManager> PlayerCameraManagerClass, class ABasePlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverridePlayerCameraManagerClass");

	Params::ModHook_OverridePlayerCameraManagerClass Parms{};

	Parms.PlayerCameraManagerClass = PlayerCameraManagerClass;
	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverridePlayerControllerClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class APlayerController>    PlayerControllerClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APlayerController>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class APlayerController> UModHook::OverridePlayerControllerClass(TSubclassOf<class APlayerController> PlayerControllerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverridePlayerControllerClass");

	Params::ModHook_OverridePlayerControllerClass Parms{};

	Parms.PlayerControllerClass = PlayerControllerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideReplayPlayerControllerClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class APlayerController>    PlayerControllerClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APlayerController>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class APlayerController> UModHook::OverrideReplayPlayerControllerClass(TSubclassOf<class APlayerController> PlayerControllerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideReplayPlayerControllerClass");

	Params::ModHook_OverrideReplayPlayerControllerClass Parms{};

	Parms.PlayerControllerClass = PlayerControllerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideSpectatorClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class ASpectatorPawn>       SpectatorClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASpectatorPawn>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ASpectatorPawn> UModHook::OverrideSpectatorClass(TSubclassOf<class ASpectatorPawn> SpectatorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideSpectatorClass");

	Params::ModHook_OverrideSpectatorClass Parms{};

	Parms.SpectatorClass = SpectatorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideTrainClass
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class ATrain>               TrainClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATrain>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ATrain> UModHook::OverrideTrainClass(TSubclassOf<class ATrain> TrainClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideTrainClass");

	Params::ModHook_OverrideTrainClass Parms{};

	Parms.TrainClass = TrainClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.OverrideVehicleClass
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TSubclassOf<class ABrickVehicle>        VehicleClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPlayerSpawnRequest&       SpawnRequest                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class ABrickVehicle>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ABrickVehicle> UModHook::OverrideVehicleClass(TSubclassOf<class ABrickVehicle> VehicleClass, class ABrickPlayerController* PC, const struct FPlayerSpawnRequest& SpawnRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "OverrideVehicleClass");

	Params::ModHook_OverrideVehicleClass Parms{};

	Parms.VehicleClass = VehicleClass;
	Parms.PC = PC;
	Parms.SpawnRequest = std::move(SpawnRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ModHook.PostSpawnPawn
// (Event, Public, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::PostSpawnPawn(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "PostSpawnPawn");

	Params::ModHook_PostSpawnPawn Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.PostSpawnPlayerController
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::PostSpawnPlayerController(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "PostSpawnPlayerController");

	Params::ModHook_PostSpawnPlayerController Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.PostSpawnSpectatorPawn
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASpectatorPawn*                   Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::PostSpawnSpectatorPawn(class ASpectatorPawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "PostSpawnSpectatorPawn");

	Params::ModHook_PostSpawnSpectatorPawn Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHook.PostSpawnVehicle
// (Event, Public, BlueprintEvent)
// Parameters:
// class ABrickVehicle*                    Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModHook::PostSpawnVehicle(class ABrickVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModHook", "PostSpawnVehicle");

	Params::ModHook_PostSpawnVehicle Parms{};

	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.ModHookSubsystem.GetModHookByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UModHook>       ModHookClass                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModHook*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModHook* UModHookSubsystem::GetModHookByClass(const class UObject* WorldContextObject, const TSubclassOf<class UModHook> ModHookClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModHookSubsystem", "GetModHookByClass");

	Params::ModHookSubsystem_GetModHookByClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ModHookClass = ModHookClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UGCItemWidget.UpdateItemWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInIsSelected                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsLegacyFile                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInHasAutoSave                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsDedicatedAutoSave                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCItemWidget::UpdateItemWidget(bool bInIsSelected, bool bInIsLegacyFile, bool bInHasAutoSave, bool bInIsDedicatedAutoSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCItemWidget", "UpdateItemWidget");

	Params::UGCItemWidget_UpdateItemWidget Parms{};

	Parms.bInIsSelected = bInIsSelected;
	Parms.bInIsLegacyFile = bInIsLegacyFile;
	Parms.bInHasAutoSave = bInHasAutoSave;
	Parms.bInIsDedicatedAutoSave = bInIsDedicatedAutoSave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.NewItemCountWidget.SetNumNewItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNewItemCountWidget::SetNumNewItems(int32 NewNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewItemCountWidget", "SetNumNewItems");

	Params::NewItemCountWidget_SetNumNewItems Parms{};

	Parms.NewNum = NewNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.NewItemCountWidget.UpdateNumItems
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNewItemCountWidget::UpdateNumItems(int32 NewNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewItemCountWidget", "UpdateNumItems");

	Params::NewItemCountWidget_UpdateNumItems Parms{};

	Parms.NewNum = NewNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListHeaderWidget.OnMeasurementSystemChanged
// (Final, Native, Private)
// Parameters:
// EMeasurementSystem                      NewSystem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListHeaderWidget::OnMeasurementSystemChanged(EMeasurementSystem NewSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListHeaderWidget", "OnMeasurementSystemChanged");

	Params::PagedListHeaderWidget_OnMeasurementSystemChanged Parms{};

	Parms.NewSystem = NewSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListHeaderWidget.UpdateDimensions
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   InDimensions                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InMaxDimensions                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListHeaderWidget::UpdateDimensions(const struct FVector& InDimensions, const struct FVector& InMaxDimensions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListHeaderWidget", "UpdateDimensions");

	Params::PagedListHeaderWidget_UpdateDimensions Parms{};

	Parms.InDimensions = std::move(InDimensions);
	Parms.InMaxDimensions = std::move(InMaxDimensions);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListHeaderWidget.UpdateEntry
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InTitleText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInHasEntry                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInHasUnsavedChanges                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListHeaderWidget::UpdateEntry(const class FText& InTitleText, bool bInHasEntry, bool bInHasUnsavedChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListHeaderWidget", "UpdateEntry");

	Params::PagedListHeaderWidget_UpdateEntry Parms{};

	Parms.InTitleText = std::move(InTitleText);
	Parms.bInHasEntry = bInHasEntry;
	Parms.bInHasUnsavedChanges = bInHasUnsavedChanges;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListHeaderWidget.UpdateMass
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   InMass                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMaxMass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListHeaderWidget::UpdateMass(float InMass, float InMaxMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListHeaderWidget", "UpdateMass");

	Params::PagedListHeaderWidget_UpdateMass Parms{};

	Parms.InMass = InMass;
	Parms.InMaxMass = InMaxMass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListHeaderWidget.UpdateNumObjects
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   InNumObjects                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMaxNumObjects                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumHiddenObjects                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumObjectsWithAerodynamics                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListHeaderWidget::UpdateNumObjects(int32 InNumObjects, int32 InMaxNumObjects, int32 InNumHiddenObjects, int32 InNumObjectsWithAerodynamics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListHeaderWidget", "UpdateNumObjects");

	Params::PagedListHeaderWidget_UpdateNumObjects Parms{};

	Parms.InNumObjects = InNumObjects;
	Parms.InMaxNumObjects = InMaxNumObjects;
	Parms.InNumHiddenObjects = InNumHiddenObjects;
	Parms.InNumObjectsWithAerodynamics = InNumObjectsWithAerodynamics;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListHeaderWidget.UpdatePrice
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   InPrice                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMoney                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListHeaderWidget::UpdatePrice(float InPrice, float InMoney)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListHeaderWidget", "UpdatePrice");

	Params::PagedListHeaderWidget_UpdatePrice Parms{};

	Parms.InPrice = InPrice;
	Parms.InMoney = InMoney;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.VehicleResourceSubsystem.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVehicleResourceSubsystem*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVehicleResourceSubsystem* UVehicleResourceSubsystem::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleResourceSubsystem", "Get");

	Params::VehicleResourceSubsystem_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PagedListWidget.ClearSelectedEntryWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPagedListWidget::ClearSelectedEntryWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "ClearSelectedEntryWidget");

	Params::PagedListWidget_ClearSelectedEntryWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PagedListWidget.InitializePropertiesPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Container                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListWidget::InitializePropertiesPanel(class UObject* Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "InitializePropertiesPanel");

	Params::PagedListWidget_InitializePropertiesPanel Parms{};

	Parms.Container = Container;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListWidget.OnEntriesLoaded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InTotalNumEntries                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMaxPages                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListWidget::OnEntriesLoaded(int32 InTotalNumEntries, int32 InMaxPages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "OnEntriesLoaded");

	Params::PagedListWidget_OnEntriesLoaded Parms{};

	Parms.InTotalNumEntries = InTotalNumEntries;
	Parms.InMaxPages = InMaxPages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListWidget.OnPageChanged
// (Final, Native, Private)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListWidget::OnPageChanged(int32 NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "OnPageChanged");

	Params::PagedListWidget_OnPageChanged Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListWidget.RefreshEntries
// (Final, Native, Public, BlueprintCallable)

void UPagedListWidget::RefreshEntries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "RefreshEntries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListWidget.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListWidget::SetCurrentPage(int32 InPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "SetCurrentPage");

	Params::PagedListWidget_SetCurrentPage Parms{};

	Parms.InPage = InPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PagedListWidget.UpdateIsEntrySelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsEntrySelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListWidget::UpdateIsEntrySelected(bool bIsEntrySelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "UpdateIsEntrySelected");

	Params::PagedListWidget_UpdateIsEntrySelected Parms{};

	Parms.bIsEntrySelected = bIsEntrySelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListWidget.UpdateIsLoading
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewLoading                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPagedListWidget::UpdateIsLoading(bool bNewLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "UpdateIsLoading");

	Params::PagedListWidget_UpdateIsLoading Parms{};

	Parms.bNewLoading = bNewLoading;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PagedListWidget.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPagedListWidget::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "GetCurrentPage");

	Params::PagedListWidget_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PagedListWidget.GetSelectedEntryWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPagedListEntryWidget*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPagedListEntryWidget* UPagedListWidget::GetSelectedEntryWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PagedListWidget", "GetSelectedEntryWidget");

	Params::PagedListWidget_GetSelectedEntryWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PageSelectorWidget.GotoNextPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipToEnd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPageSelectorWidget::GotoNextPage(bool bForward, bool bSkipToEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PageSelectorWidget", "GotoNextPage");

	Params::PageSelectorWidget_GotoNextPage Parms{};

	Parms.bForward = bForward;
	Parms.bSkipToEnd = bSkipToEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PageSelectorWidget.InitializePages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumPages                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCurrentPage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumResults                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPageSelectorWidget::InitializePages(int32 InNumPages, int32 InCurrentPage, int32 InNumResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PageSelectorWidget", "InitializePages");

	Params::PageSelectorWidget_InitializePages Parms{};

	Parms.InNumPages = InNumPages;
	Parms.InCurrentPage = InCurrentPage;
	Parms.InNumResults = InNumResults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PageSelectorWidget.OnSliderValueChanged
// (Final, Native, Private)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPageSelectorWidget::OnSliderValueChanged(float NewValue, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PageSelectorWidget", "OnSliderValueChanged");

	Params::PageSelectorWidget_OnSliderValueChanged Parms{};

	Parms.NewValue = NewValue;
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PageSelectorWidget.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPageSelectorWidget::SetCurrentPage(int32 NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PageSelectorWidget", "SetCurrentPage");

	Params::PageSelectorWidget_SetCurrentPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PageSelectorWidget.UpdateButtons
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanGoBack                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanGoForward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPageSelectorWidget::UpdateButtons(bool bCanGoBack, bool bCanGoForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PageSelectorWidget", "UpdateButtons");

	Params::PageSelectorWidget_UpdateButtons Parms{};

	Parms.bCanGoBack = bCanGoBack;
	Parms.bCanGoForward = bCanGoForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PageSelectorWidget.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPageSelectorWidget::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PageSelectorWidget", "GetCurrentPage");

	Params::PageSelectorWidget_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PlacableObjectInputComponent.OnPressedSelectByPlacableType
// (Final, Native, Private)

void UPlacableObjectInputComponent::OnPressedSelectByPlacableType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlacableObjectInputComponent", "OnPressedSelectByPlacableType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.InteractAxis
// (Final, Native, Protected)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerInputComponent::InteractAxis(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "InteractAxis");

	Params::PlayerInputComponent_InteractAxis Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedChat
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedCycleMeasurementSystem
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedCycleMeasurementSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedCycleMeasurementSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedInteractPri
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedInteractPri()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedInteractPri");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedInteractSec
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedInteractSec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedInteractSec");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedInteractTer
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedInteractTer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedInteractTer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedMoveCamera
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedMoveCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedMoveCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnPressedScoreboard
// (Final, Native, Protected)

void UPlayerInputComponent::OnPressedScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnPressedScoreboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnReleasedInteractPri
// (Final, Native, Protected)

void UPlayerInputComponent::OnReleasedInteractPri()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnReleasedInteractPri");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnReleasedInteractSec
// (Final, Native, Protected)

void UPlayerInputComponent::OnReleasedInteractSec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnReleasedInteractSec");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnReleasedInteractTer
// (Final, Native, Protected)

void UPlayerInputComponent::OnReleasedInteractTer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnReleasedInteractTer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.OnReleasedMoveCamera
// (Final, Native, Protected)

void UPlayerInputComponent::OnReleasedMoveCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "OnReleasedMoveCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PlayerInputComponent.GetCycleMeasurementSystemValueText
// (Final, Native, Protected, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlayerInputComponent::GetCycleMeasurementSystemValueText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInputComponent", "GetCycleMeasurementSystemValueText");

	Params::PlayerInputComponent_GetCycleMeasurementSystemValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PlayerWidget.AddCameraBrickWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCameraBrickWidget*               InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::AddCameraBrickWidget(class UCameraBrickWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "AddCameraBrickWidget");

	Params::PlayerWidget_AddCameraBrickWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerWidget.AddCrosshairWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCrosshairWidget*                 InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::AddCrosshairWidget(class UCrosshairWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "AddCrosshairWidget");

	Params::PlayerWidget_AddCrosshairWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerWidget.AddCurrentItemWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCurrentItemWidget*               InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::AddCurrentItemWidget(class UCurrentItemWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "AddCurrentItemWidget");

	Params::PlayerWidget_AddCurrentItemWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerWidget.AddDashboardWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDashboardWidget*                 InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::AddDashboardWidget(class UDashboardWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "AddDashboardWidget");

	Params::PlayerWidget_AddDashboardWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerWidget.AddHealthBarWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHealthBarWidget*                 InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::AddHealthBarWidget(class UHealthBarWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "AddHealthBarWidget");

	Params::PlayerWidget_AddHealthBarWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerWidget.AddRestrictedAreaWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class URestrictedAreaWidget*            InWidget                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::AddRestrictedAreaWidget(class URestrictedAreaWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "AddRestrictedAreaWidget");

	Params::PlayerWidget_AddRestrictedAreaWidget Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PlayerWidget.OnHUDVisibilityChanged
// (Final, Native, Private)
// Parameters:
// EHUDVisibility                          NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerWidget::OnHUDVisibilityChanged(EHUDVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerWidget", "OnHUDVisibilityChanged");

	Params::PlayerWidget_OnHUDVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.ProjectileManagerComponent.OnParticleComponentFinished
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*         PSC                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileManagerComponent::OnParticleComponentFinished(class UParticleSystemComponent* PSC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileManagerComponent", "OnParticleComponentFinished");

	Params::ProjectileManagerComponent_OnParticleComponentFinished Parms{};

	Parms.PSC = PSC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.PropertyCategoryWidget.UpdateCategory
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      DisplayName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPropertyCategoryWidget::UpdateCategory(const class FText& DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyCategoryWidget", "UpdateCategory");

	Params::PropertyCategoryWidget_UpdateCategory Parms{};

	Parms.DisplayName = std::move(DisplayName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyContainerWidget.AddPropertyWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UPropertyWidget*                  Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrientation                            InOrientation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropertyContainerWidget::AddPropertyWidget(class UPropertyWidget* Widget, EOrientation InOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "AddPropertyWidget");

	Params::PropertyContainerWidget_AddPropertyWidget Parms{};

	Parms.Widget = Widget;
	Parms.InOrientation = InOrientation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyContainerWidget.OpenContextMenu
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPropertyContainerWidget::OpenContextMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "OpenContextMenu");

	Params::PropertyContainerWidget_OpenContextMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyContainerWidget.PostAddPropertyButtons
// (Event, Protected, BlueprintEvent)

void UPropertyContainerWidget::PostAddPropertyButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "PostAddPropertyButtons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.PropertyContainerWidget.PreAddPropertyButtons
// (Event, Protected, BlueprintEvent)

void UPropertyContainerWidget::PreAddPropertyButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "PreAddPropertyButtons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.PropertyContainerWidget.UpdateColorStyle
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBrickUIColorStyle                      InColorStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropertyContainerWidget::UpdateColorStyle(EBrickUIColorStyle InColorStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "UpdateColorStyle");

	Params::PropertyContainerWidget_UpdateColorStyle Parms{};

	Parms.InColorStyle = InColorStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyContainerWidget.UpdateIsReadOnly
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInReadOnly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropertyContainerWidget::UpdateIsReadOnly(bool bInReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "UpdateIsReadOnly");

	Params::PropertyContainerWidget_UpdateIsReadOnly Parms{};

	Parms.bInReadOnly = bInReadOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyContainerWidget.UpdateOrientation
// (Event, Protected, BlueprintEvent)
// Parameters:
// EOrientation                            InOrientation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropertyContainerWidget::UpdateOrientation(EOrientation InOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "UpdateOrientation");

	Params::PropertyContainerWidget_UpdateOrientation Parms{};

	Parms.InOrientation = InOrientation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.PropertyContainerWidget.GetMenuButtonPanelWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuButtonPanelWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMenuButtonPanelWidget* UPropertyContainerWidget::GetMenuButtonPanelWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "GetMenuButtonPanelWidget");

	Params::PropertyContainerWidget_GetMenuButtonPanelWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.PropertyContainerWidget.GetWidgetToFocus
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UPropertyContainerWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PropertyContainerWidget", "GetWidgetToFocus");

	Params::PropertyContainerWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.RadioButtonWidget.OnRadioButtonClicked
// (Final, Native, Protected, BlueprintCallable)

void URadioButtonWidget::OnRadioButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonWidget", "OnRadioButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RadioButtonWidget.SetIsSelected
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URadioButtonWidget::SetIsSelected(bool bNewSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadioButtonWidget", "SetIsSelected");

	Params::RadioButtonWidget_SetIsSelected Parms{};

	Parms.bNewSelected = bNewSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RestrictedAreaVolume.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ARestrictedAreaVolume::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestrictedAreaVolume", "OnBeginOverlap");

	Params::RestrictedAreaVolume_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.RestrictedAreaVolume.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARestrictedAreaVolume::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestrictedAreaVolume", "OnEndOverlap");

	Params::RestrictedAreaVolume_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SeatBrick.Interact_EnterSeat
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USeatBrick::Interact_EnterSeat(class ABrickPlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SeatBrick", "Interact_EnterSeat");

	Params::SeatBrick_Interact_EnterSeat Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SeatBrick.OnRep_Character
// (Final, Native, Private)
// Parameters:
// class ABrickCharacter*                  OldCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USeatBrick::OnRep_Character(class ABrickCharacter* OldCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SeatBrick", "OnRep_Character");

	Params::SeatBrick_OnRep_Character Parms{};

	Parms.OldCharacter = OldCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SeatBrick.OnRep_VehicleInput
// (Final, Native, Private)

void USeatBrick::OnRep_VehicleInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SeatBrick", "OnRep_VehicleInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SeatBrick.GetCurrentGear
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USeatBrick::GetCurrentGear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SeatBrick", "GetCurrentGear");

	Params::SeatBrick_GetCurrentGear Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.SeatBrick.GetFlipMotorThrottle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USeatBrick::GetFlipMotorThrottle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SeatBrick", "GetFlipMotorThrottle");

	Params::SeatBrick_GetFlipMotorThrottle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.ServerWidget.UpdateServer
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBrickOnlineSessionInfo&   SessionInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UServerWidget::UpdateServer(const struct FBrickOnlineSessionInfo& SessionInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerWidget", "UpdateServer");

	Params::ServerWidget_UpdateServer Parms{};

	Parms.SessionInfo = std::move(SessionInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.SpectatorWidget.SpectateNextCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNext                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatorWidget::SpectateNextCharacter(bool bNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorWidget", "SpectateNextCharacter");

	Params::SpectatorWidget_SpectateNextCharacter Parms{};

	Parms.bNext = bNext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SpectatorWidget.UpdateSpectatedPlayer
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      PlayerName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsValidPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatorWidget::UpdateSpectatedPlayer(const class FText& PlayerName, bool bIsValidPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorWidget", "UpdateSpectatedPlayer");

	Params::SpectatorWidget_UpdateSpectatedPlayer Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.bIsValidPlayer = bIsValidPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.SpectatorWidget.GetWidgetToFocus
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USpectatorWidget::GetWidgetToFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatorWidget", "GetWidgetToFocus");

	Params::SpectatorWidget_GetWidgetToFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BrickRigs.SwitchBrick.Interact_Deactivate
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USwitchBrick::Interact_Deactivate(class ABrickPlayerController* OtherPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwitchBrick", "Interact_Deactivate");

	Params::SwitchBrick_Interact_Deactivate Parms{};

	Parms.OtherPC = OtherPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SwitchBrick.Interact_Switch
// (Final, Native, Private)
// Parameters:
// class ABrickPlayerController*           OtherPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USwitchBrick::Interact_Switch(class ABrickPlayerController* OtherPC, float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwitchBrick", "Interact_Switch");

	Params::SwitchBrick_Interact_Switch Parms{};

	Parms.OtherPC = OtherPC;
	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.SwitchBrick.OnRep_InteractionValue
// (Final, Native, Private)

void USwitchBrick::OnRep_InteractionValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwitchBrick", "OnRep_InteractionValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.TeamScoreWidget.UpdateScore
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewScore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewMaxScore                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamScoreWidget::UpdateScore(int32 NewScore, int32 NewMaxScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamScoreWidget", "UpdateScore");

	Params::TeamScoreWidget_UpdateScore Parms{};

	Parms.NewScore = NewScore;
	Parms.NewMaxScore = NewMaxScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TeamScoreWidget.UpdateTeamAttitude
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETeamAttitude                           NewTeamAttitude                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamScoreWidget::UpdateTeamAttitude(ETeamAttitude NewTeamAttitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamScoreWidget", "UpdateTeamAttitude");

	Params::TeamScoreWidget_UpdateTeamAttitude Parms{};

	Parms.NewTeamAttitude = NewTeamAttitude;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TeamScoreWidget.UpdateTeamIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture2D*                       NewIcon                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTeamScoreWidget::UpdateTeamIcon(class UTexture2D* NewIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamScoreWidget", "UpdateTeamIcon");

	Params::TeamScoreWidget_UpdateTeamIcon Parms{};

	Parms.NewIcon = NewIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TeamScoreWidget.UpdateTeamName
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTeamScoreWidget::UpdateTeamName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TeamScoreWidget", "UpdateTeamName");

	Params::TeamScoreWidget_UpdateTeamName Parms{};

	Parms.NewName = std::move(NewName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TimespanPropertyWidget.SetTimespanPropertyValue
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimespan&                 NewValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimespanPropertyWidget::SetTimespanPropertyValue(EValueChangedEventType EventType, const struct FTimespan& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimespanPropertyWidget", "SetTimespanPropertyValue");

	Params::TimespanPropertyWidget_SetTimespanPropertyValue Parms{};

	Parms.EventType = EventType;
	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.TimespanPropertyWidget.UpdateTimespanProperty
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FTimespan&                 Timespan                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimespan&                 MinValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimespan&                 MaxValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowInfinite                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimespanPropertyWidget::UpdateTimespanProperty(const struct FTimespan& Timespan, const struct FTimespan& MinValue, const struct FTimespan& MaxValue, bool bAllowInfinite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimespanPropertyWidget", "UpdateTimespanProperty");

	Params::TimespanPropertyWidget_UpdateTimespanProperty Parms{};

	Parms.Timespan = std::move(Timespan);
	Parms.MinValue = std::move(MinValue);
	Parms.MaxValue = std::move(MaxValue);
	Parms.bAllowInfinite = bAllowInfinite;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.TooltipWidget.FadeIn
// (Event, Protected, BlueprintEvent)

void UTooltipWidget::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BrickRigs.TooltipWidget.UpdateTooltipContent
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTooltipContent&           InContent                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTooltipWidget::UpdateTooltipContent(const struct FTooltipContent& InContent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "UpdateTooltipContent");

	Params::TooltipWidget_UpdateTooltipContent Parms{};

	Parms.InContent = std::move(InContent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.Train.SetTrainTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATrain::SetTrainTrack(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Train", "SetTrainTrack");

	Params::Train_SetTrainTrack Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCFunctionLibrary.MakeOnlineUGCItemId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFluUGCItemIdWrapper             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFluUGCItemIdWrapper UUGCFunctionLibrary::MakeOnlineUGCItemId(const class FString& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UGCFunctionLibrary", "MakeOnlineUGCItemId");

	Params::UGCFunctionLibrary_MakeOnlineUGCItemId Parms{};

	Parms.ItemId = std::move(ItemId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UGCPropertyWidget.OnClickedButton
// (Final, Native, Public, BlueprintCallable)

void UUGCPropertyWidget::OnClickedButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCPropertyWidget", "OnClickedButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UGCPropertyWidget.UpdateItemsText
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NumSelected                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCPropertyWidget::UpdateItemsText(int32 NumSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCPropertyWidget", "UpdateItemsText");

	Params::UGCPropertyWidget_UpdateItemsText Parms{};

	Parms.NumSelected = NumSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCTaskPopupWidget.UpdateIsFinished
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewFinished                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewSuccess                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCTaskPopupWidget::UpdateIsFinished(bool bNewFinished, bool bNewSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTaskPopupWidget", "UpdateIsFinished");

	Params::UGCTaskPopupWidget_UpdateIsFinished Parms{};

	Parms.bNewFinished = bNewFinished;
	Parms.bNewSuccess = bNewSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UGCTaskPopupWidget.UpdateProgress
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUGCTaskPopupWidget::UpdateProgress(float NewProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGCTaskPopupWidget", "UpdateProgress");

	Params::UGCTaskPopupWidget_UpdateProgress Parms{};

	Parms.NewProgress = NewProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UIFunctionLibrary.BoolAsText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::BoolAsText(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "BoolAsText");

	Params::UIFunctionLibrary_BoolAsText Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.BrickSizeToText
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bZeroAsUndetermined                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::BrickSizeToText(const struct FVector& Size, const bool bZeroAsUndetermined)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "BrickSizeToText");

	Params::UIFunctionLibrary_BrickSizeToText Parms{};

	Parms.Size = std::move(Size);
	Parms.bZeroAsUndetermined = bZeroAsUndetermined;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.BrickUnitsToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             UnrealUnits                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bZeroAsUndetermined                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::BrickUnitsToText(const float UnrealUnits, const bool bZeroAsUndetermined)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "BrickUnitsToText");

	Params::UIFunctionLibrary_BrickUnitsToText Parms{};

	Parms.UnrealUnits = UnrealUnits;
	Parms.bZeroAsUndetermined = bZeroAsUndetermined;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.ConvertToRealUnits
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENumericValueType                       ValueType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIFunctionLibrary::ConvertToRealUnits(float Value, ENumericValueType ValueType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "ConvertToRealUnits");

	Params::UIFunctionLibrary_ConvertToRealUnits Parms{};

	Parms.Value = Value;
	Parms.ValueType = ValueType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.ConvertToUnrealUnits
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENumericValueType                       ValueType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIFunctionLibrary::ConvertToUnrealUnits(float Value, ENumericValueType ValueType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "ConvertToUnrealUnits");

	Params::UIFunctionLibrary_ConvertToUnrealUnits Parms{};

	Parms.Value = Value;
	Parms.ValueType = ValueType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.FilterTextForProfanity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText*                            OutText                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIFunctionLibrary::FilterTextForProfanity(const class FText& InText, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "FilterTextForProfanity");

	Params::UIFunctionLibrary_FilterTextForProfanity Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.FilterTextForURLs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText*                            OutText                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIFunctionLibrary::FilterTextForURLs(const class FText& InText, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "FilterTextForURLs");

	Params::UIFunctionLibrary_FilterTextForURLs Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.FindFirstWidgetInWidgetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UWidget*>&           Widgets                                                (ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FWidgetPathWrapper&        WidgetPath                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UUIFunctionLibrary::FindFirstWidgetInWidgetPath(const TArray<class UWidget*>& Widgets, const struct FWidgetPathWrapper& WidgetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "FindFirstWidgetInWidgetPath");

	Params::UIFunctionLibrary_FindFirstWidgetInWidgetPath Parms{};

	Parms.Widgets = std::move(Widgets);
	Parms.WidgetPath = std::move(WidgetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.GetAmmoTypeDisplayText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EAmmoType                               InAmmoType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLongName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::GetAmmoTypeDisplayText(EAmmoType InAmmoType, bool bLongName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "GetAmmoTypeDisplayText");

	Params::UIFunctionLibrary_GetAmmoTypeDisplayText Parms{};

	Parms.InAmmoType = InAmmoType;
	Parms.bLongName = bLongName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.GetCameraModeDisplayText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECameraMode                             InCameraMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::GetCameraModeDisplayText(ECameraMode InCameraMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "GetCameraModeDisplayText");

	Params::UIFunctionLibrary_GetCameraModeDisplayText Parms{};

	Parms.InCameraMode = InCameraMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.GetFireModeDisplayText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EFireMode                               InFireMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::GetFireModeDisplayText(EFireMode InFireMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "GetFireModeDisplayText");

	Params::UIFunctionLibrary_GetFireModeDisplayText Parms{};

	Parms.InFireMode = InFireMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.GetHUDVisibilityDisplayText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHUDVisibility                          InHUDVisibility                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::GetHUDVisibilityDisplayText(EHUDVisibility InHUDVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "GetHUDVisibilityDisplayText");

	Params::UIFunctionLibrary_GetHUDVisibilityDisplayText Parms{};

	Parms.InHUDVisibility = InHUDVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.GetMultidimensionalNumberDelimiter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ENumericValueType                 ValueType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::GetMultidimensionalNumberDelimiter(const ENumericValueType ValueType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "GetMultidimensionalNumberDelimiter");

	Params::UIFunctionLibrary_GetMultidimensionalNumberDelimiter Parms{};

	Parms.ValueType = ValueType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.GetUnitFormat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ENumericValueType                       ValueType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::GetUnitFormat(ENumericValueType ValueType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "GetUnitFormat");

	Params::UIFunctionLibrary_GetUnitFormat Parms{};

	Parms.ValueType = ValueType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.IsWidgetInWidgetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UWidget*                    Widget                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FWidgetPathWrapper&        WidgetPath                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIFunctionLibrary::IsWidgetInWidgetPath(const class UWidget* Widget, const struct FWidgetPathWrapper& WidgetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "IsWidgetInWidgetPath");

	Params::UIFunctionLibrary_IsWidgetInWidgetPath Parms{};

	Parms.Widget = Widget;
	Parms.WidgetPath = std::move(WidgetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.NumberToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENumericValueType                       ValueType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxFractionalDigits                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeUnits                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysSign                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::NumberToText(float Value, ENumericValueType ValueType, int32 MaxFractionalDigits, bool bIncludeUnits, bool bAlwaysSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "NumberToText");

	Params::UIFunctionLibrary_NumberToText Parms{};

	Parms.Value = Value;
	Parms.ValueType = ValueType;
	Parms.MaxFractionalDigits = MaxFractionalDigits;
	Parms.bIncludeUnits = bIncludeUnits;
	Parms.bAlwaysSign = bAlwaysSign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UIFunctionLibrary.OpenURLInExternalBrowser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFunctionLibrary::OpenURLInExternalBrowser(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "OpenURLInExternalBrowser");

	Params::UIFunctionLibrary_OpenURLInExternalBrowser Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UIFunctionLibrary.TimespanAsText
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTimespan&                 Timespan                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUIFunctionLibrary::TimespanAsText(const struct FTimespan& Timespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFunctionLibrary", "TimespanAsText");

	Params::UIFunctionLibrary_TimespanAsText Parms{};

	Parms.Timespan = std::move(Timespan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BrickRigs.UserIdPropertyWidget.OnUserIdTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EValueChangedEventType                  EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUserIdPropertyWidget::OnUserIdTextChanged(const class FText& Text, EValueChangedEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserIdPropertyWidget", "OnUserIdTextChanged");

	Params::UserIdPropertyWidget_OnUserIdTextChanged Parms{};

	Parms.Text = std::move(Text);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.UserIdPropertyWidget.UpdateUserId
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InUserId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bIsValid                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUserIdPropertyWidget::UpdateUserId(const class FText& InUserId, const bool bIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserIdPropertyWidget", "UpdateUserId");

	Params::UserIdPropertyWidget_UpdateUserId Parms{};

	Parms.InUserId = std::move(InUserId);
	Parms.bIsValid = bIsValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UserIdPropertyWidget.UpdateUsername
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InUsername                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUserIdPropertyWidget::UpdateUsername(const class FText& InUsername)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserIdPropertyWidget", "UpdateUsername");

	Params::UserIdPropertyWidget_UpdateUsername Parms{};

	Parms.InUsername = std::move(InUsername);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.UserIdPropertyWidget.ViewProfileInBrowser
// (Final, Native, Public, BlueprintCallable)

void UUserIdPropertyWidget::ViewProfileInBrowser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserIdPropertyWidget", "ViewProfileInBrowser");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VehicleIconWidget.UpdateVehicleIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsLocalPlayer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewCanBeDamaged                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVehiclePinMode                         NewPinMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleIconWidget::UpdateVehicleIcon(bool bNewIsLocalPlayer, bool bNewCanBeDamaged, EVehiclePinMode NewPinMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleIconWidget", "UpdateVehicleIcon");

	Params::VehicleIconWidget_UpdateVehicleIcon Parms{};

	Parms.bNewIsLocalPlayer = bNewIsLocalPlayer;
	Parms.bNewCanBeDamaged = bNewCanBeDamaged;
	Parms.NewPinMode = NewPinMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.VideoSettingsPageWidget.ApplyVideoSettings
// (Final, Native, Protected, BlueprintCallable)

void UVideoSettingsPageWidget::ApplyVideoSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoSettingsPageWidget", "ApplyVideoSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VideoSettingsPageWidget.RevertVideoSettings
// (Final, Native, Protected, BlueprintCallable)

void UVideoSettingsPageWidget::RevertVideoSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoSettingsPageWidget", "RevertVideoSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BrickRigs.VideoSettingsPageWidget.UpdateApplyButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanApply                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVideoSettingsPageWidget::UpdateApplyButton(bool bCanApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoSettingsPageWidget", "UpdateApplyButton");

	Params::VideoSettingsPageWidget_UpdateApplyButton Parms{};

	Parms.bCanApply = bCanApply;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BrickRigs.VideoSettingsPageWidget.AreVideoSettingsDirty
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVideoSettingsPageWidget::AreVideoSettingsDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoSettingsPageWidget", "AreVideoSettingsDirty");

	Params::VideoSettingsPageWidget_AreVideoSettingsDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

