#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BrickRigs

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "BrickRigs_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "AIModule_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FluUGC_structs.hpp"


namespace SDK::Params
{

// Function BrickRigs.PagedListEntryWidget.UpdateButtonSelected
// 0x0001 (0x0001 - 0x0000)
struct PagedListEntryWidget_UpdateButtonSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListEntryWidget_UpdateButtonSelected) == 0x000001, "Wrong alignment on PagedListEntryWidget_UpdateButtonSelected");
static_assert(sizeof(PagedListEntryWidget_UpdateButtonSelected) == 0x000001, "Wrong size on PagedListEntryWidget_UpdateButtonSelected");
static_assert(offsetof(PagedListEntryWidget_UpdateButtonSelected, bNewSelected) == 0x000000, "Member 'PagedListEntryWidget_UpdateButtonSelected::bNewSelected' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBodyTransform
// 0x0030 (0x0030 - 0x0000)
struct BrickEditorObject_GetBodyTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBodyTransform) == 0x000010, "Wrong alignment on BrickEditorObject_GetBodyTransform");
static_assert(sizeof(BrickEditorObject_GetBodyTransform) == 0x000030, "Wrong size on BrickEditorObject_GetBodyTransform");
static_assert(offsetof(BrickEditorObject_GetBodyTransform, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBodyTransform::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditor
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorObject_GetBrickEditor final
{
public:
	class ABrickEditor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditor) == 0x000008, "Wrong alignment on BrickEditorObject_GetBrickEditor");
static_assert(sizeof(BrickEditorObject_GetBrickEditor) == 0x000008, "Wrong size on BrickEditorObject_GetBrickEditor");
static_assert(offsetof(BrickEditorObject_GetBrickEditor, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectBoundsOrigin
// 0x000C (0x000C - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectBoundsOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectBoundsOrigin) == 0x000004, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectBoundsOrigin");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectBoundsOrigin) == 0x00000C, "Wrong size on BrickEditorObject_GetBrickEditorObjectBoundsOrigin");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectBoundsOrigin, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectBoundsOrigin::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectDisplayName
// 0x0018 (0x0018 - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectDisplayName) == 0x000008, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectDisplayName");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectDisplayName) == 0x000018, "Wrong size on BrickEditorObject_GetBrickEditorObjectDisplayName");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectDisplayName, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectLocalBounds
// 0x001C (0x001C - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectLocalBounds final
{
public:
	struct FVector                                OutBoundsMin;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBoundsMax;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectLocalBounds) == 0x000004, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectLocalBounds");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectLocalBounds) == 0x00001C, "Wrong size on BrickEditorObject_GetBrickEditorObjectLocalBounds");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectLocalBounds, OutBoundsMin) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectLocalBounds::OutBoundsMin' has a wrong offset!");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectLocalBounds, OutBoundsMax) == 0x00000C, "Member 'BrickEditorObject_GetBrickEditorObjectLocalBounds::OutBoundsMax' has a wrong offset!");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectLocalBounds, ReturnValue) == 0x000018, "Member 'BrickEditorObject_GetBrickEditorObjectLocalBounds::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectSpawnLocation
// 0x000C (0x000C - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectSpawnLocation) == 0x000004, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectSpawnLocation");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectSpawnLocation) == 0x00000C, "Wrong size on BrickEditorObject_GetBrickEditorObjectSpawnLocation");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectSpawnLocation, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectSpawnLocation::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectSpawnRotation
// 0x000C (0x000C - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectSpawnRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectSpawnRotation) == 0x000004, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectSpawnRotation");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectSpawnRotation) == 0x00000C, "Wrong size on BrickEditorObject_GetBrickEditorObjectSpawnRotation");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectSpawnRotation, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectSpawnRotation::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectSpawnTransform) == 0x000010, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectSpawnTransform");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectSpawnTransform) == 0x000030, "Wrong size on BrickEditorObject_GetBrickEditorObjectSpawnTransform");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectSpawnTransform, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectSpawnTransform::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorObjectTypeDisplayName
// 0x0018 (0x0018 - 0x0000)
struct BrickEditorObject_GetBrickEditorObjectTypeDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorObjectTypeDisplayName) == 0x000008, "Wrong alignment on BrickEditorObject_GetBrickEditorObjectTypeDisplayName");
static_assert(sizeof(BrickEditorObject_GetBrickEditorObjectTypeDisplayName) == 0x000018, "Wrong size on BrickEditorObject_GetBrickEditorObjectTypeDisplayName");
static_assert(offsetof(BrickEditorObject_GetBrickEditorObjectTypeDisplayName, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorObjectTypeDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetBrickEditorStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorObject_GetBrickEditorStaticInfo final
{
public:
	const class UBrickEditorStaticInfo*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetBrickEditorStaticInfo) == 0x000008, "Wrong alignment on BrickEditorObject_GetBrickEditorStaticInfo");
static_assert(sizeof(BrickEditorObject_GetBrickEditorStaticInfo) == 0x000008, "Wrong size on BrickEditorObject_GetBrickEditorStaticInfo");
static_assert(offsetof(BrickEditorObject_GetBrickEditorStaticInfo, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetBrickEditorStaticInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetEditorInterface
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorObject_GetEditorInterface final
{
public:
	class UBrickEditorInterfaceComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetEditorInterface) == 0x000008, "Wrong alignment on BrickEditorObject_GetEditorInterface");
static_assert(sizeof(BrickEditorObject_GetEditorInterface) == 0x000008, "Wrong size on BrickEditorObject_GetEditorInterface");
static_assert(offsetof(BrickEditorObject_GetEditorInterface, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetEditorInterface::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetEditorObjectID
// 0x0002 (0x0002 - 0x0000)
struct BrickEditorObject_GetEditorObjectID final
{
public:
	struct FBrickEditorObjectID                   ReturnValue;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetEditorObjectID) == 0x000002, "Wrong alignment on BrickEditorObject_GetEditorObjectID");
static_assert(sizeof(BrickEditorObject_GetEditorObjectID) == 0x000002, "Wrong size on BrickEditorObject_GetEditorObjectID");
static_assert(offsetof(BrickEditorObject_GetEditorObjectID, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetEditorObjectID::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetRootComponent
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorObject_GetRootComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetRootComponent) == 0x000008, "Wrong alignment on BrickEditorObject_GetRootComponent");
static_assert(sizeof(BrickEditorObject_GetRootComponent) == 0x000008, "Wrong size on BrickEditorObject_GetRootComponent");
static_assert(offsetof(BrickEditorObject_GetRootComponent, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetRootComponent::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorObject_GetStaticInfo final
{
public:
	const class UBrickEditorObjectStaticInfo*     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetStaticInfo) == 0x000008, "Wrong alignment on BrickEditorObject_GetStaticInfo");
static_assert(sizeof(BrickEditorObject_GetStaticInfo) == 0x000008, "Wrong size on BrickEditorObject_GetStaticInfo");
static_assert(offsetof(BrickEditorObject_GetStaticInfo, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetStaticInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetStaticInfoClass
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorObject_GetStaticInfoClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetStaticInfoClass) == 0x000008, "Wrong alignment on BrickEditorObject_GetStaticInfoClass");
static_assert(sizeof(BrickEditorObject_GetStaticInfoClass) == 0x000008, "Wrong size on BrickEditorObject_GetStaticInfoClass");
static_assert(offsetof(BrickEditorObject_GetStaticInfoClass, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetStaticInfoClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.GetWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct BrickEditorObject_GetWorldTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_GetWorldTransform) == 0x000010, "Wrong alignment on BrickEditorObject_GetWorldTransform");
static_assert(sizeof(BrickEditorObject_GetWorldTransform) == 0x000030, "Wrong size on BrickEditorObject_GetWorldTransform");
static_assert(offsetof(BrickEditorObject_GetWorldTransform, ReturnValue) == 0x000000, "Member 'BrickEditorObject_GetWorldTransform::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.IsBrickEditorObjectBeingInitialized
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorObject_IsBrickEditorObjectBeingInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_IsBrickEditorObjectBeingInitialized) == 0x000001, "Wrong alignment on BrickEditorObject_IsBrickEditorObjectBeingInitialized");
static_assert(sizeof(BrickEditorObject_IsBrickEditorObjectBeingInitialized) == 0x000001, "Wrong size on BrickEditorObject_IsBrickEditorObjectBeingInitialized");
static_assert(offsetof(BrickEditorObject_IsBrickEditorObjectBeingInitialized, ReturnValue) == 0x000000, "Member 'BrickEditorObject_IsBrickEditorObjectBeingInitialized::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.IsBrickEditorObjectBeingUninitialized
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorObject_IsBrickEditorObjectBeingUninitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_IsBrickEditorObjectBeingUninitialized) == 0x000001, "Wrong alignment on BrickEditorObject_IsBrickEditorObjectBeingUninitialized");
static_assert(sizeof(BrickEditorObject_IsBrickEditorObjectBeingUninitialized) == 0x000001, "Wrong size on BrickEditorObject_IsBrickEditorObjectBeingUninitialized");
static_assert(offsetof(BrickEditorObject_IsBrickEditorObjectBeingUninitialized, ReturnValue) == 0x000000, "Member 'BrickEditorObject_IsBrickEditorObjectBeingUninitialized::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.IsBrickEditorObjectInitialized
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorObject_IsBrickEditorObjectInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_IsBrickEditorObjectInitialized) == 0x000001, "Wrong alignment on BrickEditorObject_IsBrickEditorObjectInitialized");
static_assert(sizeof(BrickEditorObject_IsBrickEditorObjectInitialized) == 0x000001, "Wrong size on BrickEditorObject_IsBrickEditorObjectInitialized");
static_assert(offsetof(BrickEditorObject_IsBrickEditorObjectInitialized, ReturnValue) == 0x000000, "Member 'BrickEditorObject_IsBrickEditorObjectInitialized::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.IsInEditor
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorObject_IsInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_IsInEditor) == 0x000001, "Wrong alignment on BrickEditorObject_IsInEditor");
static_assert(sizeof(BrickEditorObject_IsInEditor) == 0x000001, "Wrong size on BrickEditorObject_IsInEditor");
static_assert(offsetof(BrickEditorObject_IsInEditor, ReturnValue) == 0x000000, "Member 'BrickEditorObject_IsInEditor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.IsInThumbnailRender
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorObject_IsInThumbnailRender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_IsInThumbnailRender) == 0x000001, "Wrong alignment on BrickEditorObject_IsInThumbnailRender");
static_assert(sizeof(BrickEditorObject_IsInThumbnailRender) == 0x000001, "Wrong size on BrickEditorObject_IsInThumbnailRender");
static_assert(offsetof(BrickEditorObject_IsInThumbnailRender, ReturnValue) == 0x000000, "Member 'BrickEditorObject_IsInThumbnailRender::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorObject.IsSpawned
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorObject_IsSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorObject_IsSpawned) == 0x000001, "Wrong alignment on BrickEditorObject_IsSpawned");
static_assert(sizeof(BrickEditorObject_IsSpawned) == 0x000001, "Wrong size on BrickEditorObject_IsSpawned");
static_assert(offsetof(BrickEditorObject_IsSpawned, ReturnValue) == 0x000000, "Member 'BrickEditorObject_IsSpawned::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.ClusterConsumeFuel
// 0x0008 (0x0008 - 0x0000)
struct Brick_ClusterConsumeFuel final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Brick_ClusterConsumeFuel) == 0x000004, "Wrong alignment on Brick_ClusterConsumeFuel");
static_assert(sizeof(Brick_ClusterConsumeFuel) == 0x000008, "Wrong size on Brick_ClusterConsumeFuel");
static_assert(offsetof(Brick_ClusterConsumeFuel, Amount) == 0x000000, "Member 'Brick_ClusterConsumeFuel::Amount' has a wrong offset!");
static_assert(offsetof(Brick_ClusterConsumeFuel, ReturnValue) == 0x000004, "Member 'Brick_ClusterConsumeFuel::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.ExtinguishFire
// 0x0001 (0x0001 - 0x0000)
struct Brick_ExtinguishFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_ExtinguishFire) == 0x000001, "Wrong alignment on Brick_ExtinguishFire");
static_assert(sizeof(Brick_ExtinguishFire) == 0x000001, "Wrong size on Brick_ExtinguishFire");
static_assert(offsetof(Brick_ExtinguishFire, ReturnValue) == 0x000000, "Member 'Brick_ExtinguishFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.Interact_PickUp
// 0x0008 (0x0008 - 0x0000)
struct Brick_Interact_PickUp final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_Interact_PickUp) == 0x000008, "Wrong alignment on Brick_Interact_PickUp");
static_assert(sizeof(Brick_Interact_PickUp) == 0x000008, "Wrong size on Brick_Interact_PickUp");
static_assert(offsetof(Brick_Interact_PickUp, OtherPC) == 0x000000, "Member 'Brick_Interact_PickUp::OtherPC' has a wrong offset!");

// Function BrickRigs.Brick.SetIsBrickBurnt
// 0x0001 (0x0001 - 0x0000)
struct Brick_SetIsBrickBurnt final
{
public:
	bool                                          bNewBurnt;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_SetIsBrickBurnt) == 0x000001, "Wrong alignment on Brick_SetIsBrickBurnt");
static_assert(sizeof(Brick_SetIsBrickBurnt) == 0x000001, "Wrong size on Brick_SetIsBrickBurnt");
static_assert(offsetof(Brick_SetIsBrickBurnt, bNewBurnt) == 0x000000, "Member 'Brick_SetIsBrickBurnt::bNewBurnt' has a wrong offset!");

// Function BrickRigs.Brick.SetIsBrickDamaged
// 0x0001 (0x0001 - 0x0000)
struct Brick_SetIsBrickDamaged final
{
public:
	bool                                          bNewDamaged;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_SetIsBrickDamaged) == 0x000001, "Wrong alignment on Brick_SetIsBrickDamaged");
static_assert(sizeof(Brick_SetIsBrickDamaged) == 0x000001, "Wrong size on Brick_SetIsBrickDamaged");
static_assert(offsetof(Brick_SetIsBrickDamaged, bNewDamaged) == 0x000000, "Member 'Brick_SetIsBrickDamaged::bNewDamaged' has a wrong offset!");

// Function BrickRigs.Brick.SetOnFire
// 0x0001 (0x0001 - 0x0000)
struct Brick_SetOnFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_SetOnFire) == 0x000001, "Wrong alignment on Brick_SetOnFire");
static_assert(sizeof(Brick_SetOnFire) == 0x000001, "Wrong size on Brick_SetOnFire");
static_assert(offsetof(Brick_SetOnFire, ReturnValue) == 0x000000, "Member 'Brick_SetOnFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.Tick
// 0x0004 (0x0004 - 0x0000)
struct Brick_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_Tick) == 0x000004, "Wrong alignment on Brick_Tick");
static_assert(sizeof(Brick_Tick) == 0x000004, "Wrong size on Brick_Tick");
static_assert(offsetof(Brick_Tick, DeltaTime) == 0x000000, "Member 'Brick_Tick::DeltaTime' has a wrong offset!");

// Function BrickRigs.Brick.UpdateBrickTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct Brick_UpdateBrickTickEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_UpdateBrickTickEnabled) == 0x000001, "Wrong alignment on Brick_UpdateBrickTickEnabled");
static_assert(sizeof(Brick_UpdateBrickTickEnabled) == 0x000001, "Wrong size on Brick_UpdateBrickTickEnabled");
static_assert(offsetof(Brick_UpdateBrickTickEnabled, ReturnValue) == 0x000000, "Member 'Brick_UpdateBrickTickEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.CanBrickBurn
// 0x0001 (0x0001 - 0x0000)
struct Brick_CanBrickBurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_CanBrickBurn) == 0x000001, "Wrong alignment on Brick_CanBrickBurn");
static_assert(sizeof(Brick_CanBrickBurn) == 0x000001, "Wrong size on Brick_CanBrickBurn");
static_assert(offsetof(Brick_CanBrickBurn, ReturnValue) == 0x000000, "Member 'Brick_CanBrickBurn::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.ClusterRootHasAnyFuel
// 0x0001 (0x0001 - 0x0000)
struct Brick_ClusterRootHasAnyFuel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_ClusterRootHasAnyFuel) == 0x000001, "Wrong alignment on Brick_ClusterRootHasAnyFuel");
static_assert(sizeof(Brick_ClusterRootHasAnyFuel) == 0x000001, "Wrong size on Brick_ClusterRootHasAnyFuel");
static_assert(offsetof(Brick_ClusterRootHasAnyFuel, ReturnValue) == 0x000000, "Member 'Brick_ClusterRootHasAnyFuel::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.GetBrickClusterRoot
// 0x0008 (0x0008 - 0x0000)
struct Brick_GetBrickClusterRoot final
{
public:
	class UBrick*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_GetBrickClusterRoot) == 0x000008, "Wrong alignment on Brick_GetBrickClusterRoot");
static_assert(sizeof(Brick_GetBrickClusterRoot) == 0x000008, "Wrong size on Brick_GetBrickClusterRoot");
static_assert(offsetof(Brick_GetBrickClusterRoot, ReturnValue) == 0x000000, "Member 'Brick_GetBrickClusterRoot::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.GetBrickConnections
// 0x0010 (0x0010 - 0x0000)
struct Brick_GetBrickConnections final
{
public:
	TArray<class UBrickConnection*>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_GetBrickConnections) == 0x000008, "Wrong alignment on Brick_GetBrickConnections");
static_assert(sizeof(Brick_GetBrickConnections) == 0x000010, "Wrong size on Brick_GetBrickConnections");
static_assert(offsetof(Brick_GetBrickConnections, ReturnValue) == 0x000000, "Member 'Brick_GetBrickConnections::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.GetBrickPartRoot
// 0x0008 (0x0008 - 0x0000)
struct Brick_GetBrickPartRoot final
{
public:
	class UBrick*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_GetBrickPartRoot) == 0x000008, "Wrong alignment on Brick_GetBrickPartRoot");
static_assert(sizeof(Brick_GetBrickPartRoot) == 0x000008, "Wrong size on Brick_GetBrickPartRoot");
static_assert(offsetof(Brick_GetBrickPartRoot, ReturnValue) == 0x000000, "Member 'Brick_GetBrickPartRoot::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.GetVehicle
// 0x0008 (0x0008 - 0x0000)
struct Brick_GetVehicle final
{
public:
	class ABrickVehicle*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_GetVehicle) == 0x000008, "Wrong alignment on Brick_GetVehicle");
static_assert(sizeof(Brick_GetVehicle) == 0x000008, "Wrong size on Brick_GetVehicle");
static_assert(offsetof(Brick_GetVehicle, ReturnValue) == 0x000000, "Member 'Brick_GetVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.GetVehicleComponent
// 0x0008 (0x0008 - 0x0000)
struct Brick_GetVehicleComponent final
{
public:
	class UBrickVehicleComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_GetVehicleComponent) == 0x000008, "Wrong alignment on Brick_GetVehicleComponent");
static_assert(sizeof(Brick_GetVehicleComponent) == 0x000008, "Wrong size on Brick_GetVehicleComponent");
static_assert(offsetof(Brick_GetVehicleComponent, ReturnValue) == 0x000000, "Member 'Brick_GetVehicleComponent::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.GetVehicleStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct Brick_GetVehicleStaticInfo final
{
public:
	const class UBrickVehicleStaticInfo*          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_GetVehicleStaticInfo) == 0x000008, "Wrong alignment on Brick_GetVehicleStaticInfo");
static_assert(sizeof(Brick_GetVehicleStaticInfo) == 0x000008, "Wrong size on Brick_GetVehicleStaticInfo");
static_assert(offsetof(Brick_GetVehicleStaticInfo, ReturnValue) == 0x000000, "Member 'Brick_GetVehicleStaticInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsBrickBurnt
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsBrickBurnt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsBrickBurnt) == 0x000001, "Wrong alignment on Brick_IsBrickBurnt");
static_assert(sizeof(Brick_IsBrickBurnt) == 0x000001, "Wrong size on Brick_IsBrickBurnt");
static_assert(offsetof(Brick_IsBrickBurnt, ReturnValue) == 0x000000, "Member 'Brick_IsBrickBurnt::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsBrickClusterRoot
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsBrickClusterRoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsBrickClusterRoot) == 0x000001, "Wrong alignment on Brick_IsBrickClusterRoot");
static_assert(sizeof(Brick_IsBrickClusterRoot) == 0x000001, "Wrong size on Brick_IsBrickClusterRoot");
static_assert(offsetof(Brick_IsBrickClusterRoot, ReturnValue) == 0x000000, "Member 'Brick_IsBrickClusterRoot::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsBrickDamaged
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsBrickDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsBrickDamaged) == 0x000001, "Wrong alignment on Brick_IsBrickDamaged");
static_assert(sizeof(Brick_IsBrickDamaged) == 0x000001, "Wrong size on Brick_IsBrickDamaged");
static_assert(offsetof(Brick_IsBrickDamaged, ReturnValue) == 0x000000, "Member 'Brick_IsBrickDamaged::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsBrickPartRoot
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsBrickPartRoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsBrickPartRoot) == 0x000001, "Wrong alignment on Brick_IsBrickPartRoot");
static_assert(sizeof(Brick_IsBrickPartRoot) == 0x000001, "Wrong size on Brick_IsBrickPartRoot");
static_assert(offsetof(Brick_IsBrickPartRoot, ReturnValue) == 0x000000, "Member 'Brick_IsBrickPartRoot::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsBrickTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsBrickTickEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsBrickTickEnabled) == 0x000001, "Wrong alignment on Brick_IsBrickTickEnabled");
static_assert(sizeof(Brick_IsBrickTickEnabled) == 0x000001, "Wrong size on Brick_IsBrickTickEnabled");
static_assert(offsetof(Brick_IsBrickTickEnabled, ReturnValue) == 0x000000, "Member 'Brick_IsBrickTickEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsConnectedToAnyBrick
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsConnectedToAnyBrick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsConnectedToAnyBrick) == 0x000001, "Wrong alignment on Brick_IsConnectedToAnyBrick");
static_assert(sizeof(Brick_IsConnectedToAnyBrick) == 0x000001, "Wrong size on Brick_IsConnectedToAnyBrick");
static_assert(offsetof(Brick_IsConnectedToAnyBrick, ReturnValue) == 0x000000, "Member 'Brick_IsConnectedToAnyBrick::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsConnectedToRoot
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsConnectedToRoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsConnectedToRoot) == 0x000001, "Wrong alignment on Brick_IsConnectedToRoot");
static_assert(sizeof(Brick_IsConnectedToRoot) == 0x000001, "Wrong size on Brick_IsConnectedToRoot");
static_assert(offsetof(Brick_IsConnectedToRoot, ReturnValue) == 0x000000, "Member 'Brick_IsConnectedToRoot::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsControllable
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsControllable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsControllable) == 0x000001, "Wrong alignment on Brick_IsControllable");
static_assert(sizeof(Brick_IsControllable) == 0x000001, "Wrong size on Brick_IsControllable");
static_assert(offsetof(Brick_IsControllable, ReturnValue) == 0x000000, "Member 'Brick_IsControllable::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.IsOnFire
// 0x0001 (0x0001 - 0x0000)
struct Brick_IsOnFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_IsOnFire) == 0x000001, "Wrong alignment on Brick_IsOnFire");
static_assert(sizeof(Brick_IsOnFire) == 0x000001, "Wrong size on Brick_IsOnFire");
static_assert(offsetof(Brick_IsOnFire, ReturnValue) == 0x000000, "Member 'Brick_IsOnFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.Brick.ShouldTick
// 0x0001 (0x0001 - 0x0000)
struct Brick_ShouldTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Brick_ShouldTick) == 0x000001, "Wrong alignment on Brick_ShouldTick");
static_assert(sizeof(Brick_ShouldTick) == 0x000001, "Wrong size on Brick_ShouldTick");
static_assert(offsetof(Brick_ShouldTick, ReturnValue) == 0x000000, "Member 'Brick_ShouldTick::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickBorder.SetBrushStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickBorder_SetBrushStyle final
{
public:
	EBrickUIBrushStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickBorder_SetBrushStyle) == 0x000001, "Wrong alignment on BrickBorder_SetBrushStyle");
static_assert(sizeof(BrickBorder_SetBrushStyle) == 0x000001, "Wrong size on BrickBorder_SetBrushStyle");
static_assert(offsetof(BrickBorder_SetBrushStyle, NewStyle) == 0x000000, "Member 'BrickBorder_SetBrushStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickBorder.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickBorder_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickBorder_SetColorStyle) == 0x000001, "Wrong alignment on BrickBorder_SetColorStyle");
static_assert(sizeof(BrickBorder_SetColorStyle) == 0x000001, "Wrong size on BrickBorder_SetColorStyle");
static_assert(offsetof(BrickBorder_SetColorStyle, NewStyle) == 0x000000, "Member 'BrickBorder_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickBorder.SetPaddingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickBorder_SetPaddingStyle final
{
public:
	EBrickUIPaddingStyle                          NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickBorder_SetPaddingStyle) == 0x000001, "Wrong alignment on BrickBorder_SetPaddingStyle");
static_assert(sizeof(BrickBorder_SetPaddingStyle) == 0x000001, "Wrong size on BrickBorder_SetPaddingStyle");
static_assert(offsetof(BrickBorder_SetPaddingStyle, NewStyle) == 0x000000, "Member 'BrickBorder_SetPaddingStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickBorder.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct BrickBorder_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickBorder_SetStyleState) == 0x000001, "Wrong alignment on BrickBorder_SetStyleState");
static_assert(sizeof(BrickBorder_SetStyleState) == 0x000001, "Wrong size on BrickBorder_SetStyleState");
static_assert(offsetof(BrickBorder_SetStyleState, NewState) == 0x000000, "Member 'BrickBorder_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.CameraBrickWidget.UpdateTargetRange
// 0x0008 (0x0008 - 0x0000)
struct CameraBrickWidget_UpdateTargetRange final
{
public:
	bool                                          bHitSomething;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBrickWidget_UpdateTargetRange) == 0x000004, "Wrong alignment on CameraBrickWidget_UpdateTargetRange");
static_assert(sizeof(CameraBrickWidget_UpdateTargetRange) == 0x000008, "Wrong size on CameraBrickWidget_UpdateTargetRange");
static_assert(offsetof(CameraBrickWidget_UpdateTargetRange, bHitSomething) == 0x000000, "Member 'CameraBrickWidget_UpdateTargetRange::bHitSomething' has a wrong offset!");
static_assert(offsetof(CameraBrickWidget_UpdateTargetRange, Distance) == 0x000004, "Member 'CameraBrickWidget_UpdateTargetRange::Distance' has a wrong offset!");

// Function BrickRigs.HUDIconWidget.SetIconColorStyle
// 0x0001 (0x0001 - 0x0000)
struct HUDIconWidget_SetIconColorStyle final
{
public:
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconWidget_SetIconColorStyle) == 0x000001, "Wrong alignment on HUDIconWidget_SetIconColorStyle");
static_assert(sizeof(HUDIconWidget_SetIconColorStyle) == 0x000001, "Wrong size on HUDIconWidget_SetIconColorStyle");
static_assert(offsetof(HUDIconWidget_SetIconColorStyle, NewColorStyle) == 0x000000, "Member 'HUDIconWidget_SetIconColorStyle::NewColorStyle' has a wrong offset!");

// Function BrickRigs.HUDIconWidget.SetIconSlot
// 0x0008 (0x0008 - 0x0000)
struct HUDIconWidget_SetIconSlot final
{
public:
	struct FBrickUIIconSlot                       NewSlot;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconWidget_SetIconSlot) == 0x000004, "Wrong alignment on HUDIconWidget_SetIconSlot");
static_assert(sizeof(HUDIconWidget_SetIconSlot) == 0x000008, "Wrong size on HUDIconWidget_SetIconSlot");
static_assert(offsetof(HUDIconWidget_SetIconSlot, NewSlot) == 0x000000, "Member 'HUDIconWidget_SetIconSlot::NewSlot' has a wrong offset!");

// Function BrickRigs.HUDIconWidget.UpdateIconRotation
// 0x0004 (0x0004 - 0x0000)
struct HUDIconWidget_UpdateIconRotation final
{
public:
	float                                         NewRotation;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconWidget_UpdateIconRotation) == 0x000004, "Wrong alignment on HUDIconWidget_UpdateIconRotation");
static_assert(sizeof(HUDIconWidget_UpdateIconRotation) == 0x000004, "Wrong size on HUDIconWidget_UpdateIconRotation");
static_assert(offsetof(HUDIconWidget_UpdateIconRotation, NewRotation) == 0x000000, "Member 'HUDIconWidget_UpdateIconRotation::NewRotation' has a wrong offset!");

// Function BrickRigs.HUDIconWidget.UpdateIconStyle
// 0x0002 (0x0002 - 0x0000)
struct HUDIconWidget_UpdateIconStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            InStyleState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconWidget_UpdateIconStyle) == 0x000001, "Wrong alignment on HUDIconWidget_UpdateIconStyle");
static_assert(sizeof(HUDIconWidget_UpdateIconStyle) == 0x000002, "Wrong size on HUDIconWidget_UpdateIconStyle");
static_assert(offsetof(HUDIconWidget_UpdateIconStyle, InColorStyle) == 0x000000, "Member 'HUDIconWidget_UpdateIconStyle::InColorStyle' has a wrong offset!");
static_assert(offsetof(HUDIconWidget_UpdateIconStyle, InStyleState) == 0x000001, "Member 'HUDIconWidget_UpdateIconStyle::InStyleState' has a wrong offset!");

// Function BrickRigs.HUDIconWidget.GetIconDisplayName
// 0x0018 (0x0018 - 0x0000)
struct HUDIconWidget_GetIconDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconWidget_GetIconDisplayName) == 0x000008, "Wrong alignment on HUDIconWidget_GetIconDisplayName");
static_assert(sizeof(HUDIconWidget_GetIconDisplayName) == 0x000018, "Wrong size on HUDIconWidget_GetIconDisplayName");
static_assert(offsetof(HUDIconWidget_GetIconDisplayName, ReturnValue) == 0x000000, "Member 'HUDIconWidget_GetIconDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.HUDIconWidget.GetIconWorldRotation
// 0x0008 (0x0008 - 0x0000)
struct HUDIconWidget_GetIconWorldRotation final
{
public:
	float                                         OutRotation;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDIconWidget_GetIconWorldRotation) == 0x000004, "Wrong alignment on HUDIconWidget_GetIconWorldRotation");
static_assert(sizeof(HUDIconWidget_GetIconWorldRotation) == 0x000008, "Wrong size on HUDIconWidget_GetIconWorldRotation");
static_assert(offsetof(HUDIconWidget_GetIconWorldRotation, OutRotation) == 0x000000, "Member 'HUDIconWidget_GetIconWorldRotation::OutRotation' has a wrong offset!");
static_assert(offsetof(HUDIconWidget_GetIconWorldRotation, ReturnValue) == 0x000004, "Member 'HUDIconWidget_GetIconWorldRotation::ReturnValue' has a wrong offset!");

// Function BrickRigs.AdminLoginWidget.OnTextChanged
// 0x0020 (0x0020 - 0x0000)
struct AdminLoginWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdminLoginWidget_OnTextChanged) == 0x000008, "Wrong alignment on AdminLoginWidget_OnTextChanged");
static_assert(sizeof(AdminLoginWidget_OnTextChanged) == 0x000020, "Wrong size on AdminLoginWidget_OnTextChanged");
static_assert(offsetof(AdminLoginWidget_OnTextChanged, Text) == 0x000000, "Member 'AdminLoginWidget_OnTextChanged::Text' has a wrong offset!");
static_assert(offsetof(AdminLoginWidget_OnTextChanged, EventType) == 0x000018, "Member 'AdminLoginWidget_OnTextChanged::EventType' has a wrong offset!");

// Function BrickRigs.AdminLoginWidget.UpdateCanEverBeAdmin
// 0x0001 (0x0001 - 0x0000)
struct AdminLoginWidget_UpdateCanEverBeAdmin final
{
public:
	bool                                          bCanBeAdmin;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdminLoginWidget_UpdateCanEverBeAdmin) == 0x000001, "Wrong alignment on AdminLoginWidget_UpdateCanEverBeAdmin");
static_assert(sizeof(AdminLoginWidget_UpdateCanEverBeAdmin) == 0x000001, "Wrong size on AdminLoginWidget_UpdateCanEverBeAdmin");
static_assert(offsetof(AdminLoginWidget_UpdateCanEverBeAdmin, bCanBeAdmin) == 0x000000, "Member 'AdminLoginWidget_UpdateCanEverBeAdmin::bCanBeAdmin' has a wrong offset!");

// Function BrickRigs.AdminLoginWidget.UpdateIsAdmin
// 0x0001 (0x0001 - 0x0000)
struct AdminLoginWidget_UpdateIsAdmin final
{
public:
	bool                                          bNewIsAdmin;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdminLoginWidget_UpdateIsAdmin) == 0x000001, "Wrong alignment on AdminLoginWidget_UpdateIsAdmin");
static_assert(sizeof(AdminLoginWidget_UpdateIsAdmin) == 0x000001, "Wrong size on AdminLoginWidget_UpdateIsAdmin");
static_assert(offsetof(AdminLoginWidget_UpdateIsAdmin, bNewIsAdmin) == 0x000000, "Member 'AdminLoginWidget_UpdateIsAdmin::bNewIsAdmin' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.OnUpdateContentStyle
// 0x0002 (0x0002 - 0x0000)
struct ButtonWidgetBase_OnUpdateContentStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            InStyleState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_OnUpdateContentStyle) == 0x000001, "Wrong alignment on ButtonWidgetBase_OnUpdateContentStyle");
static_assert(sizeof(ButtonWidgetBase_OnUpdateContentStyle) == 0x000002, "Wrong size on ButtonWidgetBase_OnUpdateContentStyle");
static_assert(offsetof(ButtonWidgetBase_OnUpdateContentStyle, InColorStyle) == 0x000000, "Member 'ButtonWidgetBase_OnUpdateContentStyle::InColorStyle' has a wrong offset!");
static_assert(offsetof(ButtonWidgetBase_OnUpdateContentStyle, InStyleState) == 0x000001, "Member 'ButtonWidgetBase_OnUpdateContentStyle::InStyleState' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.SetBrushStyle
// 0x0001 (0x0001 - 0x0000)
struct ButtonWidgetBase_SetBrushStyle final
{
public:
	EBrickUIBrushStyle                            NewBrushStyle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_SetBrushStyle) == 0x000001, "Wrong alignment on ButtonWidgetBase_SetBrushStyle");
static_assert(sizeof(ButtonWidgetBase_SetBrushStyle) == 0x000001, "Wrong size on ButtonWidgetBase_SetBrushStyle");
static_assert(offsetof(ButtonWidgetBase_SetBrushStyle, NewBrushStyle) == 0x000000, "Member 'ButtonWidgetBase_SetBrushStyle::NewBrushStyle' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct ButtonWidgetBase_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_SetColorStyle) == 0x000001, "Wrong alignment on ButtonWidgetBase_SetColorStyle");
static_assert(sizeof(ButtonWidgetBase_SetColorStyle) == 0x000001, "Wrong size on ButtonWidgetBase_SetColorStyle");
static_assert(offsetof(ButtonWidgetBase_SetColorStyle, NewColorStyle) == 0x000000, "Member 'ButtonWidgetBase_SetColorStyle::NewColorStyle' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.SetCustomFocus
// 0x0002 (0x0002 - 0x0000)
struct ButtonWidgetBase_SetCustomFocus final
{
public:
	bool                                          bNewUseCustomFocus;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewFocused;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_SetCustomFocus) == 0x000001, "Wrong alignment on ButtonWidgetBase_SetCustomFocus");
static_assert(sizeof(ButtonWidgetBase_SetCustomFocus) == 0x000002, "Wrong size on ButtonWidgetBase_SetCustomFocus");
static_assert(offsetof(ButtonWidgetBase_SetCustomFocus, bNewUseCustomFocus) == 0x000000, "Member 'ButtonWidgetBase_SetCustomFocus::bNewUseCustomFocus' has a wrong offset!");
static_assert(offsetof(ButtonWidgetBase_SetCustomFocus, bNewFocused) == 0x000001, "Member 'ButtonWidgetBase_SetCustomFocus::bNewFocused' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.SetHiddenWhileUnfocused
// 0x0001 (0x0001 - 0x0000)
struct ButtonWidgetBase_SetHiddenWhileUnfocused final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_SetHiddenWhileUnfocused) == 0x000001, "Wrong alignment on ButtonWidgetBase_SetHiddenWhileUnfocused");
static_assert(sizeof(ButtonWidgetBase_SetHiddenWhileUnfocused) == 0x000001, "Wrong size on ButtonWidgetBase_SetHiddenWhileUnfocused");
static_assert(offsetof(ButtonWidgetBase_SetHiddenWhileUnfocused, bNewHidden) == 0x000000, "Member 'ButtonWidgetBase_SetHiddenWhileUnfocused::bNewHidden' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct ButtonWidgetBase_SetIsSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_SetIsSelected) == 0x000001, "Wrong alignment on ButtonWidgetBase_SetIsSelected");
static_assert(sizeof(ButtonWidgetBase_SetIsSelected) == 0x000001, "Wrong size on ButtonWidgetBase_SetIsSelected");
static_assert(offsetof(ButtonWidgetBase_SetIsSelected, bNewSelected) == 0x000000, "Member 'ButtonWidgetBase_SetIsSelected::bNewSelected' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.GetButtonStyleState
// 0x0001 (0x0001 - 0x0000)
struct ButtonWidgetBase_GetButtonStyleState final
{
public:
	EBrickUIStyleState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_GetButtonStyleState) == 0x000001, "Wrong alignment on ButtonWidgetBase_GetButtonStyleState");
static_assert(sizeof(ButtonWidgetBase_GetButtonStyleState) == 0x000001, "Wrong size on ButtonWidgetBase_GetButtonStyleState");
static_assert(offsetof(ButtonWidgetBase_GetButtonStyleState, ReturnValue) == 0x000000, "Member 'ButtonWidgetBase_GetButtonStyleState::ReturnValue' has a wrong offset!");

// Function BrickRigs.ButtonWidgetBase.GetContentStyleState
// 0x0001 (0x0001 - 0x0000)
struct ButtonWidgetBase_GetContentStyleState final
{
public:
	EBrickUIStyleState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonWidgetBase_GetContentStyleState) == 0x000001, "Wrong alignment on ButtonWidgetBase_GetContentStyleState");
static_assert(sizeof(ButtonWidgetBase_GetContentStyleState) == 0x000001, "Wrong size on ButtonWidgetBase_GetContentStyleState");
static_assert(offsetof(ButtonWidgetBase_GetContentStyleState, ReturnValue) == 0x000000, "Member 'ButtonWidgetBase_GetContentStyleState::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickButtonWidget.AddContentWidget
// 0x0008 (0x0008 - 0x0000)
struct BrickButtonWidget_AddContentWidget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickButtonWidget_AddContentWidget) == 0x000008, "Wrong alignment on BrickButtonWidget_AddContentWidget");
static_assert(sizeof(BrickButtonWidget_AddContentWidget) == 0x000008, "Wrong size on BrickButtonWidget_AddContentWidget");
static_assert(offsetof(BrickButtonWidget_AddContentWidget, InWidget) == 0x000000, "Member 'BrickButtonWidget_AddContentWidget::InWidget' has a wrong offset!");

// Function BrickRigs.BrickButtonWidget.SetContentHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct BrickButtonWidget_SetContentHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InAlignment;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickButtonWidget_SetContentHorizontalAlignment) == 0x000001, "Wrong alignment on BrickButtonWidget_SetContentHorizontalAlignment");
static_assert(sizeof(BrickButtonWidget_SetContentHorizontalAlignment) == 0x000001, "Wrong size on BrickButtonWidget_SetContentHorizontalAlignment");
static_assert(offsetof(BrickButtonWidget_SetContentHorizontalAlignment, InAlignment) == 0x000000, "Member 'BrickButtonWidget_SetContentHorizontalAlignment::InAlignment' has a wrong offset!");

// Function BrickRigs.BrickButtonWidget.SetContentPadding
// 0x0010 (0x0010 - 0x0000)
struct BrickButtonWidget_SetContentPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickButtonWidget_SetContentPadding) == 0x000004, "Wrong alignment on BrickButtonWidget_SetContentPadding");
static_assert(sizeof(BrickButtonWidget_SetContentPadding) == 0x000010, "Wrong size on BrickButtonWidget_SetContentPadding");
static_assert(offsetof(BrickButtonWidget_SetContentPadding, InPadding) == 0x000000, "Member 'BrickButtonWidget_SetContentPadding::InPadding' has a wrong offset!");

// Function BrickRigs.BrickButtonWidget.SetContentPaddingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickButtonWidget_SetContentPaddingStyle final
{
public:
	EBrickUIPaddingStyle                          InStyle;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickButtonWidget_SetContentPaddingStyle) == 0x000001, "Wrong alignment on BrickButtonWidget_SetContentPaddingStyle");
static_assert(sizeof(BrickButtonWidget_SetContentPaddingStyle) == 0x000001, "Wrong size on BrickButtonWidget_SetContentPaddingStyle");
static_assert(offsetof(BrickButtonWidget_SetContentPaddingStyle, InStyle) == 0x000000, "Member 'BrickButtonWidget_SetContentPaddingStyle::InStyle' has a wrong offset!");

// Function BrickRigs.BrickButtonWidget.SetContentVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct BrickButtonWidget_SetContentVerticalAlignment final
{
public:
	EVerticalAlignment                            InAlignment;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickButtonWidget_SetContentVerticalAlignment) == 0x000001, "Wrong alignment on BrickButtonWidget_SetContentVerticalAlignment");
static_assert(sizeof(BrickButtonWidget_SetContentVerticalAlignment) == 0x000001, "Wrong size on BrickButtonWidget_SetContentVerticalAlignment");
static_assert(offsetof(BrickButtonWidget_SetContentVerticalAlignment, InAlignment) == 0x000000, "Member 'BrickButtonWidget_SetContentVerticalAlignment::InAlignment' has a wrong offset!");

// Function BrickRigs.PopupWidget.CancelPopup
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_CancelPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_CancelPopup) == 0x000001, "Wrong alignment on PopupWidget_CancelPopup");
static_assert(sizeof(PopupWidget_CancelPopup) == 0x000001, "Wrong size on PopupWidget_CancelPopup");
static_assert(offsetof(PopupWidget_CancelPopup, ReturnValue) == 0x000000, "Member 'PopupWidget_CancelPopup::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.ClosePopup
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_ClosePopup final
{
public:
	EPopupResult                                  Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_ClosePopup) == 0x000001, "Wrong alignment on PopupWidget_ClosePopup");
static_assert(sizeof(PopupWidget_ClosePopup) == 0x000001, "Wrong size on PopupWidget_ClosePopup");
static_assert(offsetof(PopupWidget_ClosePopup, Result) == 0x000000, "Member 'PopupWidget_ClosePopup::Result' has a wrong offset!");

// Function BrickRigs.PopupWidget.ConfirmPopup
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_ConfirmPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_ConfirmPopup) == 0x000001, "Wrong alignment on PopupWidget_ConfirmPopup");
static_assert(sizeof(PopupWidget_ConfirmPopup) == 0x000001, "Wrong size on PopupWidget_ConfirmPopup");
static_assert(offsetof(PopupWidget_ConfirmPopup, ReturnValue) == 0x000000, "Member 'PopupWidget_ConfirmPopup::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.GetPopupParams
// 0x0010 (0x0010 - 0x0000)
struct PopupWidget_GetPopupParams final
{
public:
	TSubclassOf<class UPopupParams>               Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPopupParams*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_GetPopupParams) == 0x000008, "Wrong alignment on PopupWidget_GetPopupParams");
static_assert(sizeof(PopupWidget_GetPopupParams) == 0x000010, "Wrong size on PopupWidget_GetPopupParams");
static_assert(offsetof(PopupWidget_GetPopupParams, Class_0) == 0x000000, "Member 'PopupWidget_GetPopupParams::Class_0' has a wrong offset!");
static_assert(offsetof(PopupWidget_GetPopupParams, ReturnValue) == 0x000008, "Member 'PopupWidget_GetPopupParams::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct PopupWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on PopupWidget_GetWidgetToFocus");
static_assert(sizeof(PopupWidget_GetWidgetToFocus) == 0x000008, "Wrong size on PopupWidget_GetWidgetToFocus");
static_assert(offsetof(PopupWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'PopupWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.StepBack
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_StepBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_StepBack) == 0x000001, "Wrong alignment on PopupWidget_StepBack");
static_assert(sizeof(PopupWidget_StepBack) == 0x000001, "Wrong size on PopupWidget_StepBack");
static_assert(offsetof(PopupWidget_StepBack, ReturnValue) == 0x000000, "Member 'PopupWidget_StepBack::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.CanPopupBeClosed
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_CanPopupBeClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_CanPopupBeClosed) == 0x000001, "Wrong alignment on PopupWidget_CanPopupBeClosed");
static_assert(sizeof(PopupWidget_CanPopupBeClosed) == 0x000001, "Wrong size on PopupWidget_CanPopupBeClosed");
static_assert(offsetof(PopupWidget_CanPopupBeClosed, ReturnValue) == 0x000000, "Member 'PopupWidget_CanPopupBeClosed::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.GetButtonPanel
// 0x0008 (0x0008 - 0x0000)
struct PopupWidget_GetButtonPanel final
{
public:
	class UMenuButtonPanelWidget*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_GetButtonPanel) == 0x000008, "Wrong alignment on PopupWidget_GetButtonPanel");
static_assert(sizeof(PopupWidget_GetButtonPanel) == 0x000008, "Wrong size on PopupWidget_GetButtonPanel");
static_assert(offsetof(PopupWidget_GetButtonPanel, ReturnValue) == 0x000000, "Member 'PopupWidget_GetButtonPanel::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.GetPopupContainer
// 0x0008 (0x0008 - 0x0000)
struct PopupWidget_GetPopupContainer final
{
public:
	class UPopupContainerWidget*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_GetPopupContainer) == 0x000008, "Wrong alignment on PopupWidget_GetPopupContainer");
static_assert(sizeof(PopupWidget_GetPopupContainer) == 0x000008, "Wrong size on PopupWidget_GetPopupContainer");
static_assert(offsetof(PopupWidget_GetPopupContainer, ReturnValue) == 0x000000, "Member 'PopupWidget_GetPopupContainer::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.GetPopupSizeRule
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_GetPopupSizeRule final
{
public:
	EPopupSizeRule                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_GetPopupSizeRule) == 0x000001, "Wrong alignment on PopupWidget_GetPopupSizeRule");
static_assert(sizeof(PopupWidget_GetPopupSizeRule) == 0x000001, "Wrong size on PopupWidget_GetPopupSizeRule");
static_assert(offsetof(PopupWidget_GetPopupSizeRule, ReturnValue) == 0x000000, "Member 'PopupWidget_GetPopupSizeRule::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.GetPopupTitle
// 0x0018 (0x0018 - 0x0000)
struct PopupWidget_GetPopupTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_GetPopupTitle) == 0x000008, "Wrong alignment on PopupWidget_GetPopupTitle");
static_assert(sizeof(PopupWidget_GetPopupTitle) == 0x000018, "Wrong size on PopupWidget_GetPopupTitle");
static_assert(offsetof(PopupWidget_GetPopupTitle, ReturnValue) == 0x000000, "Member 'PopupWidget_GetPopupTitle::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupWidget.ShouldBeVisibleInPopupContainer
// 0x0001 (0x0001 - 0x0000)
struct PopupWidget_ShouldBeVisibleInPopupContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupWidget_ShouldBeVisibleInPopupContainer) == 0x000001, "Wrong alignment on PopupWidget_ShouldBeVisibleInPopupContainer");
static_assert(sizeof(PopupWidget_ShouldBeVisibleInPopupContainer) == 0x000001, "Wrong size on PopupWidget_ShouldBeVisibleInPopupContainer");
static_assert(offsetof(PopupWidget_ShouldBeVisibleInPopupContainer, ReturnValue) == 0x000000, "Member 'PopupWidget_ShouldBeVisibleInPopupContainer::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryPopupWidget.UpdateDropArea
// 0x0003 (0x0003 - 0x0000)
struct InventoryPopupWidget_UpdateDropArea final
{
public:
	bool                                          bInIsDragging;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCanDrop;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDragOver;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryPopupWidget_UpdateDropArea) == 0x000001, "Wrong alignment on InventoryPopupWidget_UpdateDropArea");
static_assert(sizeof(InventoryPopupWidget_UpdateDropArea) == 0x000003, "Wrong size on InventoryPopupWidget_UpdateDropArea");
static_assert(offsetof(InventoryPopupWidget_UpdateDropArea, bInIsDragging) == 0x000000, "Member 'InventoryPopupWidget_UpdateDropArea::bInIsDragging' has a wrong offset!");
static_assert(offsetof(InventoryPopupWidget_UpdateDropArea, bInCanDrop) == 0x000001, "Member 'InventoryPopupWidget_UpdateDropArea::bInCanDrop' has a wrong offset!");
static_assert(offsetof(InventoryPopupWidget_UpdateDropArea, bInIsDragOver) == 0x000002, "Member 'InventoryPopupWidget_UpdateDropArea::bInIsDragOver' has a wrong offset!");

// Function BrickRigs.ActuatorBrick.Interact_Actuate
// 0x0010 (0x0010 - 0x0000)
struct ActuatorBrick_Interact_Actuate final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActuatorBrick_Interact_Actuate) == 0x000008, "Wrong alignment on ActuatorBrick_Interact_Actuate");
static_assert(sizeof(ActuatorBrick_Interact_Actuate) == 0x000010, "Wrong size on ActuatorBrick_Interact_Actuate");
static_assert(offsetof(ActuatorBrick_Interact_Actuate, OtherPC) == 0x000000, "Member 'ActuatorBrick_Interact_Actuate::OtherPC' has a wrong offset!");
static_assert(offsetof(ActuatorBrick_Interact_Actuate, Val) == 0x000008, "Member 'ActuatorBrick_Interact_Actuate::Val' has a wrong offset!");

// Function BrickRigs.MenuPageWidget.StepBack
// 0x0001 (0x0001 - 0x0000)
struct MenuPageWidget_StepBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuPageWidget_StepBack) == 0x000001, "Wrong alignment on MenuPageWidget_StepBack");
static_assert(sizeof(MenuPageWidget_StepBack) == 0x000001, "Wrong size on MenuPageWidget_StepBack");
static_assert(offsetof(MenuPageWidget_StepBack, ReturnValue) == 0x000000, "Member 'MenuPageWidget_StepBack::ReturnValue' has a wrong offset!");

// Function BrickRigs.MenuPageWidget.GetMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct MenuPageWidget_GetMenuWidget final
{
public:
	class UMenuWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuPageWidget_GetMenuWidget) == 0x000008, "Wrong alignment on MenuPageWidget_GetMenuWidget");
static_assert(sizeof(MenuPageWidget_GetMenuWidget) == 0x000008, "Wrong size on MenuPageWidget_GetMenuWidget");
static_assert(offsetof(MenuPageWidget_GetMenuWidget, ReturnValue) == 0x000000, "Member 'MenuPageWidget_GetMenuWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.MenuPageWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MenuPageWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuPageWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on MenuPageWidget_GetWidgetToFocus");
static_assert(sizeof(MenuPageWidget_GetWidgetToFocus) == 0x000008, "Wrong size on MenuPageWidget_GetWidgetToFocus");
static_assert(offsetof(MenuPageWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MenuPageWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.LookRight
// 0x0004 (0x0004 - 0x0000)
struct BaseInputComponent_LookRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_LookRight) == 0x000004, "Wrong alignment on BaseInputComponent_LookRight");
static_assert(sizeof(BaseInputComponent_LookRight) == 0x000004, "Wrong size on BaseInputComponent_LookRight");
static_assert(offsetof(BaseInputComponent_LookRight, Val) == 0x000000, "Member 'BaseInputComponent_LookRight::Val' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.LookUp
// 0x0004 (0x0004 - 0x0000)
struct BaseInputComponent_LookUp final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_LookUp) == 0x000004, "Wrong alignment on BaseInputComponent_LookUp");
static_assert(sizeof(BaseInputComponent_LookUp) == 0x000004, "Wrong size on BaseInputComponent_LookUp");
static_assert(offsetof(BaseInputComponent_LookUp, Val) == 0x000000, "Member 'BaseInputComponent_LookUp::Val' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.MouseMoveRight
// 0x0004 (0x0004 - 0x0000)
struct BaseInputComponent_MouseMoveRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_MouseMoveRight) == 0x000004, "Wrong alignment on BaseInputComponent_MouseMoveRight");
static_assert(sizeof(BaseInputComponent_MouseMoveRight) == 0x000004, "Wrong size on BaseInputComponent_MouseMoveRight");
static_assert(offsetof(BaseInputComponent_MouseMoveRight, Val) == 0x000000, "Member 'BaseInputComponent_MouseMoveRight::Val' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.MouseMoveUp
// 0x0004 (0x0004 - 0x0000)
struct BaseInputComponent_MouseMoveUp final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_MouseMoveUp) == 0x000004, "Wrong alignment on BaseInputComponent_MouseMoveUp");
static_assert(sizeof(BaseInputComponent_MouseMoveUp) == 0x000004, "Wrong size on BaseInputComponent_MouseMoveUp");
static_assert(offsetof(BaseInputComponent_MouseMoveUp, Val) == 0x000000, "Member 'BaseInputComponent_MouseMoveUp::Val' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.SpeedUp
// 0x0004 (0x0004 - 0x0000)
struct BaseInputComponent_SpeedUp final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_SpeedUp) == 0x000004, "Wrong alignment on BaseInputComponent_SpeedUp");
static_assert(sizeof(BaseInputComponent_SpeedUp) == 0x000004, "Wrong size on BaseInputComponent_SpeedUp");
static_assert(offsetof(BaseInputComponent_SpeedUp, Val) == 0x000000, "Member 'BaseInputComponent_SpeedUp::Val' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.ZoomIn
// 0x0004 (0x0004 - 0x0000)
struct BaseInputComponent_ZoomIn final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_ZoomIn) == 0x000004, "Wrong alignment on BaseInputComponent_ZoomIn");
static_assert(sizeof(BaseInputComponent_ZoomIn) == 0x000004, "Wrong size on BaseInputComponent_ZoomIn");
static_assert(offsetof(BaseInputComponent_ZoomIn, Val) == 0x000000, "Member 'BaseInputComponent_ZoomIn::Val' has a wrong offset!");

// Function BrickRigs.BaseInputComponent.GetCycleHUDVisibilityValueText
// 0x0018 (0x0018 - 0x0000)
struct BaseInputComponent_GetCycleHUDVisibilityValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInputComponent_GetCycleHUDVisibilityValueText) == 0x000008, "Wrong alignment on BaseInputComponent_GetCycleHUDVisibilityValueText");
static_assert(sizeof(BaseInputComponent_GetCycleHUDVisibilityValueText) == 0x000018, "Wrong size on BaseInputComponent_GetCycleHUDVisibilityValueText");
static_assert(offsetof(BaseInputComponent_GetCycleHUDVisibilityValueText, ReturnValue) == 0x000000, "Member 'BaseInputComponent_GetCycleHUDVisibilityValueText::ReturnValue' has a wrong offset!");

// Function BrickRigs.PawnInputComponent.GetDestroyPawnEnabled
// 0x0002 (0x0002 - 0x0000)
struct PawnInputComponent_GetDestroyPawnEnabled final
{
public:
	bool                                          bInSecondaryAction;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnInputComponent_GetDestroyPawnEnabled) == 0x000001, "Wrong alignment on PawnInputComponent_GetDestroyPawnEnabled");
static_assert(sizeof(PawnInputComponent_GetDestroyPawnEnabled) == 0x000002, "Wrong size on PawnInputComponent_GetDestroyPawnEnabled");
static_assert(offsetof(PawnInputComponent_GetDestroyPawnEnabled, bInSecondaryAction) == 0x000000, "Member 'PawnInputComponent_GetDestroyPawnEnabled::bInSecondaryAction' has a wrong offset!");
static_assert(offsetof(PawnInputComponent_GetDestroyPawnEnabled, ReturnValue) == 0x000001, "Member 'PawnInputComponent_GetDestroyPawnEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.PawnInputComponent.GetInventoryEnabled
// 0x0002 (0x0002 - 0x0000)
struct PawnInputComponent_GetInventoryEnabled final
{
public:
	bool                                          bInSecondaryAction;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnInputComponent_GetInventoryEnabled) == 0x000001, "Wrong alignment on PawnInputComponent_GetInventoryEnabled");
static_assert(sizeof(PawnInputComponent_GetInventoryEnabled) == 0x000002, "Wrong size on PawnInputComponent_GetInventoryEnabled");
static_assert(offsetof(PawnInputComponent_GetInventoryEnabled, bInSecondaryAction) == 0x000000, "Member 'PawnInputComponent_GetInventoryEnabled::bInSecondaryAction' has a wrong offset!");
static_assert(offsetof(PawnInputComponent_GetInventoryEnabled, ReturnValue) == 0x000001, "Member 'PawnInputComponent_GetInventoryEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCheatManager.AddMoney
// 0x0004 (0x0004 - 0x0000)
struct BrickCheatManager_AddMoney final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCheatManager_AddMoney) == 0x000004, "Wrong alignment on BrickCheatManager_AddMoney");
static_assert(sizeof(BrickCheatManager_AddMoney) == 0x000004, "Wrong size on BrickCheatManager_AddMoney");
static_assert(offsetof(BrickCheatManager_AddMoney, Amount) == 0x000000, "Member 'BrickCheatManager_AddMoney::Amount' has a wrong offset!");

// Function BrickRigs.BrickCheatManager.AddScore
// 0x0004 (0x0004 - 0x0000)
struct BrickCheatManager_AddScore final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCheatManager_AddScore) == 0x000004, "Wrong alignment on BrickCheatManager_AddScore");
static_assert(sizeof(BrickCheatManager_AddScore) == 0x000004, "Wrong size on BrickCheatManager_AddScore");
static_assert(offsetof(BrickCheatManager_AddScore, Amount) == 0x000000, "Member 'BrickCheatManager_AddScore::Amount' has a wrong offset!");

// Function BrickRigs.AdminMenuWidget.OnListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct AdminMenuWidget_OnListEntrySelected final
{
public:
	class UPagedListEntryWidget*                  Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoubleClick;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdminMenuWidget_OnListEntrySelected) == 0x000008, "Wrong alignment on AdminMenuWidget_OnListEntrySelected");
static_assert(sizeof(AdminMenuWidget_OnListEntrySelected) == 0x000010, "Wrong size on AdminMenuWidget_OnListEntrySelected");
static_assert(offsetof(AdminMenuWidget_OnListEntrySelected, Widget) == 0x000000, "Member 'AdminMenuWidget_OnListEntrySelected::Widget' has a wrong offset!");
static_assert(offsetof(AdminMenuWidget_OnListEntrySelected, bDoubleClick) == 0x000008, "Member 'AdminMenuWidget_OnListEntrySelected::bDoubleClick' has a wrong offset!");

// Function BrickRigs.AdminMenuWidget.OnLoadListPage
// 0x0004 (0x0004 - 0x0000)
struct AdminMenuWidget_OnLoadListPage final
{
public:
	int32                                         NewPage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdminMenuWidget_OnLoadListPage) == 0x000004, "Wrong alignment on AdminMenuWidget_OnLoadListPage");
static_assert(sizeof(AdminMenuWidget_OnLoadListPage) == 0x000004, "Wrong size on AdminMenuWidget_OnLoadListPage");
static_assert(offsetof(AdminMenuWidget_OnLoadListPage, NewPage) == 0x000000, "Member 'AdminMenuWidget_OnLoadListPage::NewPage' has a wrong offset!");

// Function BrickRigs.AdminMenuWidget.UpdateCanViewAndEditKicks
// 0x0001 (0x0001 - 0x0000)
struct AdminMenuWidget_UpdateCanViewAndEditKicks final
{
public:
	bool                                          bNewCanViewAndEdit;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdminMenuWidget_UpdateCanViewAndEditKicks) == 0x000001, "Wrong alignment on AdminMenuWidget_UpdateCanViewAndEditKicks");
static_assert(sizeof(AdminMenuWidget_UpdateCanViewAndEditKicks) == 0x000001, "Wrong size on AdminMenuWidget_UpdateCanViewAndEditKicks");
static_assert(offsetof(AdminMenuWidget_UpdateCanViewAndEditKicks, bNewCanViewAndEdit) == 0x000000, "Member 'AdminMenuWidget_UpdateCanViewAndEditKicks::bNewCanViewAndEdit' has a wrong offset!");

// Function BrickRigs.AdminMenuWidget.UpdateHasSelectedKick
// 0x0001 (0x0001 - 0x0000)
struct AdminMenuWidget_UpdateHasSelectedKick final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdminMenuWidget_UpdateHasSelectedKick) == 0x000001, "Wrong alignment on AdminMenuWidget_UpdateHasSelectedKick");
static_assert(sizeof(AdminMenuWidget_UpdateHasSelectedKick) == 0x000001, "Wrong size on AdminMenuWidget_UpdateHasSelectedKick");
static_assert(offsetof(AdminMenuWidget_UpdateHasSelectedKick, bNewSelected) == 0x000000, "Member 'AdminMenuWidget_UpdateHasSelectedKick::bNewSelected' has a wrong offset!");

// Function BrickRigs.KickPlayerPopupWidget.UpdateCanConfirmKick
// 0x0001 (0x0001 - 0x0000)
struct KickPlayerPopupWidget_UpdateCanConfirmKick final
{
public:
	bool                                          bNewCanConfirm;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KickPlayerPopupWidget_UpdateCanConfirmKick) == 0x000001, "Wrong alignment on KickPlayerPopupWidget_UpdateCanConfirmKick");
static_assert(sizeof(KickPlayerPopupWidget_UpdateCanConfirmKick) == 0x000001, "Wrong size on KickPlayerPopupWidget_UpdateCanConfirmKick");
static_assert(offsetof(KickPlayerPopupWidget_UpdateCanConfirmKick, bNewCanConfirm) == 0x000000, "Member 'KickPlayerPopupWidget_UpdateCanConfirmKick::bNewCanConfirm' has a wrong offset!");

// Function BrickRigs.KickPlayerPopupWidget.UpdateCanRevokeKick
// 0x0001 (0x0001 - 0x0000)
struct KickPlayerPopupWidget_UpdateCanRevokeKick final
{
public:
	bool                                          bCanRevoke;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KickPlayerPopupWidget_UpdateCanRevokeKick) == 0x000001, "Wrong alignment on KickPlayerPopupWidget_UpdateCanRevokeKick");
static_assert(sizeof(KickPlayerPopupWidget_UpdateCanRevokeKick) == 0x000001, "Wrong size on KickPlayerPopupWidget_UpdateCanRevokeKick");
static_assert(offsetof(KickPlayerPopupWidget_UpdateCanRevokeKick, bCanRevoke) == 0x000000, "Member 'KickPlayerPopupWidget_UpdateCanRevokeKick::bCanRevoke' has a wrong offset!");

// Function BrickRigs.KickPlayerPopupWidget.UpdateIsLoadingKick
// 0x0001 (0x0001 - 0x0000)
struct KickPlayerPopupWidget_UpdateIsLoadingKick final
{
public:
	bool                                          bNewLoading;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KickPlayerPopupWidget_UpdateIsLoadingKick) == 0x000001, "Wrong alignment on KickPlayerPopupWidget_UpdateIsLoadingKick");
static_assert(sizeof(KickPlayerPopupWidget_UpdateIsLoadingKick) == 0x000001, "Wrong size on KickPlayerPopupWidget_UpdateIsLoadingKick");
static_assert(offsetof(KickPlayerPopupWidget_UpdateIsLoadingKick, bNewLoading) == 0x000000, "Member 'KickPlayerPopupWidget_UpdateIsLoadingKick::bNewLoading' has a wrong offset!");

// Function BrickRigs.BrickUserWidget.GetTooltipContent
// 0x0048 (0x0048 - 0x0000)
struct BrickUserWidget_GetTooltipContent final
{
public:
	struct FTooltipContent                        OutContent;                                        // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickUserWidget_GetTooltipContent) == 0x000008, "Wrong alignment on BrickUserWidget_GetTooltipContent");
static_assert(sizeof(BrickUserWidget_GetTooltipContent) == 0x000048, "Wrong size on BrickUserWidget_GetTooltipContent");
static_assert(offsetof(BrickUserWidget_GetTooltipContent, OutContent) == 0x000000, "Member 'BrickUserWidget_GetTooltipContent::OutContent' has a wrong offset!");
static_assert(offsetof(BrickUserWidget_GetTooltipContent, ReturnValue) == 0x000040, "Member 'BrickUserWidget_GetTooltipContent::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUserWidget.InitializeTooltip
// 0x0008 (0x0008 - 0x0000)
struct BrickUserWidget_InitializeTooltip final
{
public:
	class UTooltipWidget*                         Tooltip;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserWidget_InitializeTooltip) == 0x000008, "Wrong alignment on BrickUserWidget_InitializeTooltip");
static_assert(sizeof(BrickUserWidget_InitializeTooltip) == 0x000008, "Wrong size on BrickUserWidget_InitializeTooltip");
static_assert(offsetof(BrickUserWidget_InitializeTooltip, Tooltip) == 0x000000, "Member 'BrickUserWidget_InitializeTooltip::Tooltip' has a wrong offset!");

// Function BrickRigs.BrickUserWidget.GetTooltipClass
// 0x0008 (0x0008 - 0x0000)
struct BrickUserWidget_GetTooltipClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserWidget_GetTooltipClass) == 0x000008, "Wrong alignment on BrickUserWidget_GetTooltipClass");
static_assert(sizeof(BrickUserWidget_GetTooltipClass) == 0x000008, "Wrong size on BrickUserWidget_GetTooltipClass");
static_assert(offsetof(BrickUserWidget_GetTooltipClass, ReturnValue) == 0x000000, "Member 'BrickUserWidget_GetTooltipClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetInteractionOptions
// 0x0070 (0x0070 - 0x0000)
struct InventoryItem_GetInteractionOptions final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionOptions                    OutOptions;                                        // 0x0008(0x0068)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetInteractionOptions) == 0x000008, "Wrong alignment on InventoryItem_GetInteractionOptions");
static_assert(sizeof(InventoryItem_GetInteractionOptions) == 0x000070, "Wrong size on InventoryItem_GetInteractionOptions");
static_assert(offsetof(InventoryItem_GetInteractionOptions, PC) == 0x000000, "Member 'InventoryItem_GetInteractionOptions::PC' has a wrong offset!");
static_assert(offsetof(InventoryItem_GetInteractionOptions, OutOptions) == 0x000008, "Member 'InventoryItem_GetInteractionOptions::OutOptions' has a wrong offset!");

// Function BrickRigs.InventoryItem.Interact_PickUp
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_Interact_PickUp final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_Interact_PickUp) == 0x000008, "Wrong alignment on InventoryItem_Interact_PickUp");
static_assert(sizeof(InventoryItem_Interact_PickUp) == 0x000008, "Wrong size on InventoryItem_Interact_PickUp");
static_assert(offsetof(InventoryItem_Interact_PickUp, PC) == 0x000000, "Member 'InventoryItem_Interact_PickUp::PC' has a wrong offset!");

// Function BrickRigs.InventoryItem.OnStaticMeshSleep
// 0x0010 (0x0010 - 0x0000)
struct InventoryItem_OnStaticMeshSleep final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_OnStaticMeshSleep) == 0x000008, "Wrong alignment on InventoryItem_OnStaticMeshSleep");
static_assert(sizeof(InventoryItem_OnStaticMeshSleep) == 0x000010, "Wrong size on InventoryItem_OnStaticMeshSleep");
static_assert(offsetof(InventoryItem_OnStaticMeshSleep, Primitive) == 0x000000, "Member 'InventoryItem_OnStaticMeshSleep::Primitive' has a wrong offset!");
static_assert(offsetof(InventoryItem_OnStaticMeshSleep, BoneName) == 0x000008, "Member 'InventoryItem_OnStaticMeshSleep::BoneName' has a wrong offset!");

// Function BrickRigs.InventoryItem.SetIsFiring
// 0x0001 (0x0001 - 0x0000)
struct InventoryItem_SetIsFiring final
{
public:
	bool                                          bNewFiring;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_SetIsFiring) == 0x000001, "Wrong alignment on InventoryItem_SetIsFiring");
static_assert(sizeof(InventoryItem_SetIsFiring) == 0x000001, "Wrong size on InventoryItem_SetIsFiring");
static_assert(offsetof(InventoryItem_SetIsFiring, bNewFiring) == 0x000000, "Member 'InventoryItem_SetIsFiring::bNewFiring' has a wrong offset!");

// Function BrickRigs.InventoryItem.SetNumItems
// 0x0004 (0x0004 - 0x0000)
struct InventoryItem_SetNumItems final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_SetNumItems) == 0x000004, "Wrong alignment on InventoryItem_SetNumItems");
static_assert(sizeof(InventoryItem_SetNumItems) == 0x000004, "Wrong size on InventoryItem_SetNumItems");
static_assert(offsetof(InventoryItem_SetNumItems, Num) == 0x000000, "Member 'InventoryItem_SetNumItems::Num' has a wrong offset!");

// Function BrickRigs.InventoryItem.CanBePickedUp
// 0x0001 (0x0001 - 0x0000)
struct InventoryItem_CanBePickedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_CanBePickedUp) == 0x000001, "Wrong alignment on InventoryItem_CanBePickedUp");
static_assert(sizeof(InventoryItem_CanBePickedUp) == 0x000001, "Wrong size on InventoryItem_CanBePickedUp");
static_assert(offsetof(InventoryItem_CanBePickedUp, ReturnValue) == 0x000000, "Member 'InventoryItem_CanBePickedUp::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_GetCharacter final
{
public:
	class ABrickCharacter*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetCharacter) == 0x000008, "Wrong alignment on InventoryItem_GetCharacter");
static_assert(sizeof(InventoryItem_GetCharacter) == 0x000008, "Wrong size on InventoryItem_GetCharacter");
static_assert(offsetof(InventoryItem_GetCharacter, ReturnValue) == 0x000000, "Member 'InventoryItem_GetCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct InventoryItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetDisplayName) == 0x000008, "Wrong alignment on InventoryItem_GetDisplayName");
static_assert(sizeof(InventoryItem_GetDisplayName) == 0x000018, "Wrong size on InventoryItem_GetDisplayName");
static_assert(offsetof(InventoryItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'InventoryItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetInventoryComponent
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_GetInventoryComponent final
{
public:
	class UInventoryComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetInventoryComponent) == 0x000008, "Wrong alignment on InventoryItem_GetInventoryComponent");
static_assert(sizeof(InventoryItem_GetInventoryComponent) == 0x000008, "Wrong size on InventoryItem_GetInventoryComponent");
static_assert(offsetof(InventoryItem_GetInventoryComponent, ReturnValue) == 0x000000, "Member 'InventoryItem_GetInventoryComponent::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetItemPrice
// 0x0004 (0x0004 - 0x0000)
struct InventoryItem_GetItemPrice final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetItemPrice) == 0x000004, "Wrong alignment on InventoryItem_GetItemPrice");
static_assert(sizeof(InventoryItem_GetItemPrice) == 0x000004, "Wrong size on InventoryItem_GetItemPrice");
static_assert(offsetof(InventoryItem_GetItemPrice, ReturnValue) == 0x000000, "Member 'InventoryItem_GetItemPrice::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetNumDefaultItems
// 0x0004 (0x0004 - 0x0000)
struct InventoryItem_GetNumDefaultItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetNumDefaultItems) == 0x000004, "Wrong alignment on InventoryItem_GetNumDefaultItems");
static_assert(sizeof(InventoryItem_GetNumDefaultItems) == 0x000004, "Wrong size on InventoryItem_GetNumDefaultItems");
static_assert(offsetof(InventoryItem_GetNumDefaultItems, ReturnValue) == 0x000000, "Member 'InventoryItem_GetNumDefaultItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetNumItems
// 0x0004 (0x0004 - 0x0000)
struct InventoryItem_GetNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetNumItems) == 0x000004, "Wrong alignment on InventoryItem_GetNumItems");
static_assert(sizeof(InventoryItem_GetNumItems) == 0x000004, "Wrong size on InventoryItem_GetNumItems");
static_assert(offsetof(InventoryItem_GetNumItems, ReturnValue) == 0x000000, "Member 'InventoryItem_GetNumItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetOwningInventory
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_GetOwningInventory final
{
public:
	class UInventoryComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetOwningInventory) == 0x000008, "Wrong alignment on InventoryItem_GetOwningInventory");
static_assert(sizeof(InventoryItem_GetOwningInventory) == 0x000008, "Wrong size on InventoryItem_GetOwningInventory");
static_assert(offsetof(InventoryItem_GetOwningInventory, ReturnValue) == 0x000000, "Member 'InventoryItem_GetOwningInventory::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_GetStaticInfo final
{
public:
	const class UItemStaticInfo*                  ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetStaticInfo) == 0x000008, "Wrong alignment on InventoryItem_GetStaticInfo");
static_assert(sizeof(InventoryItem_GetStaticInfo) == 0x000008, "Wrong size on InventoryItem_GetStaticInfo");
static_assert(offsetof(InventoryItem_GetStaticInfo, ReturnValue) == 0x000000, "Member 'InventoryItem_GetStaticInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.GetViewingPlayer
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_GetViewingPlayer final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_GetViewingPlayer) == 0x000008, "Wrong alignment on InventoryItem_GetViewingPlayer");
static_assert(sizeof(InventoryItem_GetViewingPlayer) == 0x000008, "Wrong size on InventoryItem_GetViewingPlayer");
static_assert(offsetof(InventoryItem_GetViewingPlayer, ReturnValue) == 0x000000, "Member 'InventoryItem_GetViewingPlayer::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.IsDropped
// 0x0001 (0x0001 - 0x0000)
struct InventoryItem_IsDropped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_IsDropped) == 0x000001, "Wrong alignment on InventoryItem_IsDropped");
static_assert(sizeof(InventoryItem_IsDropped) == 0x000001, "Wrong size on InventoryItem_IsDropped");
static_assert(offsetof(InventoryItem_IsDropped, ReturnValue) == 0x000000, "Member 'InventoryItem_IsDropped::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.NeedsThumbnailMID
// 0x0001 (0x0001 - 0x0000)
struct InventoryItem_NeedsThumbnailMID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_NeedsThumbnailMID) == 0x000001, "Wrong alignment on InventoryItem_NeedsThumbnailMID");
static_assert(sizeof(InventoryItem_NeedsThumbnailMID) == 0x000001, "Wrong size on InventoryItem_NeedsThumbnailMID");
static_assert(offsetof(InventoryItem_NeedsThumbnailMID, ReturnValue) == 0x000000, "Member 'InventoryItem_NeedsThumbnailMID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryItem.UpdateThumbnailMID
// 0x0008 (0x0008 - 0x0000)
struct InventoryItem_UpdateThumbnailMID final
{
public:
	class UMaterialInstanceDynamic*               InMID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItem_UpdateThumbnailMID) == 0x000008, "Wrong alignment on InventoryItem_UpdateThumbnailMID");
static_assert(sizeof(InventoryItem_UpdateThumbnailMID) == 0x000008, "Wrong size on InventoryItem_UpdateThumbnailMID");
static_assert(offsetof(InventoryItem_UpdateThumbnailMID, InMID) == 0x000000, "Member 'InventoryItem_UpdateThumbnailMID::InMID' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemContainerWidget.AddItemWidget
// 0x0008 (0x0008 - 0x0000)
struct BrickComboBoxItemContainerWidget_AddItemWidget final
{
public:
	class UBrickComboBoxItemWidget*               Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemContainerWidget_AddItemWidget) == 0x000008, "Wrong alignment on BrickComboBoxItemContainerWidget_AddItemWidget");
static_assert(sizeof(BrickComboBoxItemContainerWidget_AddItemWidget) == 0x000008, "Wrong size on BrickComboBoxItemContainerWidget_AddItemWidget");
static_assert(offsetof(BrickComboBoxItemContainerWidget_AddItemWidget, Widget) == 0x000000, "Member 'BrickComboBoxItemContainerWidget_AddItemWidget::Widget' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemContainerWidget.OnUpdateButtonContentStyle
// 0x0002 (0x0002 - 0x0000)
struct BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            InContentStyleState;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle) == 0x000001, "Wrong alignment on BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle");
static_assert(sizeof(BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle) == 0x000002, "Wrong size on BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle");
static_assert(offsetof(BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle, InColorStyle) == 0x000000, "Member 'BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle::InColorStyle' has a wrong offset!");
static_assert(offsetof(BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle, InContentStyleState) == 0x000001, "Member 'BrickComboBoxItemContainerWidget_OnUpdateButtonContentStyle::InContentStyleState' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemContainerWidget.UpdateIsSelected
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxItemContainerWidget_UpdateIsSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemContainerWidget_UpdateIsSelected) == 0x000001, "Wrong alignment on BrickComboBoxItemContainerWidget_UpdateIsSelected");
static_assert(sizeof(BrickComboBoxItemContainerWidget_UpdateIsSelected) == 0x000001, "Wrong size on BrickComboBoxItemContainerWidget_UpdateIsSelected");
static_assert(offsetof(BrickComboBoxItemContainerWidget_UpdateIsSelected, bNewSelected) == 0x000000, "Member 'BrickComboBoxItemContainerWidget_UpdateIsSelected::bNewSelected' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemContainerWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct BrickComboBoxItemContainerWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemContainerWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on BrickComboBoxItemContainerWidget_GetWidgetToFocus");
static_assert(sizeof(BrickComboBoxItemContainerWidget_GetWidgetToFocus) == 0x000008, "Wrong size on BrickComboBoxItemContainerWidget_GetWidgetToFocus");
static_assert(offsetof(BrickComboBoxItemContainerWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'BrickComboBoxItemContainerWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemWidget.InitializeItem
// 0x0148 (0x0148 - 0x0000)
struct BrickComboBoxItemWidget_InitializeItem final
{
public:
	int32                                         InItem;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               Params_0;                                          // 0x0008(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemWidget_InitializeItem) == 0x000008, "Wrong alignment on BrickComboBoxItemWidget_InitializeItem");
static_assert(sizeof(BrickComboBoxItemWidget_InitializeItem) == 0x000148, "Wrong size on BrickComboBoxItemWidget_InitializeItem");
static_assert(offsetof(BrickComboBoxItemWidget_InitializeItem, InItem) == 0x000000, "Member 'BrickComboBoxItemWidget_InitializeItem::InItem' has a wrong offset!");
static_assert(offsetof(BrickComboBoxItemWidget_InitializeItem, Params_0) == 0x000008, "Member 'BrickComboBoxItemWidget_InitializeItem::Params_0' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemWidget.UpdateIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxItemWidget_UpdateIconVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemWidget_UpdateIconVisibility) == 0x000001, "Wrong alignment on BrickComboBoxItemWidget_UpdateIconVisibility");
static_assert(sizeof(BrickComboBoxItemWidget_UpdateIconVisibility) == 0x000001, "Wrong size on BrickComboBoxItemWidget_UpdateIconVisibility");
static_assert(offsetof(BrickComboBoxItemWidget_UpdateIconVisibility, bNewVisible) == 0x000000, "Member 'BrickComboBoxItemWidget_UpdateIconVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemWidget.UpdateItemStyle
// 0x0002 (0x0002 - 0x0000)
struct BrickComboBoxItemWidget_UpdateItemStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            InStyleState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemWidget_UpdateItemStyle) == 0x000001, "Wrong alignment on BrickComboBoxItemWidget_UpdateItemStyle");
static_assert(sizeof(BrickComboBoxItemWidget_UpdateItemStyle) == 0x000002, "Wrong size on BrickComboBoxItemWidget_UpdateItemStyle");
static_assert(offsetof(BrickComboBoxItemWidget_UpdateItemStyle, InColorStyle) == 0x000000, "Member 'BrickComboBoxItemWidget_UpdateItemStyle::InColorStyle' has a wrong offset!");
static_assert(offsetof(BrickComboBoxItemWidget_UpdateItemStyle, InStyleState) == 0x000001, "Member 'BrickComboBoxItemWidget_UpdateItemStyle::InStyleState' has a wrong offset!");

// Function BrickRigs.BrickComboBoxItemWidget.UpdateTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxItemWidget_UpdateTextVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxItemWidget_UpdateTextVisibility) == 0x000001, "Wrong alignment on BrickComboBoxItemWidget_UpdateTextVisibility");
static_assert(sizeof(BrickComboBoxItemWidget_UpdateTextVisibility) == 0x000001, "Wrong size on BrickComboBoxItemWidget_UpdateTextVisibility");
static_assert(offsetof(BrickComboBoxItemWidget_UpdateTextVisibility, bNewVisible) == 0x000000, "Member 'BrickComboBoxItemWidget_UpdateTextVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.MatchEndWidget.UpdateContinueButton
// 0x0008 (0x0008 - 0x0000)
struct MatchEndWidget_UpdateContinueButton final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHost;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchEndWidget_UpdateContinueButton) == 0x000004, "Wrong alignment on MatchEndWidget_UpdateContinueButton");
static_assert(sizeof(MatchEndWidget_UpdateContinueButton) == 0x000008, "Wrong size on MatchEndWidget_UpdateContinueButton");
static_assert(offsetof(MatchEndWidget_UpdateContinueButton, TimeRemaining) == 0x000000, "Member 'MatchEndWidget_UpdateContinueButton::TimeRemaining' has a wrong offset!");
static_assert(offsetof(MatchEndWidget_UpdateContinueButton, bIsHost) == 0x000004, "Member 'MatchEndWidget_UpdateContinueButton::bIsHost' has a wrong offset!");

// Function BrickRigs.MatchEndWidget.UpdateMatchWinner
// 0x0010 (0x0010 - 0x0000)
struct MatchEndWidget_UpdateMatchWinner final
{
public:
	class UBrickTeam*                             WinnerTeam;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 TeamAttitude;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchEndWidget_UpdateMatchWinner) == 0x000008, "Wrong alignment on MatchEndWidget_UpdateMatchWinner");
static_assert(sizeof(MatchEndWidget_UpdateMatchWinner) == 0x000010, "Wrong size on MatchEndWidget_UpdateMatchWinner");
static_assert(offsetof(MatchEndWidget_UpdateMatchWinner, WinnerTeam) == 0x000000, "Member 'MatchEndWidget_UpdateMatchWinner::WinnerTeam' has a wrong offset!");
static_assert(offsetof(MatchEndWidget_UpdateMatchWinner, TeamAttitude) == 0x000008, "Member 'MatchEndWidget_UpdateMatchWinner::TeamAttitude' has a wrong offset!");

// Function BrickRigs.MatchEndWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MatchEndWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchEndWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on MatchEndWidget_GetWidgetToFocus");
static_assert(sizeof(MatchEndWidget_GetWidgetToFocus) == 0x000008, "Wrong size on MatchEndWidget_GetWidgetToFocus");
static_assert(offsetof(MatchEndWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MatchEndWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsSlotCompatible
// 0x0048 (0x0048 - 0x0000)
struct InventoryComponent_IsSlotCompatible final
{
public:
	struct FInventorySlot                         InSlot;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInventoryItemRef                      InItem;                                            // 0x0030(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_IsSlotCompatible) == 0x000008, "Wrong alignment on InventoryComponent_IsSlotCompatible");
static_assert(sizeof(InventoryComponent_IsSlotCompatible) == 0x000048, "Wrong size on InventoryComponent_IsSlotCompatible");
static_assert(offsetof(InventoryComponent_IsSlotCompatible, InSlot) == 0x000000, "Member 'InventoryComponent_IsSlotCompatible::InSlot' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsSlotCompatible, InItem) == 0x000030, "Member 'InventoryComponent_IsSlotCompatible::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsSlotCompatible, ReturnValue) == 0x000040, "Member 'InventoryComponent_IsSlotCompatible::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.MoveItems
// 0x0040 (0x0040 - 0x0000)
struct InventoryComponent_MoveItems final
{
public:
	struct FMoveInventoryItemParams               Params_0;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AInventoryItem*>                 OutDroppedItems;                                   // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_MoveItems) == 0x000008, "Wrong alignment on InventoryComponent_MoveItems");
static_assert(sizeof(InventoryComponent_MoveItems) == 0x000040, "Wrong size on InventoryComponent_MoveItems");
static_assert(offsetof(InventoryComponent_MoveItems, Params_0) == 0x000000, "Member 'InventoryComponent_MoveItems::Params_0' has a wrong offset!");
static_assert(offsetof(InventoryComponent_MoveItems, OutDroppedItems) == 0x000028, "Member 'InventoryComponent_MoveItems::OutDroppedItems' has a wrong offset!");
static_assert(offsetof(InventoryComponent_MoveItems, ReturnValue) == 0x000038, "Member 'InventoryComponent_MoveItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.ConsumeAmmo
// 0x0014 (0x0014 - 0x0000)
struct InventoryComponent_ConsumeAmmo final
{
public:
	struct FAmmoInfo                              InAmmo;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumRequired;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ConsumeAmmo) == 0x000004, "Wrong alignment on InventoryComponent_ConsumeAmmo");
static_assert(sizeof(InventoryComponent_ConsumeAmmo) == 0x000014, "Wrong size on InventoryComponent_ConsumeAmmo");
static_assert(offsetof(InventoryComponent_ConsumeAmmo, InAmmo) == 0x000000, "Member 'InventoryComponent_ConsumeAmmo::InAmmo' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ConsumeAmmo, NumRequired) == 0x00000C, "Member 'InventoryComponent_ConsumeAmmo::NumRequired' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ConsumeAmmo, ReturnValue) == 0x000010, "Member 'InventoryComponent_ConsumeAmmo::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.ConsumeItems
// 0x000C (0x000C - 0x0000)
struct InventoryComponent_ConsumeItems final
{
public:
	struct FInventorySlotID                       SlotID;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ConsumeItems) == 0x000004, "Wrong alignment on InventoryComponent_ConsumeItems");
static_assert(sizeof(InventoryComponent_ConsumeItems) == 0x00000C, "Wrong size on InventoryComponent_ConsumeItems");
static_assert(offsetof(InventoryComponent_ConsumeItems, SlotID) == 0x000000, "Member 'InventoryComponent_ConsumeItems::SlotID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ConsumeItems, Amount) == 0x000004, "Member 'InventoryComponent_ConsumeItems::Amount' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ConsumeItems, ReturnValue) == 0x000008, "Member 'InventoryComponent_ConsumeItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.DebugSpawnItems
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_DebugSpawnItems final
{
public:
	TSubclassOf<class AInventoryItem>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_DebugSpawnItems) == 0x000008, "Wrong alignment on InventoryComponent_DebugSpawnItems");
static_assert(sizeof(InventoryComponent_DebugSpawnItems) == 0x000010, "Wrong size on InventoryComponent_DebugSpawnItems");
static_assert(offsetof(InventoryComponent_DebugSpawnItems, ItemClass) == 0x000000, "Member 'InventoryComponent_DebugSpawnItems::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DebugSpawnItems, Amount) == 0x000008, "Member 'InventoryComponent_DebugSpawnItems::Amount' has a wrong offset!");

// Function BrickRigs.InventoryComponent.EmptyInventory
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_EmptyInventory final
{
public:
	bool                                          bCallDelegates;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_EmptyInventory) == 0x000001, "Wrong alignment on InventoryComponent_EmptyInventory");
static_assert(sizeof(InventoryComponent_EmptyInventory) == 0x000001, "Wrong size on InventoryComponent_EmptyInventory");
static_assert(offsetof(InventoryComponent_EmptyInventory, bCallDelegates) == 0x000000, "Member 'InventoryComponent_EmptyInventory::bCallDelegates' has a wrong offset!");

// Function BrickRigs.InventoryComponent.Interact_Inventory
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_Interact_Inventory final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Interact_Inventory) == 0x000008, "Wrong alignment on InventoryComponent_Interact_Inventory");
static_assert(sizeof(InventoryComponent_Interact_Inventory) == 0x000008, "Wrong size on InventoryComponent_Interact_Inventory");
static_assert(offsetof(InventoryComponent_Interact_Inventory, PC) == 0x000000, "Member 'InventoryComponent_Interact_Inventory::PC' has a wrong offset!");

// Function BrickRigs.InventoryComponent.SetContentHidden
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_SetContentHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SetContentHidden) == 0x000001, "Wrong alignment on InventoryComponent_SetContentHidden");
static_assert(sizeof(InventoryComponent_SetContentHidden) == 0x000001, "Wrong size on InventoryComponent_SetContentHidden");
static_assert(offsetof(InventoryComponent_SetContentHidden, bHidden) == 0x000000, "Member 'InventoryComponent_SetContentHidden::bHidden' has a wrong offset!");

// Function BrickRigs.InventoryComponent.SetInventoryProperties
// 0x0060 (0x0060 - 0x0000)
struct InventoryComponent_SetInventoryProperties final
{
public:
	struct FInventoryProperties                   InProps;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SetInventoryProperties) == 0x000008, "Wrong alignment on InventoryComponent_SetInventoryProperties");
static_assert(sizeof(InventoryComponent_SetInventoryProperties) == 0x000060, "Wrong size on InventoryComponent_SetInventoryProperties");
static_assert(offsetof(InventoryComponent_SetInventoryProperties, InProps) == 0x000000, "Member 'InventoryComponent_SetInventoryProperties::InProps' has a wrong offset!");

// Function BrickRigs.InventoryComponent.SetSpecialSlotAttachParent
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_SetSpecialSlotAttachParent final
{
public:
	class USceneComponent*                        NewAttachParent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SetSpecialSlotAttachParent) == 0x000008, "Wrong alignment on InventoryComponent_SetSpecialSlotAttachParent");
static_assert(sizeof(InventoryComponent_SetSpecialSlotAttachParent) == 0x000008, "Wrong size on InventoryComponent_SetSpecialSlotAttachParent");
static_assert(offsetof(InventoryComponent_SetSpecialSlotAttachParent, NewAttachParent) == 0x000000, "Member 'InventoryComponent_SetSpecialSlotAttachParent::NewAttachParent' has a wrong offset!");

// Function BrickRigs.InventoryComponent.SpawnInventoryLoadout
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_SpawnInventoryLoadout final
{
public:
	struct FInventoryLoadout                      Loadout;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SpawnInventoryLoadout) == 0x000008, "Wrong alignment on InventoryComponent_SpawnInventoryLoadout");
static_assert(sizeof(InventoryComponent_SpawnInventoryLoadout) == 0x000010, "Wrong size on InventoryComponent_SpawnInventoryLoadout");
static_assert(offsetof(InventoryComponent_SpawnInventoryLoadout, Loadout) == 0x000000, "Member 'InventoryComponent_SpawnInventoryLoadout::Loadout' has a wrong offset!");

// Function BrickRigs.InventoryComponent.SpawnItems
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_SpawnItems final
{
public:
	TSubclassOf<class AInventoryItem>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SpawnItems) == 0x000008, "Wrong alignment on InventoryComponent_SpawnItems");
static_assert(sizeof(InventoryComponent_SpawnItems) == 0x000010, "Wrong size on InventoryComponent_SpawnItems");
static_assert(offsetof(InventoryComponent_SpawnItems, ItemClass) == 0x000000, "Member 'InventoryComponent_SpawnItems::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_SpawnItems, Amount) == 0x000008, "Member 'InventoryComponent_SpawnItems::Amount' has a wrong offset!");
static_assert(offsetof(InventoryComponent_SpawnItems, ReturnValue) == 0x00000C, "Member 'InventoryComponent_SpawnItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.DoesSpecialSlotSupportItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_DoesSpecialSlotSupportItem final
{
public:
	const class AInventoryItem*                   InItem;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_DoesSpecialSlotSupportItem) == 0x000008, "Wrong alignment on InventoryComponent_DoesSpecialSlotSupportItem");
static_assert(sizeof(InventoryComponent_DoesSpecialSlotSupportItem) == 0x000010, "Wrong size on InventoryComponent_DoesSpecialSlotSupportItem");
static_assert(offsetof(InventoryComponent_DoesSpecialSlotSupportItem, InItem) == 0x000000, "Member 'InventoryComponent_DoesSpecialSlotSupportItem::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSpecialSlotSupportItem, SlotIndex) == 0x000008, "Member 'InventoryComponent_DoesSpecialSlotSupportItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSpecialSlotSupportItem, ReturnValue) == 0x00000C, "Member 'InventoryComponent_DoesSpecialSlotSupportItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.FindFreeSlotID
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_FindFreeSlotID final
{
public:
	struct FInventoryItemRef                      InItem;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTryToReplace;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInventorySlotID                       ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_FindFreeSlotID) == 0x000008, "Wrong alignment on InventoryComponent_FindFreeSlotID");
static_assert(sizeof(InventoryComponent_FindFreeSlotID) == 0x000018, "Wrong size on InventoryComponent_FindFreeSlotID");
static_assert(offsetof(InventoryComponent_FindFreeSlotID, InItem) == 0x000000, "Member 'InventoryComponent_FindFreeSlotID::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_FindFreeSlotID, bTryToReplace) == 0x000010, "Member 'InventoryComponent_FindFreeSlotID::bTryToReplace' has a wrong offset!");
static_assert(offsetof(InventoryComponent_FindFreeSlotID, ReturnValue) == 0x000014, "Member 'InventoryComponent_FindFreeSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.FindFreeSpecialSlotID
// 0x0068 (0x0068 - 0x0000)
struct InventoryComponent_FindFreeSpecialSlotID final
{
public:
	struct FInventoryItemRef                      InItem;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSet<struct FInventorySlotID>                 InSlotIDs;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInventorySlotID                       ReturnValue;                                       // 0x0060(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_FindFreeSpecialSlotID) == 0x000008, "Wrong alignment on InventoryComponent_FindFreeSpecialSlotID");
static_assert(sizeof(InventoryComponent_FindFreeSpecialSlotID) == 0x000068, "Wrong size on InventoryComponent_FindFreeSpecialSlotID");
static_assert(offsetof(InventoryComponent_FindFreeSpecialSlotID, InItem) == 0x000000, "Member 'InventoryComponent_FindFreeSpecialSlotID::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_FindFreeSpecialSlotID, InSlotIDs) == 0x000010, "Member 'InventoryComponent_FindFreeSpecialSlotID::InSlotIDs' has a wrong offset!");
static_assert(offsetof(InventoryComponent_FindFreeSpecialSlotID, ReturnValue) == 0x000060, "Member 'InventoryComponent_FindFreeSpecialSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.FindFreeWildcardSlotID
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_FindFreeWildcardSlotID final
{
public:
	struct FInventoryItemRef                      InItem;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInventorySlotID                       ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_FindFreeWildcardSlotID) == 0x000008, "Wrong alignment on InventoryComponent_FindFreeWildcardSlotID");
static_assert(sizeof(InventoryComponent_FindFreeWildcardSlotID) == 0x000018, "Wrong size on InventoryComponent_FindFreeWildcardSlotID");
static_assert(offsetof(InventoryComponent_FindFreeWildcardSlotID, InItem) == 0x000000, "Member 'InventoryComponent_FindFreeWildcardSlotID::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_FindFreeWildcardSlotID, ReturnValue) == 0x000010, "Member 'InventoryComponent_FindFreeWildcardSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetAmmo
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetAmmo final
{
public:
	TArray<struct FAmmoInfo>                      InAmmoTypes;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetAmmo) == 0x000008, "Wrong alignment on InventoryComponent_GetAmmo");
static_assert(sizeof(InventoryComponent_GetAmmo) == 0x000018, "Wrong size on InventoryComponent_GetAmmo");
static_assert(offsetof(InventoryComponent_GetAmmo, InAmmoTypes) == 0x000000, "Member 'InventoryComponent_GetAmmo::InAmmoTypes' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetAmmo, ReturnValue) == 0x000010, "Member 'InventoryComponent_GetAmmo::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetDisplayName) == 0x000008, "Wrong alignment on InventoryComponent_GetDisplayName");
static_assert(sizeof(InventoryComponent_GetDisplayName) == 0x000018, "Wrong size on InventoryComponent_GetDisplayName");
static_assert(offsetof(InventoryComponent_GetDisplayName, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetInventory
// 0x0120 (0x0120 - 0x0000)
struct InventoryComponent_GetInventory final
{
public:
	struct FInventory                             ReturnValue;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetInventory) == 0x000008, "Wrong alignment on InventoryComponent_GetInventory");
static_assert(sizeof(InventoryComponent_GetInventory) == 0x000120, "Wrong size on InventoryComponent_GetInventory");
static_assert(offsetof(InventoryComponent_GetInventory, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetInventory::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetInventorySlots
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetInventorySlots final
{
public:
	TArray<struct FInventorySlot>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetInventorySlots) == 0x000008, "Wrong alignment on InventoryComponent_GetInventorySlots");
static_assert(sizeof(InventoryComponent_GetInventorySlots) == 0x000010, "Wrong size on InventoryComponent_GetInventorySlots");
static_assert(offsetof(InventoryComponent_GetInventorySlots, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetInventorySlots::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetNumItemsOfClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetNumItemsOfClass final
{
public:
	class UClass*                                 InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetNumItemsOfClass) == 0x000008, "Wrong alignment on InventoryComponent_GetNumItemsOfClass");
static_assert(sizeof(InventoryComponent_GetNumItemsOfClass) == 0x000010, "Wrong size on InventoryComponent_GetNumItemsOfClass");
static_assert(offsetof(InventoryComponent_GetNumItemsOfClass, InClass) == 0x000000, "Member 'InventoryComponent_GetNumItemsOfClass::InClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetNumItemsOfClass, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetNumItemsOfClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetSpecialSlotID
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetSpecialSlotID final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInventorySlotID                       ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetSpecialSlotID) == 0x000004, "Wrong alignment on InventoryComponent_GetSpecialSlotID");
static_assert(sizeof(InventoryComponent_GetSpecialSlotID) == 0x000008, "Wrong size on InventoryComponent_GetSpecialSlotID");
static_assert(offsetof(InventoryComponent_GetSpecialSlotID, Index_0) == 0x000000, "Member 'InventoryComponent_GetSpecialSlotID::Index_0' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetSpecialSlotID, ReturnValue) == 0x000004, "Member 'InventoryComponent_GetSpecialSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.GetWildcardSlotID
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetWildcardSlotID final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInventorySlotID                       ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetWildcardSlotID) == 0x000004, "Wrong alignment on InventoryComponent_GetWildcardSlotID");
static_assert(sizeof(InventoryComponent_GetWildcardSlotID) == 0x000008, "Wrong size on InventoryComponent_GetWildcardSlotID");
static_assert(offsetof(InventoryComponent_GetWildcardSlotID, Index_0) == 0x000000, "Member 'InventoryComponent_GetWildcardSlotID::Index_0' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetWildcardSlotID, ReturnValue) == 0x000004, "Member 'InventoryComponent_GetWildcardSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.HasInfiniteAmmo
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_HasInfiniteAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_HasInfiniteAmmo) == 0x000001, "Wrong alignment on InventoryComponent_HasInfiniteAmmo");
static_assert(sizeof(InventoryComponent_HasInfiniteAmmo) == 0x000001, "Wrong size on InventoryComponent_HasInfiniteAmmo");
static_assert(offsetof(InventoryComponent_HasInfiniteAmmo, ReturnValue) == 0x000000, "Member 'InventoryComponent_HasInfiniteAmmo::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.HasInventorySlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_HasInventorySlot final
{
public:
	struct FInventorySlotID                       InSlotID;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_HasInventorySlot) == 0x000004, "Wrong alignment on InventoryComponent_HasInventorySlot");
static_assert(sizeof(InventoryComponent_HasInventorySlot) == 0x000008, "Wrong size on InventoryComponent_HasInventorySlot");
static_assert(offsetof(InventoryComponent_HasInventorySlot, InSlotID) == 0x000000, "Member 'InventoryComponent_HasInventorySlot::InSlotID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasInventorySlot, ReturnValue) == 0x000004, "Member 'InventoryComponent_HasInventorySlot::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsContentHidden
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_IsContentHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_IsContentHidden) == 0x000001, "Wrong alignment on InventoryComponent_IsContentHidden");
static_assert(sizeof(InventoryComponent_IsContentHidden) == 0x000001, "Wrong size on InventoryComponent_IsContentHidden");
static_assert(offsetof(InventoryComponent_IsContentHidden, ReturnValue) == 0x000000, "Member 'InventoryComponent_IsContentHidden::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_IsEmpty) == 0x000001, "Wrong alignment on InventoryComponent_IsEmpty");
static_assert(sizeof(InventoryComponent_IsEmpty) == 0x000001, "Wrong size on InventoryComponent_IsEmpty");
static_assert(offsetof(InventoryComponent_IsEmpty, ReturnValue) == 0x000000, "Member 'InventoryComponent_IsEmpty::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsSlotFreeOrCompatible
// 0x0020 (0x0020 - 0x0000)
struct InventoryComponent_IsSlotFreeOrCompatible final
{
public:
	struct FInventorySlotID                       InSlotID;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInventoryItemRef                      InItem;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_IsSlotFreeOrCompatible) == 0x000008, "Wrong alignment on InventoryComponent_IsSlotFreeOrCompatible");
static_assert(sizeof(InventoryComponent_IsSlotFreeOrCompatible) == 0x000020, "Wrong size on InventoryComponent_IsSlotFreeOrCompatible");
static_assert(offsetof(InventoryComponent_IsSlotFreeOrCompatible, InSlotID) == 0x000000, "Member 'InventoryComponent_IsSlotFreeOrCompatible::InSlotID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsSlotFreeOrCompatible, InItem) == 0x000008, "Member 'InventoryComponent_IsSlotFreeOrCompatible::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsSlotFreeOrCompatible, ReturnValue) == 0x000018, "Member 'InventoryComponent_IsSlotFreeOrCompatible::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsSpecialSlotID
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_IsSpecialSlotID final
{
public:
	struct FInventorySlotID                       InSlotID;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_IsSpecialSlotID) == 0x000004, "Wrong alignment on InventoryComponent_IsSpecialSlotID");
static_assert(sizeof(InventoryComponent_IsSpecialSlotID) == 0x000008, "Wrong size on InventoryComponent_IsSpecialSlotID");
static_assert(offsetof(InventoryComponent_IsSpecialSlotID, InSlotID) == 0x000000, "Member 'InventoryComponent_IsSpecialSlotID::InSlotID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsSpecialSlotID, ReturnValue) == 0x000004, "Member 'InventoryComponent_IsSpecialSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsValidSlotID
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_IsValidSlotID final
{
public:
	struct FInventorySlotID                       InSlotID;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_IsValidSlotID) == 0x000004, "Wrong alignment on InventoryComponent_IsValidSlotID");
static_assert(sizeof(InventoryComponent_IsValidSlotID) == 0x000008, "Wrong size on InventoryComponent_IsValidSlotID");
static_assert(offsetof(InventoryComponent_IsValidSlotID, InSlotID) == 0x000000, "Member 'InventoryComponent_IsValidSlotID::InSlotID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsValidSlotID, ReturnValue) == 0x000004, "Member 'InventoryComponent_IsValidSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.IsWildcardSlotID
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_IsWildcardSlotID final
{
public:
	struct FInventorySlotID                       InSlotID;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_IsWildcardSlotID) == 0x000004, "Wrong alignment on InventoryComponent_IsWildcardSlotID");
static_assert(sizeof(InventoryComponent_IsWildcardSlotID) == 0x000008, "Wrong size on InventoryComponent_IsWildcardSlotID");
static_assert(offsetof(InventoryComponent_IsWildcardSlotID, InSlotID) == 0x000000, "Member 'InventoryComponent_IsWildcardSlotID::InSlotID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsWildcardSlotID, ReturnValue) == 0x000004, "Member 'InventoryComponent_IsWildcardSlotID::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventoryComponent.RequiresSpecialSlot
// 0x0060 (0x0060 - 0x0000)
struct InventoryComponent_RequiresSpecialSlot final
{
public:
	const class AInventoryItem*                   InItem;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FInventorySlotID>                 OutSlots;                                          // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_RequiresSpecialSlot) == 0x000008, "Wrong alignment on InventoryComponent_RequiresSpecialSlot");
static_assert(sizeof(InventoryComponent_RequiresSpecialSlot) == 0x000060, "Wrong size on InventoryComponent_RequiresSpecialSlot");
static_assert(offsetof(InventoryComponent_RequiresSpecialSlot, InItem) == 0x000000, "Member 'InventoryComponent_RequiresSpecialSlot::InItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RequiresSpecialSlot, OutSlots) == 0x000008, "Member 'InventoryComponent_RequiresSpecialSlot::OutSlots' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RequiresSpecialSlot, ReturnValue) == 0x000058, "Member 'InventoryComponent_RequiresSpecialSlot::ReturnValue' has a wrong offset!");

// Function BrickRigs.MenuAnchorWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MenuAnchorWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuAnchorWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on MenuAnchorWidget_GetWidgetToFocus");
static_assert(sizeof(MenuAnchorWidget_GetWidgetToFocus) == 0x000008, "Wrong size on MenuAnchorWidget_GetWidgetToFocus");
static_assert(offsetof(MenuAnchorWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MenuAnchorWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.LegacyBuilding.ConstructBuildingPart
// 0x0020 (0x0020 - 0x0000)
struct LegacyBuilding_ConstructBuildingPart final
{
public:
	int32                                         NumX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Floors;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingPart*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegacyBuilding_ConstructBuildingPart) == 0x000008, "Wrong alignment on LegacyBuilding_ConstructBuildingPart");
static_assert(sizeof(LegacyBuilding_ConstructBuildingPart) == 0x000020, "Wrong size on LegacyBuilding_ConstructBuildingPart");
static_assert(offsetof(LegacyBuilding_ConstructBuildingPart, NumX) == 0x000000, "Member 'LegacyBuilding_ConstructBuildingPart::NumX' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructBuildingPart, NumY) == 0x000004, "Member 'LegacyBuilding_ConstructBuildingPart::NumY' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructBuildingPart, Floors) == 0x000008, "Member 'LegacyBuilding_ConstructBuildingPart::Floors' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructBuildingPart, Location) == 0x00000C, "Member 'LegacyBuilding_ConstructBuildingPart::Location' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructBuildingPart, ReturnValue) == 0x000018, "Member 'LegacyBuilding_ConstructBuildingPart::ReturnValue' has a wrong offset!");

// Function BrickRigs.LegacyBuilding.ConstructFlatRoof
// 0x0010 (0x0010 - 0x0000)
struct LegacyBuilding_ConstructFlatRoof final
{
public:
	class UBuildingPart*                          Part;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Mesh;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LegacyBuilding_ConstructFlatRoof) == 0x000008, "Wrong alignment on LegacyBuilding_ConstructFlatRoof");
static_assert(sizeof(LegacyBuilding_ConstructFlatRoof) == 0x000010, "Wrong size on LegacyBuilding_ConstructFlatRoof");
static_assert(offsetof(LegacyBuilding_ConstructFlatRoof, Part) == 0x000000, "Member 'LegacyBuilding_ConstructFlatRoof::Part' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructFlatRoof, Mesh) == 0x000008, "Member 'LegacyBuilding_ConstructFlatRoof::Mesh' has a wrong offset!");

// Function BrickRigs.LegacyBuilding.ConstructIndustrialRoof
// 0x0010 (0x0010 - 0x0000)
struct LegacyBuilding_ConstructIndustrialRoof final
{
public:
	class UBuildingPart*                          Part;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoofSlopeMesh;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoofMesh;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WallMesh;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LegacyBuilding_ConstructIndustrialRoof) == 0x000008, "Wrong alignment on LegacyBuilding_ConstructIndustrialRoof");
static_assert(sizeof(LegacyBuilding_ConstructIndustrialRoof) == 0x000010, "Wrong size on LegacyBuilding_ConstructIndustrialRoof");
static_assert(offsetof(LegacyBuilding_ConstructIndustrialRoof, Part) == 0x000000, "Member 'LegacyBuilding_ConstructIndustrialRoof::Part' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructIndustrialRoof, RoofSlopeMesh) == 0x000008, "Member 'LegacyBuilding_ConstructIndustrialRoof::RoofSlopeMesh' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructIndustrialRoof, RoofMesh) == 0x000009, "Member 'LegacyBuilding_ConstructIndustrialRoof::RoofMesh' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructIndustrialRoof, WallMesh) == 0x00000A, "Member 'LegacyBuilding_ConstructIndustrialRoof::WallMesh' has a wrong offset!");

// Function BrickRigs.LegacyBuilding.ConstructRoof
// 0x0010 (0x0010 - 0x0000)
struct LegacyBuilding_ConstructRoof final
{
public:
	class UBuildingPart*                          Part;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoofGableMesh;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoofMesh;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotate;                                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LegacyBuilding_ConstructRoof) == 0x000008, "Wrong alignment on LegacyBuilding_ConstructRoof");
static_assert(sizeof(LegacyBuilding_ConstructRoof) == 0x000010, "Wrong size on LegacyBuilding_ConstructRoof");
static_assert(offsetof(LegacyBuilding_ConstructRoof, Part) == 0x000000, "Member 'LegacyBuilding_ConstructRoof::Part' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructRoof, RoofGableMesh) == 0x000008, "Member 'LegacyBuilding_ConstructRoof::RoofGableMesh' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructRoof, RoofMesh) == 0x000009, "Member 'LegacyBuilding_ConstructRoof::RoofMesh' has a wrong offset!");
static_assert(offsetof(LegacyBuilding_ConstructRoof, bRotate) == 0x00000A, "Member 'LegacyBuilding_ConstructRoof::bRotate' has a wrong offset!");

// Function BrickRigs.LegacyBuilding.SpawnBuildingPart
// 0x0008 (0x0008 - 0x0000)
struct LegacyBuilding_SpawnBuildingPart final
{
public:
	class UBuildingPart*                          Part;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegacyBuilding_SpawnBuildingPart) == 0x000008, "Wrong alignment on LegacyBuilding_SpawnBuildingPart");
static_assert(sizeof(LegacyBuilding_SpawnBuildingPart) == 0x000008, "Wrong size on LegacyBuilding_SpawnBuildingPart");
static_assert(offsetof(LegacyBuilding_SpawnBuildingPart, Part) == 0x000000, "Member 'LegacyBuilding_SpawnBuildingPart::Part' has a wrong offset!");

// Function BrickRigs.PropertyWidget.UpdateIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct PropertyWidget_UpdateIsReadOnly final
{
public:
	bool                                          bNewReadOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyWidget_UpdateIsReadOnly) == 0x000001, "Wrong alignment on PropertyWidget_UpdateIsReadOnly");
static_assert(sizeof(PropertyWidget_UpdateIsReadOnly) == 0x000001, "Wrong size on PropertyWidget_UpdateIsReadOnly");
static_assert(offsetof(PropertyWidget_UpdateIsReadOnly, bNewReadOnly) == 0x000000, "Member 'PropertyWidget_UpdateIsReadOnly::bNewReadOnly' has a wrong offset!");

// Function BrickRigs.PropertyWidget.GetFocusedSubProperty
// 0x0010 (0x0010 - 0x0000)
struct PropertyWidget_GetFocusedSubProperty final
{
public:
	struct FWidgetPathWrapper                     WidgetPath;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyWidget_GetFocusedSubProperty) == 0x000008, "Wrong alignment on PropertyWidget_GetFocusedSubProperty");
static_assert(sizeof(PropertyWidget_GetFocusedSubProperty) == 0x000010, "Wrong size on PropertyWidget_GetFocusedSubProperty");
static_assert(offsetof(PropertyWidget_GetFocusedSubProperty, WidgetPath) == 0x000000, "Member 'PropertyWidget_GetFocusedSubProperty::WidgetPath' has a wrong offset!");
static_assert(offsetof(PropertyWidget_GetFocusedSubProperty, ReturnValue) == 0x000008, "Member 'PropertyWidget_GetFocusedSubProperty::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyWidget.GetPropertyContainerWidget
// 0x0008 (0x0008 - 0x0000)
struct PropertyWidget_GetPropertyContainerWidget final
{
public:
	class UPropertyContainerWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyWidget_GetPropertyContainerWidget) == 0x000008, "Wrong alignment on PropertyWidget_GetPropertyContainerWidget");
static_assert(sizeof(PropertyWidget_GetPropertyContainerWidget) == 0x000008, "Wrong size on PropertyWidget_GetPropertyContainerWidget");
static_assert(offsetof(PropertyWidget_GetPropertyContainerWidget, ReturnValue) == 0x000000, "Member 'PropertyWidget_GetPropertyContainerWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.ObjectPropertyWidget.InitializeItem
// 0x0148 (0x0148 - 0x0000)
struct ObjectPropertyWidget_InitializeItem final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               OutParams;                                         // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPropertyWidget_InitializeItem) == 0x000008, "Wrong alignment on ObjectPropertyWidget_InitializeItem");
static_assert(sizeof(ObjectPropertyWidget_InitializeItem) == 0x000148, "Wrong size on ObjectPropertyWidget_InitializeItem");
static_assert(offsetof(ObjectPropertyWidget_InitializeItem, Item) == 0x000000, "Member 'ObjectPropertyWidget_InitializeItem::Item' has a wrong offset!");
static_assert(offsetof(ObjectPropertyWidget_InitializeItem, OutParams) == 0x000008, "Member 'ObjectPropertyWidget_InitializeItem::OutParams' has a wrong offset!");

// Function BrickRigs.ObjectPropertyWidget.OnItemSelected
// 0x0008 (0x0008 - 0x0000)
struct ObjectPropertyWidget_OnItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectPropertyWidget_OnItemSelected) == 0x000004, "Wrong alignment on ObjectPropertyWidget_OnItemSelected");
static_assert(sizeof(ObjectPropertyWidget_OnItemSelected) == 0x000008, "Wrong size on ObjectPropertyWidget_OnItemSelected");
static_assert(offsetof(ObjectPropertyWidget_OnItemSelected, Item) == 0x000000, "Member 'ObjectPropertyWidget_OnItemSelected::Item' has a wrong offset!");
static_assert(offsetof(ObjectPropertyWidget_OnItemSelected, EventType) == 0x000004, "Member 'ObjectPropertyWidget_OnItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.AddItemContainerWidget
// 0x0010 (0x0010 - 0x0000)
struct BrickComboBoxWidget_AddItemContainerWidget final
{
public:
	class UBrickComboBoxItemContainerWidget*      Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComboBoxWidget_AddItemContainerWidget) == 0x000008, "Wrong alignment on BrickComboBoxWidget_AddItemContainerWidget");
static_assert(sizeof(BrickComboBoxWidget_AddItemContainerWidget) == 0x000010, "Wrong size on BrickComboBoxWidget_AddItemContainerWidget");
static_assert(offsetof(BrickComboBoxWidget_AddItemContainerWidget, Widget) == 0x000000, "Member 'BrickComboBoxWidget_AddItemContainerWidget::Widget' has a wrong offset!");
static_assert(offsetof(BrickComboBoxWidget_AddItemContainerWidget, Index_0) == 0x000008, "Member 'BrickComboBoxWidget_AddItemContainerWidget::Index_0' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.AddSelectedItemWidget
// 0x0008 (0x0008 - 0x0000)
struct BrickComboBoxWidget_AddSelectedItemWidget final
{
public:
	class UBrickComboBoxItemWidget*               Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_AddSelectedItemWidget) == 0x000008, "Wrong alignment on BrickComboBoxWidget_AddSelectedItemWidget");
static_assert(sizeof(BrickComboBoxWidget_AddSelectedItemWidget) == 0x000008, "Wrong size on BrickComboBoxWidget_AddSelectedItemWidget");
static_assert(offsetof(BrickComboBoxWidget_AddSelectedItemWidget, Widget) == 0x000000, "Member 'BrickComboBoxWidget_AddSelectedItemWidget::Widget' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.InitItems
// 0x0008 (0x0008 - 0x0000)
struct BrickComboBoxWidget_InitItems final
{
public:
	int32                                         InNumItems;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectedItem;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_InitItems) == 0x000004, "Wrong alignment on BrickComboBoxWidget_InitItems");
static_assert(sizeof(BrickComboBoxWidget_InitItems) == 0x000008, "Wrong size on BrickComboBoxWidget_InitItems");
static_assert(offsetof(BrickComboBoxWidget_InitItems, InNumItems) == 0x000000, "Member 'BrickComboBoxWidget_InitItems::InNumItems' has a wrong offset!");
static_assert(offsetof(BrickComboBoxWidget_InitItems, InSelectedItem) == 0x000004, "Member 'BrickComboBoxWidget_InitItems::InSelectedItem' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.InitItemsComplex
// 0x0018 (0x0018 - 0x0000)
struct BrickComboBoxWidget_InitItemsComplex final
{
public:
	TArray<int32>                                 InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InSelectedItem;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComboBoxWidget_InitItemsComplex) == 0x000008, "Wrong alignment on BrickComboBoxWidget_InitItemsComplex");
static_assert(sizeof(BrickComboBoxWidget_InitItemsComplex) == 0x000018, "Wrong size on BrickComboBoxWidget_InitItemsComplex");
static_assert(offsetof(BrickComboBoxWidget_InitItemsComplex, InItems) == 0x000000, "Member 'BrickComboBoxWidget_InitItemsComplex::InItems' has a wrong offset!");
static_assert(offsetof(BrickComboBoxWidget_InitItemsComplex, InSelectedItem) == 0x000010, "Member 'BrickComboBoxWidget_InitItemsComplex::InSelectedItem' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.OnComboBoxMenuItemSelected
// 0x0008 (0x0008 - 0x0000)
struct BrickComboBoxWidget_OnComboBoxMenuItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickComboBoxWidget_OnComboBoxMenuItemSelected) == 0x000004, "Wrong alignment on BrickComboBoxWidget_OnComboBoxMenuItemSelected");
static_assert(sizeof(BrickComboBoxWidget_OnComboBoxMenuItemSelected) == 0x000008, "Wrong size on BrickComboBoxWidget_OnComboBoxMenuItemSelected");
static_assert(offsetof(BrickComboBoxWidget_OnComboBoxMenuItemSelected, Item) == 0x000000, "Member 'BrickComboBoxWidget_OnComboBoxMenuItemSelected::Item' has a wrong offset!");
static_assert(offsetof(BrickComboBoxWidget_OnComboBoxMenuItemSelected, EventType) == 0x000004, "Member 'BrickComboBoxWidget_OnComboBoxMenuItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.SetComboBoxExpanded
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxWidget_SetComboBoxExpanded final
{
public:
	bool                                          bNewExpanded;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_SetComboBoxExpanded) == 0x000001, "Wrong alignment on BrickComboBoxWidget_SetComboBoxExpanded");
static_assert(sizeof(BrickComboBoxWidget_SetComboBoxExpanded) == 0x000001, "Wrong size on BrickComboBoxWidget_SetComboBoxExpanded");
static_assert(offsetof(BrickComboBoxWidget_SetComboBoxExpanded, bNewExpanded) == 0x000000, "Member 'BrickComboBoxWidget_SetComboBoxExpanded::bNewExpanded' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.SetMaxItemsPerRow
// 0x0004 (0x0004 - 0x0000)
struct BrickComboBoxWidget_SetMaxItemsPerRow final
{
public:
	int32                                         InMaxItemsPerRow;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_SetMaxItemsPerRow) == 0x000004, "Wrong alignment on BrickComboBoxWidget_SetMaxItemsPerRow");
static_assert(sizeof(BrickComboBoxWidget_SetMaxItemsPerRow) == 0x000004, "Wrong size on BrickComboBoxWidget_SetMaxItemsPerRow");
static_assert(offsetof(BrickComboBoxWidget_SetMaxItemsPerRow, InMaxItemsPerRow) == 0x000000, "Member 'BrickComboBoxWidget_SetMaxItemsPerRow::InMaxItemsPerRow' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.SetMaxListItems
// 0x0004 (0x0004 - 0x0000)
struct BrickComboBoxWidget_SetMaxListItems final
{
public:
	int32                                         InMaxListItems;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_SetMaxListItems) == 0x000004, "Wrong alignment on BrickComboBoxWidget_SetMaxListItems");
static_assert(sizeof(BrickComboBoxWidget_SetMaxListItems) == 0x000004, "Wrong size on BrickComboBoxWidget_SetMaxListItems");
static_assert(offsetof(BrickComboBoxWidget_SetMaxListItems, InMaxListItems) == 0x000000, "Member 'BrickComboBoxWidget_SetMaxListItems::InMaxListItems' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.SetSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct BrickComboBoxWidget_SetSelectedItem final
{
public:
	int32                                         InItem;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_SetSelectedItem) == 0x000004, "Wrong alignment on BrickComboBoxWidget_SetSelectedItem");
static_assert(sizeof(BrickComboBoxWidget_SetSelectedItem) == 0x000004, "Wrong size on BrickComboBoxWidget_SetSelectedItem");
static_assert(offsetof(BrickComboBoxWidget_SetSelectedItem, InItem) == 0x000000, "Member 'BrickComboBoxWidget_SetSelectedItem::InItem' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.UpdateIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxWidget_UpdateIsExpanded final
{
public:
	bool                                          bInIsExpanded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_UpdateIsExpanded) == 0x000001, "Wrong alignment on BrickComboBoxWidget_UpdateIsExpanded");
static_assert(sizeof(BrickComboBoxWidget_UpdateIsExpanded) == 0x000001, "Wrong size on BrickComboBoxWidget_UpdateIsExpanded");
static_assert(offsetof(BrickComboBoxWidget_UpdateIsExpanded, bInIsExpanded) == 0x000000, "Member 'BrickComboBoxWidget_UpdateIsExpanded::bInIsExpanded' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.UpdateUseItemList
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxWidget_UpdateUseItemList final
{
public:
	bool                                          bInUseItemList;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_UpdateUseItemList) == 0x000001, "Wrong alignment on BrickComboBoxWidget_UpdateUseItemList");
static_assert(sizeof(BrickComboBoxWidget_UpdateUseItemList) == 0x000001, "Wrong size on BrickComboBoxWidget_UpdateUseItemList");
static_assert(offsetof(BrickComboBoxWidget_UpdateUseItemList, bInUseItemList) == 0x000000, "Member 'BrickComboBoxWidget_UpdateUseItemList::bInUseItemList' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.GetNumItems
// 0x0004 (0x0004 - 0x0000)
struct BrickComboBoxWidget_GetNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_GetNumItems) == 0x000004, "Wrong alignment on BrickComboBoxWidget_GetNumItems");
static_assert(sizeof(BrickComboBoxWidget_GetNumItems) == 0x000004, "Wrong size on BrickComboBoxWidget_GetNumItems");
static_assert(offsetof(BrickComboBoxWidget_GetNumItems, ReturnValue) == 0x000000, "Member 'BrickComboBoxWidget_GetNumItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.GetSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct BrickComboBoxWidget_GetSelectedItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_GetSelectedItem) == 0x000004, "Wrong alignment on BrickComboBoxWidget_GetSelectedItem");
static_assert(sizeof(BrickComboBoxWidget_GetSelectedItem) == 0x000004, "Wrong size on BrickComboBoxWidget_GetSelectedItem");
static_assert(offsetof(BrickComboBoxWidget_GetSelectedItem, ReturnValue) == 0x000000, "Member 'BrickComboBoxWidget_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct BrickComboBoxWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on BrickComboBoxWidget_GetWidgetToFocus");
static_assert(sizeof(BrickComboBoxWidget_GetWidgetToFocus) == 0x000008, "Wrong size on BrickComboBoxWidget_GetWidgetToFocus");
static_assert(offsetof(BrickComboBoxWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'BrickComboBoxWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickComboBoxWidget.IsComboBoxExpanded
// 0x0001 (0x0001 - 0x0000)
struct BrickComboBoxWidget_IsComboBoxExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickComboBoxWidget_IsComboBoxExpanded) == 0x000001, "Wrong alignment on BrickComboBoxWidget_IsComboBoxExpanded");
static_assert(sizeof(BrickComboBoxWidget_IsComboBoxExpanded) == 0x000001, "Wrong size on BrickComboBoxWidget_IsComboBoxExpanded");
static_assert(offsetof(BrickComboBoxWidget_IsComboBoxExpanded, ReturnValue) == 0x000000, "Member 'BrickComboBoxWidget_IsComboBoxExpanded::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.ConstructVehicle
// 0x0100 (0x0100 - 0x0000)
struct BrickVehicle_ConstructVehicle final
{
public:
	struct FUGCFileInfo                           InFileInfo;                                        // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 InSpawnPoint;                                      // 0x00E8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickPlayerController*                 InSpawningPC;                                      // 0x00F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidCollision;                                   // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickVehicle_ConstructVehicle) == 0x000008, "Wrong alignment on BrickVehicle_ConstructVehicle");
static_assert(sizeof(BrickVehicle_ConstructVehicle) == 0x000100, "Wrong size on BrickVehicle_ConstructVehicle");
static_assert(offsetof(BrickVehicle_ConstructVehicle, InFileInfo) == 0x000000, "Member 'BrickVehicle_ConstructVehicle::InFileInfo' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ConstructVehicle, InSpawnPoint) == 0x0000E8, "Member 'BrickVehicle_ConstructVehicle::InSpawnPoint' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ConstructVehicle, InSpawningPC) == 0x0000F0, "Member 'BrickVehicle_ConstructVehicle::InSpawningPC' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ConstructVehicle, bAvoidCollision) == 0x0000F8, "Member 'BrickVehicle_ConstructVehicle::bAvoidCollision' has a wrong offset!");

// Function BrickRigs.BrickVehicle.Interact_EnterVehicle
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_Interact_EnterVehicle final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_Interact_EnterVehicle) == 0x000008, "Wrong alignment on BrickVehicle_Interact_EnterVehicle");
static_assert(sizeof(BrickVehicle_Interact_EnterVehicle) == 0x000008, "Wrong size on BrickVehicle_Interact_EnterVehicle");
static_assert(offsetof(BrickVehicle_Interact_EnterVehicle, OtherPC) == 0x000000, "Member 'BrickVehicle_Interact_EnterVehicle::OtherPC' has a wrong offset!");

// Function BrickRigs.BrickVehicle.Interact_ScrapVehicleFromInteraction
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_Interact_ScrapVehicleFromInteraction final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_Interact_ScrapVehicleFromInteraction) == 0x000008, "Wrong alignment on BrickVehicle_Interact_ScrapVehicleFromInteraction");
static_assert(sizeof(BrickVehicle_Interact_ScrapVehicleFromInteraction) == 0x000008, "Wrong size on BrickVehicle_Interact_ScrapVehicleFromInteraction");
static_assert(offsetof(BrickVehicle_Interact_ScrapVehicleFromInteraction, OtherPC) == 0x000000, "Member 'BrickVehicle_Interact_ScrapVehicleFromInteraction::OtherPC' has a wrong offset!");

// Function BrickRigs.BrickVehicle.Interact_ScrapVehicleFromMap
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_Interact_ScrapVehicleFromMap final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_Interact_ScrapVehicleFromMap) == 0x000008, "Wrong alignment on BrickVehicle_Interact_ScrapVehicleFromMap");
static_assert(sizeof(BrickVehicle_Interact_ScrapVehicleFromMap) == 0x000008, "Wrong size on BrickVehicle_Interact_ScrapVehicleFromMap");
static_assert(offsetof(BrickVehicle_Interact_ScrapVehicleFromMap, OtherPC) == 0x000000, "Member 'BrickVehicle_Interact_ScrapVehicleFromMap::OtherPC' has a wrong offset!");

// Function BrickRigs.BrickVehicle.PlayHandlingSound
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_PlayHandlingSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_PlayHandlingSound) == 0x000008, "Wrong alignment on BrickVehicle_PlayHandlingSound");
static_assert(sizeof(BrickVehicle_PlayHandlingSound) == 0x000008, "Wrong size on BrickVehicle_PlayHandlingSound");
static_assert(offsetof(BrickVehicle_PlayHandlingSound, Sound) == 0x000000, "Member 'BrickVehicle_PlayHandlingSound::Sound' has a wrong offset!");

// Function BrickRigs.BrickVehicle.RepairVehicle
// 0x0028 (0x0028 - 0x0000)
struct BrickVehicle_RepairVehicle final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 InSpawnPoint;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidCollision;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickVehicle_RepairVehicle) == 0x000008, "Wrong alignment on BrickVehicle_RepairVehicle");
static_assert(sizeof(BrickVehicle_RepairVehicle) == 0x000028, "Wrong size on BrickVehicle_RepairVehicle");
static_assert(offsetof(BrickVehicle_RepairVehicle, InLocation) == 0x000000, "Member 'BrickVehicle_RepairVehicle::InLocation' has a wrong offset!");
static_assert(offsetof(BrickVehicle_RepairVehicle, InRotation) == 0x00000C, "Member 'BrickVehicle_RepairVehicle::InRotation' has a wrong offset!");
static_assert(offsetof(BrickVehicle_RepairVehicle, InSpawnPoint) == 0x000018, "Member 'BrickVehicle_RepairVehicle::InSpawnPoint' has a wrong offset!");
static_assert(offsetof(BrickVehicle_RepairVehicle, bAvoidCollision) == 0x000020, "Member 'BrickVehicle_RepairVehicle::bAvoidCollision' has a wrong offset!");

// Function BrickRigs.BrickVehicle.ServerApplySeatCollisionDamage
// 0x000C (0x000C - 0x0000)
struct BrickVehicle_ServerApplySeatCollisionDamage final
{
public:
	struct FBrickEditorObjectID                   SeatID;                                            // 0x0000(0x0002)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x0008(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickVehicle_ServerApplySeatCollisionDamage) == 0x000004, "Wrong alignment on BrickVehicle_ServerApplySeatCollisionDamage");
static_assert(sizeof(BrickVehicle_ServerApplySeatCollisionDamage) == 0x00000C, "Wrong size on BrickVehicle_ServerApplySeatCollisionDamage");
static_assert(offsetof(BrickVehicle_ServerApplySeatCollisionDamage, SeatID) == 0x000000, "Member 'BrickVehicle_ServerApplySeatCollisionDamage::SeatID' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ServerApplySeatCollisionDamage, DamageAmount) == 0x000004, "Member 'BrickVehicle_ServerApplySeatCollisionDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ServerApplySeatCollisionDamage, ComparisonIndex) == 0x000008, "Member 'BrickVehicle_ServerApplySeatCollisionDamage::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BrickVehicle.ServerExplodeTankBricks
// 0x0018 (0x0018 - 0x0000)
struct BrickVehicle_ServerExplodeTankBricks final
{
public:
	TArray<struct FBrickEditorObjectID>           Tanks;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x0010(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickVehicle_ServerExplodeTankBricks) == 0x000008, "Wrong alignment on BrickVehicle_ServerExplodeTankBricks");
static_assert(sizeof(BrickVehicle_ServerExplodeTankBricks) == 0x000018, "Wrong size on BrickVehicle_ServerExplodeTankBricks");
static_assert(offsetof(BrickVehicle_ServerExplodeTankBricks, Tanks) == 0x000000, "Member 'BrickVehicle_ServerExplodeTankBricks::Tanks' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ServerExplodeTankBricks, ComparisonIndex) == 0x000010, "Member 'BrickVehicle_ServerExplodeTankBricks::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BrickVehicle.ServerOnBrokeDestructibleInstances
// 0x0020 (0x0020 - 0x0000)
struct BrickVehicle_ServerOnBrokeDestructibleInstances final
{
public:
	class UDestructibleInstancesComponent*        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint16>                                Instances;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x0018(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickVehicle_ServerOnBrokeDestructibleInstances) == 0x000008, "Wrong alignment on BrickVehicle_ServerOnBrokeDestructibleInstances");
static_assert(sizeof(BrickVehicle_ServerOnBrokeDestructibleInstances) == 0x000020, "Wrong size on BrickVehicle_ServerOnBrokeDestructibleInstances");
static_assert(offsetof(BrickVehicle_ServerOnBrokeDestructibleInstances, Comp) == 0x000000, "Member 'BrickVehicle_ServerOnBrokeDestructibleInstances::Comp' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ServerOnBrokeDestructibleInstances, Instances) == 0x000008, "Member 'BrickVehicle_ServerOnBrokeDestructibleInstances::Instances' has a wrong offset!");
static_assert(offsetof(BrickVehicle_ServerOnBrokeDestructibleInstances, ComparisonIndex) == 0x000018, "Member 'BrickVehicle_ServerOnBrokeDestructibleInstances::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BrickVehicle.SetFuelLevel
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_SetFuelLevel final
{
public:
	float                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_SetFuelLevel) == 0x000004, "Wrong alignment on BrickVehicle_SetFuelLevel");
static_assert(sizeof(BrickVehicle_SetFuelLevel) == 0x000004, "Wrong size on BrickVehicle_SetFuelLevel");
static_assert(offsetof(BrickVehicle_SetFuelLevel, NewLevel) == 0x000000, "Member 'BrickVehicle_SetFuelLevel::NewLevel' has a wrong offset!");

// Function BrickRigs.BrickVehicle.SetPinMode
// 0x0001 (0x0001 - 0x0000)
struct BrickVehicle_SetPinMode final
{
public:
	EVehiclePinMode                               NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_SetPinMode) == 0x000001, "Wrong alignment on BrickVehicle_SetPinMode");
static_assert(sizeof(BrickVehicle_SetPinMode) == 0x000001, "Wrong size on BrickVehicle_SetPinMode");
static_assert(offsetof(BrickVehicle_SetPinMode, NewMode) == 0x000000, "Member 'BrickVehicle_SetPinMode::NewMode' has a wrong offset!");

// Function BrickRigs.BrickVehicle.SetRelativeFuelLevel
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_SetRelativeFuelLevel final
{
public:
	float                                         NewLevel;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_SetRelativeFuelLevel) == 0x000004, "Wrong alignment on BrickVehicle_SetRelativeFuelLevel");
static_assert(sizeof(BrickVehicle_SetRelativeFuelLevel) == 0x000004, "Wrong size on BrickVehicle_SetRelativeFuelLevel");
static_assert(offsetof(BrickVehicle_SetRelativeFuelLevel, NewLevel) == 0x000000, "Member 'BrickVehicle_SetRelativeFuelLevel::NewLevel' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetAmmo
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetAmmo) == 0x000004, "Wrong alignment on BrickVehicle_GetAmmo");
static_assert(sizeof(BrickVehicle_GetAmmo) == 0x000004, "Wrong size on BrickVehicle_GetAmmo");
static_assert(offsetof(BrickVehicle_GetAmmo, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetAmmo::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetAmmoCapacity
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetAmmoCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetAmmoCapacity) == 0x000004, "Wrong alignment on BrickVehicle_GetAmmoCapacity");
static_assert(sizeof(BrickVehicle_GetAmmoCapacity) == 0x000004, "Wrong size on BrickVehicle_GetAmmoCapacity");
static_assert(offsetof(BrickVehicle_GetAmmoCapacity, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetAmmoCapacity::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetCameras
// 0x0010 (0x0010 - 0x0000)
struct BrickVehicle_GetCameras final
{
public:
	TArray<struct FBrickEditorObjectID>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetCameras) == 0x000008, "Wrong alignment on BrickVehicle_GetCameras");
static_assert(sizeof(BrickVehicle_GetCameras) == 0x000010, "Wrong size on BrickVehicle_GetCameras");
static_assert(offsetof(BrickVehicle_GetCameras, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetCameras::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetCurrentRPM
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetCurrentRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetCurrentRPM) == 0x000004, "Wrong alignment on BrickVehicle_GetCurrentRPM");
static_assert(sizeof(BrickVehicle_GetCurrentRPM) == 0x000004, "Wrong size on BrickVehicle_GetCurrentRPM");
static_assert(offsetof(BrickVehicle_GetCurrentRPM, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetCurrentRPM::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetDriverCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetDriverCharacter final
{
public:
	class ABrickCharacter*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetDriverCharacter) == 0x000008, "Wrong alignment on BrickVehicle_GetDriverCharacter");
static_assert(sizeof(BrickVehicle_GetDriverCharacter) == 0x000008, "Wrong size on BrickVehicle_GetDriverCharacter");
static_assert(offsetof(BrickVehicle_GetDriverCharacter, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetDriverCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetDriverSeat
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetDriverSeat final
{
public:
	class USeatBrick*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetDriverSeat) == 0x000008, "Wrong alignment on BrickVehicle_GetDriverSeat");
static_assert(sizeof(BrickVehicle_GetDriverSeat) == 0x000008, "Wrong size on BrickVehicle_GetDriverSeat");
static_assert(offsetof(BrickVehicle_GetDriverSeat, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetDriverSeat::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetFuelCapacity
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetFuelCapacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetFuelCapacity) == 0x000004, "Wrong alignment on BrickVehicle_GetFuelCapacity");
static_assert(sizeof(BrickVehicle_GetFuelCapacity) == 0x000004, "Wrong size on BrickVehicle_GetFuelCapacity");
static_assert(offsetof(BrickVehicle_GetFuelCapacity, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetFuelCapacity::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetFuelLevel
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetFuelLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetFuelLevel) == 0x000004, "Wrong alignment on BrickVehicle_GetFuelLevel");
static_assert(sizeof(BrickVehicle_GetFuelLevel) == 0x000004, "Wrong size on BrickVehicle_GetFuelLevel");
static_assert(offsetof(BrickVehicle_GetFuelLevel, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetFuelLevel::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetGuns
// 0x0010 (0x0010 - 0x0000)
struct BrickVehicle_GetGuns final
{
public:
	TArray<struct FBrickEditorObjectID>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetGuns) == 0x000008, "Wrong alignment on BrickVehicle_GetGuns");
static_assert(sizeof(BrickVehicle_GetGuns) == 0x000010, "Wrong size on BrickVehicle_GetGuns");
static_assert(offsetof(BrickVehicle_GetGuns, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetGuns::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetInventoryComponent
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetInventoryComponent final
{
public:
	class UInventoryComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetInventoryComponent) == 0x000008, "Wrong alignment on BrickVehicle_GetInventoryComponent");
static_assert(sizeof(BrickVehicle_GetInventoryComponent) == 0x000008, "Wrong size on BrickVehicle_GetInventoryComponent");
static_assert(offsetof(BrickVehicle_GetInventoryComponent, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetInventoryComponent::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetMaxRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetMaxRPM) == 0x000004, "Wrong alignment on BrickVehicle_GetMaxRPM");
static_assert(sizeof(BrickVehicle_GetMaxRPM) == 0x000004, "Wrong size on BrickVehicle_GetMaxRPM");
static_assert(offsetof(BrickVehicle_GetMaxRPM, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetMaxRPM::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetMotor
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetMotor final
{
public:
	class UMotorBrick*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetMotor) == 0x000008, "Wrong alignment on BrickVehicle_GetMotor");
static_assert(sizeof(BrickVehicle_GetMotor) == 0x000008, "Wrong size on BrickVehicle_GetMotor");
static_assert(offsetof(BrickVehicle_GetMotor, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetMotor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetNumPassengers
// 0x0004 (0x0004 - 0x0000)
struct BrickVehicle_GetNumPassengers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetNumPassengers) == 0x000004, "Wrong alignment on BrickVehicle_GetNumPassengers");
static_assert(sizeof(BrickVehicle_GetNumPassengers) == 0x000004, "Wrong size on BrickVehicle_GetNumPassengers");
static_assert(offsetof(BrickVehicle_GetNumPassengers, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetNumPassengers::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetPassengers
// 0x0010 (0x0010 - 0x0000)
struct BrickVehicle_GetPassengers final
{
public:
	TArray<class ABrickCharacter*>                OutPassengers;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetPassengers) == 0x000008, "Wrong alignment on BrickVehicle_GetPassengers");
static_assert(sizeof(BrickVehicle_GetPassengers) == 0x000010, "Wrong size on BrickVehicle_GetPassengers");
static_assert(offsetof(BrickVehicle_GetPassengers, OutPassengers) == 0x000000, "Member 'BrickVehicle_GetPassengers::OutPassengers' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetPinMode
// 0x0001 (0x0001 - 0x0000)
struct BrickVehicle_GetPinMode final
{
public:
	EVehiclePinMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetPinMode) == 0x000001, "Wrong alignment on BrickVehicle_GetPinMode");
static_assert(sizeof(BrickVehicle_GetPinMode) == 0x000001, "Wrong size on BrickVehicle_GetPinMode");
static_assert(offsetof(BrickVehicle_GetPinMode, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetPinMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetRootBrick
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetRootBrick final
{
public:
	class UBrick*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetRootBrick) == 0x000008, "Wrong alignment on BrickVehicle_GetRootBrick");
static_assert(sizeof(BrickVehicle_GetRootBrick) == 0x000008, "Wrong size on BrickVehicle_GetRootBrick");
static_assert(offsetof(BrickVehicle_GetRootBrick, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetRootBrick::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetSeats
// 0x0010 (0x0010 - 0x0000)
struct BrickVehicle_GetSeats final
{
public:
	TArray<struct FBrickEditorObjectID>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetSeats) == 0x000008, "Wrong alignment on BrickVehicle_GetSeats");
static_assert(sizeof(BrickVehicle_GetSeats) == 0x000010, "Wrong size on BrickVehicle_GetSeats");
static_assert(offsetof(BrickVehicle_GetSeats, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetSeats::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetSpawningPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetSpawningPlayerState final
{
public:
	class ABrickPlayerState*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetSpawningPlayerState) == 0x000008, "Wrong alignment on BrickVehicle_GetSpawningPlayerState");
static_assert(sizeof(BrickVehicle_GetSpawningPlayerState) == 0x000008, "Wrong size on BrickVehicle_GetSpawningPlayerState");
static_assert(offsetof(BrickVehicle_GetSpawningPlayerState, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetSpawningPlayerState::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetStaticInfo final
{
public:
	const class UBrickVehicleStaticInfo*          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetStaticInfo) == 0x000008, "Wrong alignment on BrickVehicle_GetStaticInfo");
static_assert(sizeof(BrickVehicle_GetStaticInfo) == 0x000008, "Wrong size on BrickVehicle_GetStaticInfo");
static_assert(offsetof(BrickVehicle_GetStaticInfo, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetStaticInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetVehicleComponent
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetVehicleComponent final
{
public:
	class UBrickVehicleComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetVehicleComponent) == 0x000008, "Wrong alignment on BrickVehicle_GetVehicleComponent");
static_assert(sizeof(BrickVehicle_GetVehicleComponent) == 0x000008, "Wrong size on BrickVehicle_GetVehicleComponent");
static_assert(offsetof(BrickVehicle_GetVehicleComponent, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetVehicleComponent::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetVehicleDisplayName
// 0x0018 (0x0018 - 0x0000)
struct BrickVehicle_GetVehicleDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetVehicleDisplayName) == 0x000008, "Wrong alignment on BrickVehicle_GetVehicleDisplayName");
static_assert(sizeof(BrickVehicle_GetVehicleDisplayName) == 0x000018, "Wrong size on BrickVehicle_GetVehicleDisplayName");
static_assert(offsetof(BrickVehicle_GetVehicleDisplayName, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetVehicleDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetVehicleFileInfo
// 0x00E8 (0x00E8 - 0x0000)
struct BrickVehicle_GetVehicleFileInfo final
{
public:
	struct FUGCFileInfo                           ReturnValue;                                       // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetVehicleFileInfo) == 0x000008, "Wrong alignment on BrickVehicle_GetVehicleFileInfo");
static_assert(sizeof(BrickVehicle_GetVehicleFileInfo) == 0x0000E8, "Wrong size on BrickVehicle_GetVehicleFileInfo");
static_assert(offsetof(BrickVehicle_GetVehicleFileInfo, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetVehicleFileInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetViewedSeat
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetViewedSeat final
{
public:
	class USeatBrick*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetViewedSeat) == 0x000008, "Wrong alignment on BrickVehicle_GetViewedSeat");
static_assert(sizeof(BrickVehicle_GetViewedSeat) == 0x000008, "Wrong size on BrickVehicle_GetViewedSeat");
static_assert(offsetof(BrickVehicle_GetViewedSeat, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetViewedSeat::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.GetViewTargetCamera
// 0x0008 (0x0008 - 0x0000)
struct BrickVehicle_GetViewTargetCamera final
{
public:
	class UCameraBrick*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_GetViewTargetCamera) == 0x000008, "Wrong alignment on BrickVehicle_GetViewTargetCamera");
static_assert(sizeof(BrickVehicle_GetViewTargetCamera) == 0x000008, "Wrong size on BrickVehicle_GetViewTargetCamera");
static_assert(offsetof(BrickVehicle_GetViewTargetCamera, ReturnValue) == 0x000000, "Member 'BrickVehicle_GetViewTargetCamera::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.HasVisibleSeat
// 0x0001 (0x0001 - 0x0000)
struct BrickVehicle_HasVisibleSeat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_HasVisibleSeat) == 0x000001, "Wrong alignment on BrickVehicle_HasVisibleSeat");
static_assert(sizeof(BrickVehicle_HasVisibleSeat) == 0x000001, "Wrong size on BrickVehicle_HasVisibleSeat");
static_assert(offsetof(BrickVehicle_HasVisibleSeat, ReturnValue) == 0x000000, "Member 'BrickVehicle_HasVisibleSeat::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct BrickVehicle_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_IsInteracting) == 0x000001, "Wrong alignment on BrickVehicle_IsInteracting");
static_assert(sizeof(BrickVehicle_IsInteracting) == 0x000001, "Wrong size on BrickVehicle_IsInteracting");
static_assert(offsetof(BrickVehicle_IsInteracting, ReturnValue) == 0x000000, "Member 'BrickVehicle_IsInteracting::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVehicle.IsVehicleConstructed
// 0x0001 (0x0001 - 0x0000)
struct BrickVehicle_IsVehicleConstructed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVehicle_IsVehicleConstructed) == 0x000001, "Wrong alignment on BrickVehicle_IsVehicleConstructed");
static_assert(sizeof(BrickVehicle_IsVehicleConstructed) == 0x000001, "Wrong size on BrickVehicle_IsVehicleConstructed");
static_assert(offsetof(BrickVehicle_IsVehicleConstructed, ReturnValue) == 0x000000, "Member 'BrickVehicle_IsVehicleConstructed::ReturnValue' has a wrong offset!");

// Function BrickRigs.MyUserSettings.Get
// 0x0008 (0x0008 - 0x0000)
struct MyUserSettings_Get final
{
public:
	class UMyUserSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyUserSettings_Get) == 0x000008, "Wrong alignment on MyUserSettings_Get");
static_assert(sizeof(MyUserSettings_Get) == 0x000008, "Wrong size on MyUserSettings_Get");
static_assert(offsetof(MyUserSettings_Get, ReturnValue) == 0x000000, "Member 'MyUserSettings_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.Attachment.GetFirearm
// 0x0008 (0x0008 - 0x0000)
struct Attachment_GetFirearm final
{
public:
	class AFirearm*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Attachment_GetFirearm) == 0x000008, "Wrong alignment on Attachment_GetFirearm");
static_assert(sizeof(Attachment_GetFirearm) == 0x000008, "Wrong size on Attachment_GetFirearm");
static_assert(offsetof(Attachment_GetFirearm, ReturnValue) == 0x000000, "Member 'Attachment_GetFirearm::ReturnValue' has a wrong offset!");

// Function BrickRigs.ChatWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct ChatWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on ChatWidget_GetWidgetToFocus");
static_assert(sizeof(ChatWidget_GetWidgetToFocus) == 0x000008, "Wrong size on ChatWidget_GetWidgetToFocus");
static_assert(offsetof(ChatWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'ChatWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.ChatWidget.OnTextChanged
// 0x0020 (0x0020 - 0x0000)
struct ChatWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatWidget_OnTextChanged) == 0x000008, "Wrong alignment on ChatWidget_OnTextChanged");
static_assert(sizeof(ChatWidget_OnTextChanged) == 0x000020, "Wrong size on ChatWidget_OnTextChanged");
static_assert(offsetof(ChatWidget_OnTextChanged, Text) == 0x000000, "Member 'ChatWidget_OnTextChanged::Text' has a wrong offset!");
static_assert(offsetof(ChatWidget_OnTextChanged, EventType) == 0x000018, "Member 'ChatWidget_OnTextChanged::EventType' has a wrong offset!");

// Function BrickRigs.ChatWidget.UpdateIsFocused
// 0x0001 (0x0001 - 0x0000)
struct ChatWidget_UpdateIsFocused final
{
public:
	bool                                          bNewFocused;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWidget_UpdateIsFocused) == 0x000001, "Wrong alignment on ChatWidget_UpdateIsFocused");
static_assert(sizeof(ChatWidget_UpdateIsFocused) == 0x000001, "Wrong size on ChatWidget_UpdateIsFocused");
static_assert(offsetof(ChatWidget_UpdateIsFocused, bNewFocused) == 0x000000, "Member 'ChatWidget_UpdateIsFocused::bNewFocused' has a wrong offset!");

// Function BrickRigs.ChatWidget.UpdateIsTyping
// 0x0001 (0x0001 - 0x0000)
struct ChatWidget_UpdateIsTyping final
{
public:
	bool                                          bNewTyping;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWidget_UpdateIsTyping) == 0x000001, "Wrong alignment on ChatWidget_UpdateIsTyping");
static_assert(sizeof(ChatWidget_UpdateIsTyping) == 0x000001, "Wrong size on ChatWidget_UpdateIsTyping");
static_assert(offsetof(ChatWidget_UpdateIsTyping, bNewTyping) == 0x000000, "Member 'ChatWidget_UpdateIsTyping::bNewTyping' has a wrong offset!");

// Function BrickRigs.ChatWidget.UpdateScrollBoxVisibility
// 0x0001 (0x0001 - 0x0000)
struct ChatWidget_UpdateScrollBoxVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWidget_UpdateScrollBoxVisibility) == 0x000001, "Wrong alignment on ChatWidget_UpdateScrollBoxVisibility");
static_assert(sizeof(ChatWidget_UpdateScrollBoxVisibility) == 0x000001, "Wrong size on ChatWidget_UpdateScrollBoxVisibility");
static_assert(offsetof(ChatWidget_UpdateScrollBoxVisibility, bNewVisible) == 0x000000, "Member 'ChatWidget_UpdateScrollBoxVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.MainWidgetBase.GetButtonPanel
// 0x0008 (0x0008 - 0x0000)
struct MainWidgetBase_GetButtonPanel final
{
public:
	class UMenuButtonPanelWidget*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainWidgetBase_GetButtonPanel) == 0x000008, "Wrong alignment on MainWidgetBase_GetButtonPanel");
static_assert(sizeof(MainWidgetBase_GetButtonPanel) == 0x000008, "Wrong size on MainWidgetBase_GetButtonPanel");
static_assert(offsetof(MainWidgetBase_GetButtonPanel, ReturnValue) == 0x000000, "Member 'MainWidgetBase_GetButtonPanel::ReturnValue' has a wrong offset!");

// Function BrickRigs.MainWidgetBase.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MainWidgetBase_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainWidgetBase_GetWidgetToFocus) == 0x000008, "Wrong alignment on MainWidgetBase_GetWidgetToFocus");
static_assert(sizeof(MainWidgetBase_GetWidgetToFocus) == 0x000008, "Wrong size on MainWidgetBase_GetWidgetToFocus");
static_assert(offsetof(MainWidgetBase_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MainWidgetBase_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.MainWidgetBase.GetWindowManager
// 0x0008 (0x0008 - 0x0000)
struct MainWidgetBase_GetWindowManager final
{
public:
	class UWindowManagerWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainWidgetBase_GetWindowManager) == 0x000008, "Wrong alignment on MainWidgetBase_GetWindowManager");
static_assert(sizeof(MainWidgetBase_GetWindowManager) == 0x000008, "Wrong size on MainWidgetBase_GetWindowManager");
static_assert(offsetof(MainWidgetBase_GetWindowManager, ReturnValue) == 0x000000, "Member 'MainWidgetBase_GetWindowManager::ReturnValue' has a wrong offset!");

// Function BrickRigs.LoadingScreenWidget.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct LoadingScreenWidget_SetBackgroundColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenWidget_SetBackgroundColor) == 0x000004, "Wrong alignment on LoadingScreenWidget_SetBackgroundColor");
static_assert(sizeof(LoadingScreenWidget_SetBackgroundColor) == 0x000010, "Wrong size on LoadingScreenWidget_SetBackgroundColor");
static_assert(offsetof(LoadingScreenWidget_SetBackgroundColor, InColor) == 0x000000, "Member 'LoadingScreenWidget_SetBackgroundColor::InColor' has a wrong offset!");

// Function BrickRigs.LoadingScreenWidget.SetLoadingText
// 0x0018 (0x0018 - 0x0000)
struct LoadingScreenWidget_SetLoadingText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenWidget_SetLoadingText) == 0x000008, "Wrong alignment on LoadingScreenWidget_SetLoadingText");
static_assert(sizeof(LoadingScreenWidget_SetLoadingText) == 0x000018, "Wrong size on LoadingScreenWidget_SetLoadingText");
static_assert(offsetof(LoadingScreenWidget_SetLoadingText, Text) == 0x000000, "Member 'LoadingScreenWidget_SetLoadingText::Text' has a wrong offset!");

// Function BrickRigs.PhysicsConstraintConnection.OnConstraintBroken
// 0x0004 (0x0004 - 0x0000)
struct PhysicsConstraintConnection_OnConstraintBroken final
{
public:
	int32                                         ConstraintIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsConstraintConnection_OnConstraintBroken) == 0x000004, "Wrong alignment on PhysicsConstraintConnection_OnConstraintBroken");
static_assert(sizeof(PhysicsConstraintConnection_OnConstraintBroken) == 0x000004, "Wrong size on PhysicsConstraintConnection_OnConstraintBroken");
static_assert(offsetof(PhysicsConstraintConnection_OnConstraintBroken, ConstraintIndex) == 0x000000, "Member 'PhysicsConstraintConnection_OnConstraintBroken::ConstraintIndex' has a wrong offset!");

// Function BrickRigs.FuelTank.ShouldSpawnLeakOnHit
// 0x008C (0x008C - 0x0000)
struct FuelTank_ShouldSpawnLeakOnHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FuelTank_ShouldSpawnLeakOnHit) == 0x000004, "Wrong alignment on FuelTank_ShouldSpawnLeakOnHit");
static_assert(sizeof(FuelTank_ShouldSpawnLeakOnHit) == 0x00008C, "Wrong size on FuelTank_ShouldSpawnLeakOnHit");
static_assert(offsetof(FuelTank_ShouldSpawnLeakOnHit, Hit) == 0x000000, "Member 'FuelTank_ShouldSpawnLeakOnHit::Hit' has a wrong offset!");
static_assert(offsetof(FuelTank_ShouldSpawnLeakOnHit, ReturnValue) == 0x000088, "Member 'FuelTank_ShouldSpawnLeakOnHit::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickViewportClient.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickViewportClient_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickViewportClient*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickViewportClient_Get) == 0x000008, "Wrong alignment on BrickViewportClient_Get");
static_assert(sizeof(BrickViewportClient_Get) == 0x000010, "Wrong size on BrickViewportClient_Get");
static_assert(offsetof(BrickViewportClient_Get, WorldContextObject) == 0x000000, "Member 'BrickViewportClient_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickViewportClient_Get, ReturnValue) == 0x000008, "Member 'BrickViewportClient_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.MenuButtonWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct MenuButtonWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonWidget_SetColorStyle) == 0x000001, "Wrong alignment on MenuButtonWidget_SetColorStyle");
static_assert(sizeof(MenuButtonWidget_SetColorStyle) == 0x000001, "Wrong size on MenuButtonWidget_SetColorStyle");
static_assert(offsetof(MenuButtonWidget_SetColorStyle, InColorStyle) == 0x000000, "Member 'MenuButtonWidget_SetColorStyle::InColorStyle' has a wrong offset!");

// Function BrickRigs.MenuButtonWidget.SetDisplayIcon
// 0x0004 (0x0004 - 0x0000)
struct MenuButtonWidget_SetDisplayIcon final
{
public:
	int32                                         InIconIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonWidget_SetDisplayIcon) == 0x000004, "Wrong alignment on MenuButtonWidget_SetDisplayIcon");
static_assert(sizeof(MenuButtonWidget_SetDisplayIcon) == 0x000004, "Wrong size on MenuButtonWidget_SetDisplayIcon");
static_assert(offsetof(MenuButtonWidget_SetDisplayIcon, InIconIndex) == 0x000000, "Member 'MenuButtonWidget_SetDisplayIcon::InIconIndex' has a wrong offset!");

// Function BrickRigs.MenuButtonWidget.SetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct MenuButtonWidget_SetDisplayText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonWidget_SetDisplayText) == 0x000008, "Wrong alignment on MenuButtonWidget_SetDisplayText");
static_assert(sizeof(MenuButtonWidget_SetDisplayText) == 0x000018, "Wrong size on MenuButtonWidget_SetDisplayText");
static_assert(offsetof(MenuButtonWidget_SetDisplayText, InText) == 0x000000, "Member 'MenuButtonWidget_SetDisplayText::InText' has a wrong offset!");

// Function BrickRigs.MenuButtonWidget.UpdateDisplayText
// 0x0018 (0x0018 - 0x0000)
struct MenuButtonWidget_UpdateDisplayText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonWidget_UpdateDisplayText) == 0x000008, "Wrong alignment on MenuButtonWidget_UpdateDisplayText");
static_assert(sizeof(MenuButtonWidget_UpdateDisplayText) == 0x000018, "Wrong size on MenuButtonWidget_UpdateDisplayText");
static_assert(offsetof(MenuButtonWidget_UpdateDisplayText, InText) == 0x000000, "Member 'MenuButtonWidget_UpdateDisplayText::InText' has a wrong offset!");

// Function BrickRigs.MatchStateWidget.UpdateMatchState
// 0x0020 (0x0020 - 0x0000)
struct MatchStateWidget_UpdateMatchState final
{
public:
	class FText                                   NewDisplayText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFadeOut;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchStateWidget_UpdateMatchState) == 0x000008, "Wrong alignment on MatchStateWidget_UpdateMatchState");
static_assert(sizeof(MatchStateWidget_UpdateMatchState) == 0x000020, "Wrong size on MatchStateWidget_UpdateMatchState");
static_assert(offsetof(MatchStateWidget_UpdateMatchState, NewDisplayText) == 0x000000, "Member 'MatchStateWidget_UpdateMatchState::NewDisplayText' has a wrong offset!");
static_assert(offsetof(MatchStateWidget_UpdateMatchState, NewColorStyle) == 0x000018, "Member 'MatchStateWidget_UpdateMatchState::NewColorStyle' has a wrong offset!");
static_assert(offsetof(MatchStateWidget_UpdateMatchState, bFadeOut) == 0x000019, "Member 'MatchStateWidget_UpdateMatchState::bFadeOut' has a wrong offset!");

// Function BrickRigs.BaseCharacter.ClientOnReceivedDamage
// 0x000C (0x000C - 0x0000)
struct BaseCharacter_ClientOnReceivedDamage final
{
public:
	struct FCharacterDamageInfo                   DamageInfo;                                        // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_ClientOnReceivedDamage) == 0x000004, "Wrong alignment on BaseCharacter_ClientOnReceivedDamage");
static_assert(sizeof(BaseCharacter_ClientOnReceivedDamage) == 0x00000C, "Wrong size on BaseCharacter_ClientOnReceivedDamage");
static_assert(offsetof(BaseCharacter_ClientOnReceivedDamage, DamageInfo) == 0x000000, "Member 'BaseCharacter_ClientOnReceivedDamage::DamageInfo' has a wrong offset!");

// Function BrickRigs.BaseCharacter.Interact_Possess
// 0x0008 (0x0008 - 0x0000)
struct BaseCharacter_Interact_Possess final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_Interact_Possess) == 0x000008, "Wrong alignment on BaseCharacter_Interact_Possess");
static_assert(sizeof(BaseCharacter_Interact_Possess) == 0x000008, "Wrong size on BaseCharacter_Interact_Possess");
static_assert(offsetof(BaseCharacter_Interact_Possess, OtherPC) == 0x000000, "Member 'BaseCharacter_Interact_Possess::OtherPC' has a wrong offset!");

// Function BrickRigs.BaseCharacter.IsPerformingMeleeAction
// 0x0001 (0x0001 - 0x0000)
struct BaseCharacter_IsPerformingMeleeAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_IsPerformingMeleeAction) == 0x000001, "Wrong alignment on BaseCharacter_IsPerformingMeleeAction");
static_assert(sizeof(BaseCharacter_IsPerformingMeleeAction) == 0x000001, "Wrong size on BaseCharacter_IsPerformingMeleeAction");
static_assert(offsetof(BaseCharacter_IsPerformingMeleeAction, ReturnValue) == 0x000000, "Member 'BaseCharacter_IsPerformingMeleeAction::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseCharacter.OnMeshHit
// 0x00B0 (0x00B0 - 0x0000)
struct BaseCharacter_OnMeshHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseCharacter_OnMeshHit) == 0x000008, "Wrong alignment on BaseCharacter_OnMeshHit");
static_assert(sizeof(BaseCharacter_OnMeshHit) == 0x0000B0, "Wrong size on BaseCharacter_OnMeshHit");
static_assert(offsetof(BaseCharacter_OnMeshHit, HitComponent) == 0x000000, "Member 'BaseCharacter_OnMeshHit::HitComponent' has a wrong offset!");
static_assert(offsetof(BaseCharacter_OnMeshHit, OtherActor) == 0x000008, "Member 'BaseCharacter_OnMeshHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BaseCharacter_OnMeshHit, OtherComp) == 0x000010, "Member 'BaseCharacter_OnMeshHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BaseCharacter_OnMeshHit, NormalImpulse) == 0x000018, "Member 'BaseCharacter_OnMeshHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BaseCharacter_OnMeshHit, Hit) == 0x000024, "Member 'BaseCharacter_OnMeshHit::Hit' has a wrong offset!");

// Function BrickRigs.BaseCharacter.PerformMeleeAction
// 0x0001 (0x0001 - 0x0000)
struct BaseCharacter_PerformMeleeAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_PerformMeleeAction) == 0x000001, "Wrong alignment on BaseCharacter_PerformMeleeAction");
static_assert(sizeof(BaseCharacter_PerformMeleeAction) == 0x000001, "Wrong size on BaseCharacter_PerformMeleeAction");
static_assert(offsetof(BaseCharacter_PerformMeleeAction, ReturnValue) == 0x000000, "Member 'BaseCharacter_PerformMeleeAction::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseCharacter.ServerAcknowledgeRestartTransform
// 0x0001 (0x0001 - 0x0000)
struct BaseCharacter_ServerAcknowledgeRestartTransform final
{
public:
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_ServerAcknowledgeRestartTransform) == 0x000001, "Wrong alignment on BaseCharacter_ServerAcknowledgeRestartTransform");
static_assert(sizeof(BaseCharacter_ServerAcknowledgeRestartTransform) == 0x000001, "Wrong size on BaseCharacter_ServerAcknowledgeRestartTransform");
static_assert(offsetof(BaseCharacter_ServerAcknowledgeRestartTransform, ComparisonIndex) == 0x000000, "Member 'BaseCharacter_ServerAcknowledgeRestartTransform::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BaseCharacter.ServerMoveInventoryItems
// 0x0040 (0x0040 - 0x0000)
struct BaseCharacter_ServerMoveInventoryItems final
{
public:
	struct FMoveInventoryItemParams               Params_0;                                          // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FPlayerViewPoint                       ViewPoint;                                         // 0x0028(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_ServerMoveInventoryItems) == 0x000008, "Wrong alignment on BaseCharacter_ServerMoveInventoryItems");
static_assert(sizeof(BaseCharacter_ServerMoveInventoryItems) == 0x000040, "Wrong size on BaseCharacter_ServerMoveInventoryItems");
static_assert(offsetof(BaseCharacter_ServerMoveInventoryItems, Params_0) == 0x000000, "Member 'BaseCharacter_ServerMoveInventoryItems::Params_0' has a wrong offset!");
static_assert(offsetof(BaseCharacter_ServerMoveInventoryItems, ViewPoint) == 0x000028, "Member 'BaseCharacter_ServerMoveInventoryItems::ViewPoint' has a wrong offset!");

// Function BrickRigs.BaseCharacter.IsConscious
// 0x0001 (0x0001 - 0x0000)
struct BaseCharacter_IsConscious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseCharacter_IsConscious) == 0x000001, "Wrong alignment on BaseCharacter_IsConscious");
static_assert(sizeof(BaseCharacter_IsConscious) == 0x000001, "Wrong size on BaseCharacter_IsConscious");
static_assert(offsetof(BaseCharacter_IsConscious, ReturnValue) == 0x000000, "Member 'BaseCharacter_IsConscious::ReturnValue' has a wrong offset!");

// Function BrickRigs.NumericPropertyWidget.AddSliderWidget
// 0x0008 (0x0008 - 0x0000)
struct NumericPropertyWidget_AddSliderWidget final
{
public:
	class UBrickSliderWidget*                     Slider;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericPropertyWidget_AddSliderWidget) == 0x000008, "Wrong alignment on NumericPropertyWidget_AddSliderWidget");
static_assert(sizeof(NumericPropertyWidget_AddSliderWidget) == 0x000008, "Wrong size on NumericPropertyWidget_AddSliderWidget");
static_assert(offsetof(NumericPropertyWidget_AddSliderWidget, Slider) == 0x000000, "Member 'NumericPropertyWidget_AddSliderWidget::Slider' has a wrong offset!");

// Function BrickRigs.NumericPropertyWidget.LockAxes
// 0x0001 (0x0001 - 0x0000)
struct NumericPropertyWidget_LockAxes final
{
public:
	bool                                          bLock;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericPropertyWidget_LockAxes) == 0x000001, "Wrong alignment on NumericPropertyWidget_LockAxes");
static_assert(sizeof(NumericPropertyWidget_LockAxes) == 0x000001, "Wrong size on NumericPropertyWidget_LockAxes");
static_assert(offsetof(NumericPropertyWidget_LockAxes, bLock) == 0x000000, "Member 'NumericPropertyWidget_LockAxes::bLock' has a wrong offset!");

// Function BrickRigs.NumericPropertyWidget.OnSliderValueChanged
// 0x000C (0x000C - 0x0000)
struct NumericPropertyWidget_OnSliderValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericPropertyWidget_OnSliderValueChanged) == 0x000004, "Wrong alignment on NumericPropertyWidget_OnSliderValueChanged");
static_assert(sizeof(NumericPropertyWidget_OnSliderValueChanged) == 0x00000C, "Wrong size on NumericPropertyWidget_OnSliderValueChanged");
static_assert(offsetof(NumericPropertyWidget_OnSliderValueChanged, NewValue) == 0x000000, "Member 'NumericPropertyWidget_OnSliderValueChanged::NewValue' has a wrong offset!");
static_assert(offsetof(NumericPropertyWidget_OnSliderValueChanged, EventType) == 0x000004, "Member 'NumericPropertyWidget_OnSliderValueChanged::EventType' has a wrong offset!");
static_assert(offsetof(NumericPropertyWidget_OnSliderValueChanged, Index_0) == 0x000008, "Member 'NumericPropertyWidget_OnSliderValueChanged::Index_0' has a wrong offset!");

// Function BrickRigs.NumericPropertyWidget.UpdateNumericProperty
// 0x0008 (0x0008 - 0x0000)
struct NumericPropertyWidget_UpdateNumericProperty final
{
public:
	ENumericValueType                             ValueType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumAxes;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericPropertyWidget_UpdateNumericProperty) == 0x000004, "Wrong alignment on NumericPropertyWidget_UpdateNumericProperty");
static_assert(sizeof(NumericPropertyWidget_UpdateNumericProperty) == 0x000008, "Wrong size on NumericPropertyWidget_UpdateNumericProperty");
static_assert(offsetof(NumericPropertyWidget_UpdateNumericProperty, ValueType) == 0x000000, "Member 'NumericPropertyWidget_UpdateNumericProperty::ValueType' has a wrong offset!");
static_assert(offsetof(NumericPropertyWidget_UpdateNumericProperty, NumAxes) == 0x000004, "Member 'NumericPropertyWidget_UpdateNumericProperty::NumAxes' has a wrong offset!");

// Function BrickRigs.NumericPropertyWidget.AreAxesLocked
// 0x0001 (0x0001 - 0x0000)
struct NumericPropertyWidget_AreAxesLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumericPropertyWidget_AreAxesLocked) == 0x000001, "Wrong alignment on NumericPropertyWidget_AreAxesLocked");
static_assert(sizeof(NumericPropertyWidget_AreAxesLocked) == 0x000001, "Wrong size on NumericPropertyWidget_AreAxesLocked");
static_assert(offsetof(NumericPropertyWidget_AreAxesLocked, ReturnValue) == 0x000000, "Member 'NumericPropertyWidget_AreAxesLocked::ReturnValue' has a wrong offset!");

// Function BrickRigs.BasePlayerController.ClientReceiveKickedPlayerList
// 0x0020 (0x0020 - 0x0000)
struct BasePlayerController_ClientReceiveKickedPlayerList final
{
public:
	struct FKickedPlayerList                      PlayerList;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         RequestID;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_ClientReceiveKickedPlayerList) == 0x000008, "Wrong alignment on BasePlayerController_ClientReceiveKickedPlayerList");
static_assert(sizeof(BasePlayerController_ClientReceiveKickedPlayerList) == 0x000020, "Wrong size on BasePlayerController_ClientReceiveKickedPlayerList");
static_assert(offsetof(BasePlayerController_ClientReceiveKickedPlayerList, PlayerList) == 0x000000, "Member 'BasePlayerController_ClientReceiveKickedPlayerList::PlayerList' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ClientReceiveKickedPlayerList, RequestID) == 0x000018, "Member 'BasePlayerController_ClientReceiveKickedPlayerList::RequestID' has a wrong offset!");

// Function BrickRigs.BasePlayerController.KickPlayer
// 0x0050 (0x0050 - 0x0000)
struct BasePlayerController_KickPlayer final
{
public:
	struct FUniqueNetIdRepl                       OtherPlayerId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherPlayerName;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickReason;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              KickDuration;                                      // 0x0048(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_KickPlayer) == 0x000008, "Wrong alignment on BasePlayerController_KickPlayer");
static_assert(sizeof(BasePlayerController_KickPlayer) == 0x000050, "Wrong size on BasePlayerController_KickPlayer");
static_assert(offsetof(BasePlayerController_KickPlayer, OtherPlayerId) == 0x000000, "Member 'BasePlayerController_KickPlayer::OtherPlayerId' has a wrong offset!");
static_assert(offsetof(BasePlayerController_KickPlayer, OtherPlayerName) == 0x000028, "Member 'BasePlayerController_KickPlayer::OtherPlayerName' has a wrong offset!");
static_assert(offsetof(BasePlayerController_KickPlayer, KickReason) == 0x000038, "Member 'BasePlayerController_KickPlayer::KickReason' has a wrong offset!");
static_assert(offsetof(BasePlayerController_KickPlayer, KickDuration) == 0x000048, "Member 'BasePlayerController_KickPlayer::KickDuration' has a wrong offset!");

// Function BrickRigs.BasePlayerController.OpenKickPlayerPopup
// 0x0038 (0x0038 - 0x0000)
struct BasePlayerController_OpenKickPlayerPopup final
{
public:
	struct FUniqueNetIdRepl                       OtherPlayerId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherPlayerName;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_OpenKickPlayerPopup) == 0x000008, "Wrong alignment on BasePlayerController_OpenKickPlayerPopup");
static_assert(sizeof(BasePlayerController_OpenKickPlayerPopup) == 0x000038, "Wrong size on BasePlayerController_OpenKickPlayerPopup");
static_assert(offsetof(BasePlayerController_OpenKickPlayerPopup, OtherPlayerId) == 0x000000, "Member 'BasePlayerController_OpenKickPlayerPopup::OtherPlayerId' has a wrong offset!");
static_assert(offsetof(BasePlayerController_OpenKickPlayerPopup, OtherPlayerName) == 0x000028, "Member 'BasePlayerController_OpenKickPlayerPopup::OtherPlayerName' has a wrong offset!");

// Function BrickRigs.BasePlayerController.RevokeKick
// 0x0028 (0x0028 - 0x0000)
struct BasePlayerController_RevokeKick final
{
public:
	struct FUniqueNetIdRepl                       OtherPlayerId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_RevokeKick) == 0x000008, "Wrong alignment on BasePlayerController_RevokeKick");
static_assert(sizeof(BasePlayerController_RevokeKick) == 0x000028, "Wrong size on BasePlayerController_RevokeKick");
static_assert(offsetof(BasePlayerController_RevokeKick, OtherPlayerId) == 0x000000, "Member 'BasePlayerController_RevokeKick::OtherPlayerId' has a wrong offset!");

// Function BrickRigs.BasePlayerController.ServerKickPlayer
// 0x0050 (0x0050 - 0x0000)
struct BasePlayerController_ServerKickPlayer final
{
public:
	struct FUniqueNetIdRepl                       OtherPlayerId;                                     // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherPlayerName;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickReason;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              KickDuration;                                      // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_ServerKickPlayer) == 0x000008, "Wrong alignment on BasePlayerController_ServerKickPlayer");
static_assert(sizeof(BasePlayerController_ServerKickPlayer) == 0x000050, "Wrong size on BasePlayerController_ServerKickPlayer");
static_assert(offsetof(BasePlayerController_ServerKickPlayer, OtherPlayerId) == 0x000000, "Member 'BasePlayerController_ServerKickPlayer::OtherPlayerId' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ServerKickPlayer, OtherPlayerName) == 0x000028, "Member 'BasePlayerController_ServerKickPlayer::OtherPlayerName' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ServerKickPlayer, KickReason) == 0x000038, "Member 'BasePlayerController_ServerKickPlayer::KickReason' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ServerKickPlayer, KickDuration) == 0x000048, "Member 'BasePlayerController_ServerKickPlayer::KickDuration' has a wrong offset!");

// Function BrickRigs.BasePlayerController.ServerRequestKickedPlayerList
// 0x0038 (0x0038 - 0x0000)
struct BasePlayerController_ServerRequestKickedPlayerList final
{
public:
	struct FKickedPlayerListRequest               Request;                                           // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         RequestID;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_ServerRequestKickedPlayerList) == 0x000008, "Wrong alignment on BasePlayerController_ServerRequestKickedPlayerList");
static_assert(sizeof(BasePlayerController_ServerRequestKickedPlayerList) == 0x000038, "Wrong size on BasePlayerController_ServerRequestKickedPlayerList");
static_assert(offsetof(BasePlayerController_ServerRequestKickedPlayerList, Request) == 0x000000, "Member 'BasePlayerController_ServerRequestKickedPlayerList::Request' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ServerRequestKickedPlayerList, RequestID) == 0x000030, "Member 'BasePlayerController_ServerRequestKickedPlayerList::RequestID' has a wrong offset!");

// Function BrickRigs.BasePlayerController.ServerRevokeKick
// 0x0028 (0x0028 - 0x0000)
struct BasePlayerController_ServerRevokeKick final
{
public:
	struct FUniqueNetIdRepl                       OtherPlayerId;                                     // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_ServerRevokeKick) == 0x000008, "Wrong alignment on BasePlayerController_ServerRevokeKick");
static_assert(sizeof(BasePlayerController_ServerRevokeKick) == 0x000028, "Wrong size on BasePlayerController_ServerRevokeKick");
static_assert(offsetof(BasePlayerController_ServerRevokeKick, OtherPlayerId) == 0x000000, "Member 'BasePlayerController_ServerRevokeKick::OtherPlayerId' has a wrong offset!");

// Function BrickRigs.BasePlayerController.CanKickPlayer
// 0x0030 (0x0030 - 0x0000)
struct BasePlayerController_CanKickPlayer final
{
public:
	struct FUniqueNetIdRepl                       OtherPlayerId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_CanKickPlayer) == 0x000008, "Wrong alignment on BasePlayerController_CanKickPlayer");
static_assert(sizeof(BasePlayerController_CanKickPlayer) == 0x000030, "Wrong size on BasePlayerController_CanKickPlayer");
static_assert(offsetof(BasePlayerController_CanKickPlayer, OtherPlayerId) == 0x000000, "Member 'BasePlayerController_CanKickPlayer::OtherPlayerId' has a wrong offset!");
static_assert(offsetof(BasePlayerController_CanKickPlayer, ReturnValue) == 0x000028, "Member 'BasePlayerController_CanKickPlayer::ReturnValue' has a wrong offset!");

// Function BrickRigs.BasePlayerController.CanViewAndEditKicks
// 0x0001 (0x0001 - 0x0000)
struct BasePlayerController_CanViewAndEditKicks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_CanViewAndEditKicks) == 0x000001, "Wrong alignment on BasePlayerController_CanViewAndEditKicks");
static_assert(sizeof(BasePlayerController_CanViewAndEditKicks) == 0x000001, "Wrong size on BasePlayerController_CanViewAndEditKicks");
static_assert(offsetof(BasePlayerController_CanViewAndEditKicks, ReturnValue) == 0x000000, "Member 'BasePlayerController_CanViewAndEditKicks::ReturnValue' has a wrong offset!");

// Function BrickRigs.BasePlayerController.GetDesiredViewTarget
// 0x0018 (0x0018 - 0x0000)
struct BasePlayerController_GetDesiredViewTarget final
{
public:
	struct FViewTargetTransitionParams            OutTransitionParams;                               // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_GetDesiredViewTarget) == 0x000008, "Wrong alignment on BasePlayerController_GetDesiredViewTarget");
static_assert(sizeof(BasePlayerController_GetDesiredViewTarget) == 0x000018, "Wrong size on BasePlayerController_GetDesiredViewTarget");
static_assert(offsetof(BasePlayerController_GetDesiredViewTarget, OutTransitionParams) == 0x000000, "Member 'BasePlayerController_GetDesiredViewTarget::OutTransitionParams' has a wrong offset!");
static_assert(offsetof(BasePlayerController_GetDesiredViewTarget, ReturnValue) == 0x000010, "Member 'BasePlayerController_GetDesiredViewTarget::ReturnValue' has a wrong offset!");

// Function BrickRigs.BasePlayerController.GetPlayerId
// 0x0028 (0x0028 - 0x0000)
struct BasePlayerController_GetPlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_GetPlayerId) == 0x000008, "Wrong alignment on BasePlayerController_GetPlayerId");
static_assert(sizeof(BasePlayerController_GetPlayerId) == 0x000028, "Wrong size on BasePlayerController_GetPlayerId");
static_assert(offsetof(BasePlayerController_GetPlayerId, ReturnValue) == 0x000000, "Member 'BasePlayerController_GetPlayerId::ReturnValue' has a wrong offset!");

// Function BrickRigs.BasePlayerController.GetStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct BasePlayerController_GetStaticInfo final
{
public:
	const class UPlayerControllerStaticInfo*      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_GetStaticInfo) == 0x000008, "Wrong alignment on BasePlayerController_GetStaticInfo");
static_assert(sizeof(BasePlayerController_GetStaticInfo) == 0x000008, "Wrong size on BasePlayerController_GetStaticInfo");
static_assert(offsetof(BasePlayerController_GetStaticInfo, ReturnValue) == 0x000000, "Member 'BasePlayerController_GetStaticInfo::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameMode.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickGameMode_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickGameMode*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_Get) == 0x000008, "Wrong alignment on BrickGameMode_Get");
static_assert(sizeof(BrickGameMode_Get) == 0x000010, "Wrong size on BrickGameMode_Get");
static_assert(offsetof(BrickGameMode_Get, WorldContextObject) == 0x000000, "Member 'BrickGameMode_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickGameMode_Get, ReturnValue) == 0x000008, "Member 'BrickGameMode_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameMode.GetDefaultGameMode
// 0x0010 (0x0010 - 0x0000)
struct BrickGameMode_GetDefaultGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABrickGameMode*                   ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_GetDefaultGameMode) == 0x000008, "Wrong alignment on BrickGameMode_GetDefaultGameMode");
static_assert(sizeof(BrickGameMode_GetDefaultGameMode) == 0x000010, "Wrong size on BrickGameMode_GetDefaultGameMode");
static_assert(offsetof(BrickGameMode_GetDefaultGameMode, WorldContextObject) == 0x000000, "Member 'BrickGameMode_GetDefaultGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickGameMode_GetDefaultGameMode, ReturnValue) == 0x000008, "Member 'BrickGameMode_GetDefaultGameMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameMode.AddPlayerMoney
// 0x0010 (0x0010 - 0x0000)
struct BrickGameMode_AddPlayerMoney final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdd;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameMode_AddPlayerMoney) == 0x000008, "Wrong alignment on BrickGameMode_AddPlayerMoney");
static_assert(sizeof(BrickGameMode_AddPlayerMoney) == 0x000010, "Wrong size on BrickGameMode_AddPlayerMoney");
static_assert(offsetof(BrickGameMode_AddPlayerMoney, PC) == 0x000000, "Member 'BrickGameMode_AddPlayerMoney::PC' has a wrong offset!");
static_assert(offsetof(BrickGameMode_AddPlayerMoney, Amount) == 0x000008, "Member 'BrickGameMode_AddPlayerMoney::Amount' has a wrong offset!");
static_assert(offsetof(BrickGameMode_AddPlayerMoney, bAdd) == 0x00000C, "Member 'BrickGameMode_AddPlayerMoney::bAdd' has a wrong offset!");

// Function BrickRigs.BrickGameMode.AddPlayerScore
// 0x0010 (0x0010 - 0x0000)
struct BrickGameMode_AddPlayerScore final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdd;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameMode_AddPlayerScore) == 0x000008, "Wrong alignment on BrickGameMode_AddPlayerScore");
static_assert(sizeof(BrickGameMode_AddPlayerScore) == 0x000010, "Wrong size on BrickGameMode_AddPlayerScore");
static_assert(offsetof(BrickGameMode_AddPlayerScore, PC) == 0x000000, "Member 'BrickGameMode_AddPlayerScore::PC' has a wrong offset!");
static_assert(offsetof(BrickGameMode_AddPlayerScore, Score) == 0x000008, "Member 'BrickGameMode_AddPlayerScore::Score' has a wrong offset!");
static_assert(offsetof(BrickGameMode_AddPlayerScore, bAdd) == 0x00000C, "Member 'BrickGameMode_AddPlayerScore::bAdd' has a wrong offset!");

// Function BrickRigs.BrickGameMode.AddScoreToAllPlayers
// 0x0004 (0x0004 - 0x0000)
struct BrickGameMode_AddScoreToAllPlayers final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_AddScoreToAllPlayers) == 0x000004, "Wrong alignment on BrickGameMode_AddScoreToAllPlayers");
static_assert(sizeof(BrickGameMode_AddScoreToAllPlayers) == 0x000004, "Wrong size on BrickGameMode_AddScoreToAllPlayers");
static_assert(offsetof(BrickGameMode_AddScoreToAllPlayers, Score) == 0x000000, "Member 'BrickGameMode_AddScoreToAllPlayers::Score' has a wrong offset!");

// Function BrickRigs.BrickGameMode.AddScoreToAllPlayersOfTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameMode_AddScoreToAllPlayersOfTeam final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_AddScoreToAllPlayersOfTeam) == 0x000004, "Wrong alignment on BrickGameMode_AddScoreToAllPlayersOfTeam");
static_assert(sizeof(BrickGameMode_AddScoreToAllPlayersOfTeam) == 0x000008, "Wrong size on BrickGameMode_AddScoreToAllPlayersOfTeam");
static_assert(offsetof(BrickGameMode_AddScoreToAllPlayersOfTeam, TeamID) == 0x000000, "Member 'BrickGameMode_AddScoreToAllPlayersOfTeam::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameMode_AddScoreToAllPlayersOfTeam, Score) == 0x000004, "Member 'BrickGameMode_AddScoreToAllPlayersOfTeam::Score' has a wrong offset!");

// Function BrickRigs.BrickGameMode.AddTeamScore
// 0x0008 (0x0008 - 0x0000)
struct BrickGameMode_AddTeamScore final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_AddTeamScore) == 0x000004, "Wrong alignment on BrickGameMode_AddTeamScore");
static_assert(sizeof(BrickGameMode_AddTeamScore) == 0x000008, "Wrong size on BrickGameMode_AddTeamScore");
static_assert(offsetof(BrickGameMode_AddTeamScore, TeamID) == 0x000000, "Member 'BrickGameMode_AddTeamScore::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameMode_AddTeamScore, Score) == 0x000004, "Member 'BrickGameMode_AddTeamScore::Score' has a wrong offset!");

// Function BrickRigs.BrickGameMode.EndMatchWithWinner
// 0x0001 (0x0001 - 0x0000)
struct BrickGameMode_EndMatchWithWinner final
{
public:
	struct FMatchWinner                           InWinner;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_EndMatchWithWinner) == 0x000001, "Wrong alignment on BrickGameMode_EndMatchWithWinner");
static_assert(sizeof(BrickGameMode_EndMatchWithWinner) == 0x000001, "Wrong size on BrickGameMode_EndMatchWithWinner");
static_assert(offsetof(BrickGameMode_EndMatchWithWinner, InWinner) == 0x000000, "Member 'BrickGameMode_EndMatchWithWinner::InWinner' has a wrong offset!");

// Function BrickRigs.BrickGameMode.EndRound
// 0x0002 (0x0002 - 0x0000)
struct BrickGameMode_EndRound final
{
public:
	struct FMatchWinner                           InWinner;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEndMatch;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_EndRound) == 0x000001, "Wrong alignment on BrickGameMode_EndRound");
static_assert(sizeof(BrickGameMode_EndRound) == 0x000002, "Wrong size on BrickGameMode_EndRound");
static_assert(offsetof(BrickGameMode_EndRound, InWinner) == 0x000000, "Member 'BrickGameMode_EndRound::InWinner' has a wrong offset!");
static_assert(offsetof(BrickGameMode_EndRound, bEndMatch) == 0x000001, "Member 'BrickGameMode_EndRound::bEndMatch' has a wrong offset!");

// Function BrickRigs.BrickGameMode.MovePlayerToTeam
// 0x0010 (0x0010 - 0x0000)
struct BrickGameMode_MovePlayerToTeam final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamID;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameMode_MovePlayerToTeam) == 0x000008, "Wrong alignment on BrickGameMode_MovePlayerToTeam");
static_assert(sizeof(BrickGameMode_MovePlayerToTeam) == 0x000010, "Wrong size on BrickGameMode_MovePlayerToTeam");
static_assert(offsetof(BrickGameMode_MovePlayerToTeam, PC) == 0x000000, "Member 'BrickGameMode_MovePlayerToTeam::PC' has a wrong offset!");
static_assert(offsetof(BrickGameMode_MovePlayerToTeam, TeamID) == 0x000008, "Member 'BrickGameMode_MovePlayerToTeam::TeamID' has a wrong offset!");

// Function BrickRigs.BrickGameMode.OnCapturePointCaptured
// 0x0060 (0x0060 - 0x0000)
struct BrickGameMode_OnCapturePointCaptured final
{
public:
	class ACapturePoint*                          CapturePoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         Team;                                              // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ABaseCharacter*>                   Characters;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_OnCapturePointCaptured) == 0x000008, "Wrong alignment on BrickGameMode_OnCapturePointCaptured");
static_assert(sizeof(BrickGameMode_OnCapturePointCaptured) == 0x000060, "Wrong size on BrickGameMode_OnCapturePointCaptured");
static_assert(offsetof(BrickGameMode_OnCapturePointCaptured, CapturePoint) == 0x000000, "Member 'BrickGameMode_OnCapturePointCaptured::CapturePoint' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCapturePointCaptured, Team) == 0x000008, "Member 'BrickGameMode_OnCapturePointCaptured::Team' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCapturePointCaptured, Characters) == 0x000010, "Member 'BrickGameMode_OnCapturePointCaptured::Characters' has a wrong offset!");

// Function BrickRigs.BrickGameMode.OnCapturePointNeutralized
// 0x0060 (0x0060 - 0x0000)
struct BrickGameMode_OnCapturePointNeutralized final
{
public:
	class ACapturePoint*                          CapturePoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         Team;                                              // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ABaseCharacter*>                   Characters;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_OnCapturePointNeutralized) == 0x000008, "Wrong alignment on BrickGameMode_OnCapturePointNeutralized");
static_assert(sizeof(BrickGameMode_OnCapturePointNeutralized) == 0x000060, "Wrong size on BrickGameMode_OnCapturePointNeutralized");
static_assert(offsetof(BrickGameMode_OnCapturePointNeutralized, CapturePoint) == 0x000000, "Member 'BrickGameMode_OnCapturePointNeutralized::CapturePoint' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCapturePointNeutralized, Team) == 0x000008, "Member 'BrickGameMode_OnCapturePointNeutralized::Team' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCapturePointNeutralized, Characters) == 0x000010, "Member 'BrickGameMode_OnCapturePointNeutralized::Characters' has a wrong offset!");

// Function BrickRigs.BrickGameMode.OnCharacterBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct BrickGameMode_OnCharacterBeginPlay final
{
public:
	class ABaseCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_OnCharacterBeginPlay) == 0x000008, "Wrong alignment on BrickGameMode_OnCharacterBeginPlay");
static_assert(sizeof(BrickGameMode_OnCharacterBeginPlay) == 0x000008, "Wrong size on BrickGameMode_OnCharacterBeginPlay");
static_assert(offsetof(BrickGameMode_OnCharacterBeginPlay, Character) == 0x000000, "Member 'BrickGameMode_OnCharacterBeginPlay::Character' has a wrong offset!");

// Function BrickRigs.BrickGameMode.OnCharacterDied
// 0x0018 (0x0018 - 0x0000)
struct BrickGameMode_OnCharacterDied final
{
public:
	class ABaseCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_OnCharacterDied) == 0x000008, "Wrong alignment on BrickGameMode_OnCharacterDied");
static_assert(sizeof(BrickGameMode_OnCharacterDied) == 0x000018, "Wrong size on BrickGameMode_OnCharacterDied");
static_assert(offsetof(BrickGameMode_OnCharacterDied, Character) == 0x000000, "Member 'BrickGameMode_OnCharacterDied::Character' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCharacterDied, EventInstigator) == 0x000008, "Member 'BrickGameMode_OnCharacterDied::EventInstigator' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCharacterDied, DamageCauser) == 0x000010, "Member 'BrickGameMode_OnCharacterDied::DamageCauser' has a wrong offset!");

// Function BrickRigs.BrickGameMode.OnCharacterEndPlay
// 0x0008 (0x0008 - 0x0000)
struct BrickGameMode_OnCharacterEndPlay final
{
public:
	class ABaseCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_OnCharacterEndPlay) == 0x000008, "Wrong alignment on BrickGameMode_OnCharacterEndPlay");
static_assert(sizeof(BrickGameMode_OnCharacterEndPlay) == 0x000008, "Wrong size on BrickGameMode_OnCharacterEndPlay");
static_assert(offsetof(BrickGameMode_OnCharacterEndPlay, Character) == 0x000000, "Member 'BrickGameMode_OnCharacterEndPlay::Character' has a wrong offset!");

// Function BrickRigs.BrickGameMode.OnCharacterRevived
// 0x0010 (0x0010 - 0x0000)
struct BrickGameMode_OnCharacterRevived final
{
public:
	class ABaseCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_OnCharacterRevived) == 0x000008, "Wrong alignment on BrickGameMode_OnCharacterRevived");
static_assert(sizeof(BrickGameMode_OnCharacterRevived) == 0x000010, "Wrong size on BrickGameMode_OnCharacterRevived");
static_assert(offsetof(BrickGameMode_OnCharacterRevived, Character) == 0x000000, "Member 'BrickGameMode_OnCharacterRevived::Character' has a wrong offset!");
static_assert(offsetof(BrickGameMode_OnCharacterRevived, EventInstigator) == 0x000008, "Member 'BrickGameMode_OnCharacterRevived::EventInstigator' has a wrong offset!");

// Function BrickRigs.BrickGameMode.RestartAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct BrickGameMode_RestartAllPlayers final
{
public:
	bool                                          bIncludeAlive;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_RestartAllPlayers) == 0x000001, "Wrong alignment on BrickGameMode_RestartAllPlayers");
static_assert(sizeof(BrickGameMode_RestartAllPlayers) == 0x000001, "Wrong size on BrickGameMode_RestartAllPlayers");
static_assert(offsetof(BrickGameMode_RestartAllPlayers, bIncludeAlive) == 0x000000, "Member 'BrickGameMode_RestartAllPlayers::bIncludeAlive' has a wrong offset!");

// Function BrickRigs.BrickGameMode.CalcDamage
// 0x0028 (0x0028 - 0x0000)
struct BrickGameMode_CalcDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseCharacter*                         Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameMode_CalcDamage) == 0x000008, "Wrong alignment on BrickGameMode_CalcDamage");
static_assert(sizeof(BrickGameMode_CalcDamage) == 0x000028, "Wrong size on BrickGameMode_CalcDamage");
static_assert(offsetof(BrickGameMode_CalcDamage, DamageAmount) == 0x000000, "Member 'BrickGameMode_CalcDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(BrickGameMode_CalcDamage, Character) == 0x000008, "Member 'BrickGameMode_CalcDamage::Character' has a wrong offset!");
static_assert(offsetof(BrickGameMode_CalcDamage, EventInstigator) == 0x000010, "Member 'BrickGameMode_CalcDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(BrickGameMode_CalcDamage, DamageCauser) == 0x000018, "Member 'BrickGameMode_CalcDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BrickGameMode_CalcDamage, ReturnValue) == 0x000020, "Member 'BrickGameMode_CalcDamage::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameMode.GetNumPlayersAlive
// 0x0004 (0x0004 - 0x0000)
struct BrickGameMode_GetNumPlayersAlive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_GetNumPlayersAlive) == 0x000004, "Wrong alignment on BrickGameMode_GetNumPlayersAlive");
static_assert(sizeof(BrickGameMode_GetNumPlayersAlive) == 0x000004, "Wrong size on BrickGameMode_GetNumPlayersAlive");
static_assert(offsetof(BrickGameMode_GetNumPlayersAlive, ReturnValue) == 0x000000, "Member 'BrickGameMode_GetNumPlayersAlive::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameMode.IsReadyToEndRound
// 0x0003 (0x0003 - 0x0000)
struct BrickGameMode_IsReadyToEndRound final
{
public:
	struct FMatchWinner                           OutWinner;                                         // 0x0000(0x0001)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOutEndMatch;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_IsReadyToEndRound) == 0x000001, "Wrong alignment on BrickGameMode_IsReadyToEndRound");
static_assert(sizeof(BrickGameMode_IsReadyToEndRound) == 0x000003, "Wrong size on BrickGameMode_IsReadyToEndRound");
static_assert(offsetof(BrickGameMode_IsReadyToEndRound, OutWinner) == 0x000000, "Member 'BrickGameMode_IsReadyToEndRound::OutWinner' has a wrong offset!");
static_assert(offsetof(BrickGameMode_IsReadyToEndRound, bOutEndMatch) == 0x000001, "Member 'BrickGameMode_IsReadyToEndRound::bOutEndMatch' has a wrong offset!");
static_assert(offsetof(BrickGameMode_IsReadyToEndRound, ReturnValue) == 0x000002, "Member 'BrickGameMode_IsReadyToEndRound::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameMode.IsReadyToStartWarmup
// 0x0001 (0x0001 - 0x0000)
struct BrickGameMode_IsReadyToStartWarmup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameMode_IsReadyToStartWarmup) == 0x000001, "Wrong alignment on BrickGameMode_IsReadyToStartWarmup");
static_assert(sizeof(BrickGameMode_IsReadyToStartWarmup) == 0x000001, "Wrong size on BrickGameMode_IsReadyToStartWarmup");
static_assert(offsetof(BrickGameMode_IsReadyToStartWarmup, ReturnValue) == 0x000000, "Member 'BrickGameMode_IsReadyToStartWarmup::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTeam.SetMaxScore
// 0x0004 (0x0004 - 0x0000)
struct BrickTeam_SetMaxScore final
{
public:
	int32                                         NewMaxScore;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTeam_SetMaxScore) == 0x000004, "Wrong alignment on BrickTeam_SetMaxScore");
static_assert(sizeof(BrickTeam_SetMaxScore) == 0x000004, "Wrong size on BrickTeam_SetMaxScore");
static_assert(offsetof(BrickTeam_SetMaxScore, NewMaxScore) == 0x000000, "Member 'BrickTeam_SetMaxScore::NewMaxScore' has a wrong offset!");

// Function BrickRigs.BrickTeam.SetScore
// 0x0004 (0x0004 - 0x0000)
struct BrickTeam_SetScore final
{
public:
	int32                                         NewScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTeam_SetScore) == 0x000004, "Wrong alignment on BrickTeam_SetScore");
static_assert(sizeof(BrickTeam_SetScore) == 0x000004, "Wrong size on BrickTeam_SetScore");
static_assert(offsetof(BrickTeam_SetScore, NewScore) == 0x000000, "Member 'BrickTeam_SetScore::NewScore' has a wrong offset!");

// Function BrickRigs.BrickTeam.GetMaxScore
// 0x0004 (0x0004 - 0x0000)
struct BrickTeam_GetMaxScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTeam_GetMaxScore) == 0x000004, "Wrong alignment on BrickTeam_GetMaxScore");
static_assert(sizeof(BrickTeam_GetMaxScore) == 0x000004, "Wrong size on BrickTeam_GetMaxScore");
static_assert(offsetof(BrickTeam_GetMaxScore, ReturnValue) == 0x000000, "Member 'BrickTeam_GetMaxScore::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTeam.GetScore
// 0x0004 (0x0004 - 0x0000)
struct BrickTeam_GetScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTeam_GetScore) == 0x000004, "Wrong alignment on BrickTeam_GetScore");
static_assert(sizeof(BrickTeam_GetScore) == 0x000004, "Wrong size on BrickTeam_GetScore");
static_assert(offsetof(BrickTeam_GetScore, ReturnValue) == 0x000000, "Member 'BrickTeam_GetScore::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTeam.GetTeamDisplayName
// 0x0018 (0x0018 - 0x0000)
struct BrickTeam_GetTeamDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTeam_GetTeamDisplayName) == 0x000008, "Wrong alignment on BrickTeam_GetTeamDisplayName");
static_assert(sizeof(BrickTeam_GetTeamDisplayName) == 0x000018, "Wrong size on BrickTeam_GetTeamDisplayName");
static_assert(offsetof(BrickTeam_GetTeamDisplayName, ReturnValue) == 0x000000, "Member 'BrickTeam_GetTeamDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTeam.GetTeamId
// 0x0001 (0x0001 - 0x0000)
struct BrickTeam_GetTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTeam_GetTeamId) == 0x000001, "Wrong alignment on BrickTeam_GetTeamId");
static_assert(sizeof(BrickTeam_GetTeamId) == 0x000001, "Wrong size on BrickTeam_GetTeamId");
static_assert(offsetof(BrickTeam_GetTeamId, ReturnValue) == 0x000000, "Member 'BrickTeam_GetTeamId::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickSpacer.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickSpacer_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSpacer_SetColorStyle) == 0x000001, "Wrong alignment on BrickSpacer_SetColorStyle");
static_assert(sizeof(BrickSpacer_SetColorStyle) == 0x000001, "Wrong size on BrickSpacer_SetColorStyle");
static_assert(offsetof(BrickSpacer_SetColorStyle, NewStyle) == 0x000000, "Member 'BrickSpacer_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.PopupParams.BindOnPopupClosedDelegate
// 0x0010 (0x0010 - 0x0000)
struct PopupParams_BindOnPopupClosedDelegate final
{
public:
	TDelegate<void(EPopupResult Result)>          Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupParams_BindOnPopupClosedDelegate) == 0x000004, "Wrong alignment on PopupParams_BindOnPopupClosedDelegate");
static_assert(sizeof(PopupParams_BindOnPopupClosedDelegate) == 0x000010, "Wrong size on PopupParams_BindOnPopupClosedDelegate");
static_assert(offsetof(PopupParams_BindOnPopupClosedDelegate, Delegate) == 0x000000, "Member 'PopupParams_BindOnPopupClosedDelegate::Delegate' has a wrong offset!");

// Function BrickRigs.PopupParams.OnPopupClosed
// 0x0001 (0x0001 - 0x0000)
struct PopupParams_OnPopupClosed final
{
public:
	EPopupResult                                  Result;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupParams_OnPopupClosed) == 0x000001, "Wrong alignment on PopupParams_OnPopupClosed");
static_assert(sizeof(PopupParams_OnPopupClosed) == 0x000001, "Wrong size on PopupParams_OnPopupClosed");
static_assert(offsetof(PopupParams_OnPopupClosed, Result) == 0x000000, "Member 'PopupParams_OnPopupClosed::Result' has a wrong offset!");

// Function BrickRigs.PopupParams.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct PopupParams_GetOwningPlayer final
{
public:
	class ABasePlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupParams_GetOwningPlayer) == 0x000008, "Wrong alignment on PopupParams_GetOwningPlayer");
static_assert(sizeof(PopupParams_GetOwningPlayer) == 0x000008, "Wrong size on PopupParams_GetOwningPlayer");
static_assert(offsetof(PopupParams_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'PopupParams_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function BrickRigs.BindKeyPopupWidget.UpdateConflictedMappings
// 0x0018 (0x0018 - 0x0000)
struct BindKeyPopupWidget_UpdateConflictedMappings final
{
public:
	bool                                          bIsConflicted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ConflictedMappingNames;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindKeyPopupWidget_UpdateConflictedMappings) == 0x000008, "Wrong alignment on BindKeyPopupWidget_UpdateConflictedMappings");
static_assert(sizeof(BindKeyPopupWidget_UpdateConflictedMappings) == 0x000018, "Wrong size on BindKeyPopupWidget_UpdateConflictedMappings");
static_assert(offsetof(BindKeyPopupWidget_UpdateConflictedMappings, bIsConflicted) == 0x000000, "Member 'BindKeyPopupWidget_UpdateConflictedMappings::bIsConflicted' has a wrong offset!");
static_assert(offsetof(BindKeyPopupWidget_UpdateConflictedMappings, ConflictedMappingNames) == 0x000008, "Member 'BindKeyPopupWidget_UpdateConflictedMappings::ConflictedMappingNames' has a wrong offset!");

// Function BrickRigs.BindKeyPopupWidget.UpdateIsBindingKey
// 0x0001 (0x0001 - 0x0000)
struct BindKeyPopupWidget_UpdateIsBindingKey final
{
public:
	bool                                          bNewIsBinding;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindKeyPopupWidget_UpdateIsBindingKey) == 0x000001, "Wrong alignment on BindKeyPopupWidget_UpdateIsBindingKey");
static_assert(sizeof(BindKeyPopupWidget_UpdateIsBindingKey) == 0x000001, "Wrong size on BindKeyPopupWidget_UpdateIsBindingKey");
static_assert(offsetof(BindKeyPopupWidget_UpdateIsBindingKey, bNewIsBinding) == 0x000000, "Member 'BindKeyPopupWidget_UpdateIsBindingKey::bNewIsBinding' has a wrong offset!");

// Function BrickRigs.BoolPropertyWidget.InitializeItem
// 0x0148 (0x0148 - 0x0000)
struct BoolPropertyWidget_InitializeItem final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               OutParams;                                         // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoolPropertyWidget_InitializeItem) == 0x000008, "Wrong alignment on BoolPropertyWidget_InitializeItem");
static_assert(sizeof(BoolPropertyWidget_InitializeItem) == 0x000148, "Wrong size on BoolPropertyWidget_InitializeItem");
static_assert(offsetof(BoolPropertyWidget_InitializeItem, Item) == 0x000000, "Member 'BoolPropertyWidget_InitializeItem::Item' has a wrong offset!");
static_assert(offsetof(BoolPropertyWidget_InitializeItem, OutParams) == 0x000008, "Member 'BoolPropertyWidget_InitializeItem::OutParams' has a wrong offset!");

// Function BrickRigs.BoolPropertyWidget.OnItemSelected
// 0x0008 (0x0008 - 0x0000)
struct BoolPropertyWidget_OnItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BoolPropertyWidget_OnItemSelected) == 0x000004, "Wrong alignment on BoolPropertyWidget_OnItemSelected");
static_assert(sizeof(BoolPropertyWidget_OnItemSelected) == 0x000008, "Wrong size on BoolPropertyWidget_OnItemSelected");
static_assert(offsetof(BoolPropertyWidget_OnItemSelected, Item) == 0x000000, "Member 'BoolPropertyWidget_OnItemSelected::Item' has a wrong offset!");
static_assert(offsetof(BoolPropertyWidget_OnItemSelected, EventType) == 0x000004, "Member 'BoolPropertyWidget_OnItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.BrickTextBlock.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBlock_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBlock_SetColorStyle) == 0x000001, "Wrong alignment on BrickTextBlock_SetColorStyle");
static_assert(sizeof(BrickTextBlock_SetColorStyle) == 0x000001, "Wrong size on BrickTextBlock_SetColorStyle");
static_assert(offsetof(BrickTextBlock_SetColorStyle, NewStyle) == 0x000000, "Member 'BrickTextBlock_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickTextBlock.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBlock_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBlock_SetStyleState) == 0x000001, "Wrong alignment on BrickTextBlock_SetStyleState");
static_assert(sizeof(BrickTextBlock_SetStyleState) == 0x000001, "Wrong size on BrickTextBlock_SetStyleState");
static_assert(offsetof(BrickTextBlock_SetStyleState, NewState) == 0x000000, "Member 'BrickTextBlock_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.BrickTextBlock.SetTextStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBlock_SetTextStyle final
{
public:
	EBrickUITextStyle                             NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBlock_SetTextStyle) == 0x000001, "Wrong alignment on BrickTextBlock_SetTextStyle");
static_assert(sizeof(BrickTextBlock_SetTextStyle) == 0x000001, "Wrong size on BrickTextBlock_SetTextStyle");
static_assert(offsetof(BrickTextBlock_SetTextStyle, NewStyle) == 0x000000, "Member 'BrickTextBlock_SetTextStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickAssetManager.Get
// 0x0008 (0x0008 - 0x0000)
struct BrickAssetManager_Get final
{
public:
	class UBrickAssetManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickAssetManager_Get) == 0x000008, "Wrong alignment on BrickAssetManager_Get");
static_assert(sizeof(BrickAssetManager_Get) == 0x000008, "Wrong size on BrickAssetManager_Get");
static_assert(offsetof(BrickAssetManager_Get, ReturnValue) == 0x000000, "Member 'BrickAssetManager_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.DropCarriedBrick
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_DropCarriedBrick final
{
public:
	bool                                          bYeet;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_DropCarriedBrick) == 0x000001, "Wrong alignment on BrickCharacter_DropCarriedBrick");
static_assert(sizeof(BrickCharacter_DropCarriedBrick) == 0x000001, "Wrong size on BrickCharacter_DropCarriedBrick");
static_assert(offsetof(BrickCharacter_DropCarriedBrick, bYeet) == 0x000000, "Member 'BrickCharacter_DropCarriedBrick::bYeet' has a wrong offset!");

// Function BrickRigs.BrickCharacter.EnterVehicle
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_EnterVehicle final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickEditorObjectID                   InSeatID;                                          // 0x0008(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_EnterVehicle) == 0x000008, "Wrong alignment on BrickCharacter_EnterVehicle");
static_assert(sizeof(BrickCharacter_EnterVehicle) == 0x000010, "Wrong size on BrickCharacter_EnterVehicle");
static_assert(offsetof(BrickCharacter_EnterVehicle, InVehicle) == 0x000000, "Member 'BrickCharacter_EnterVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BrickCharacter_EnterVehicle, InSeatID) == 0x000008, "Member 'BrickCharacter_EnterVehicle::InSeatID' has a wrong offset!");
static_assert(offsetof(BrickCharacter_EnterVehicle, ReturnValue) == 0x00000A, "Member 'BrickCharacter_EnterVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.EquipCurrentItem
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_EquipCurrentItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_EquipCurrentItem) == 0x000001, "Wrong alignment on BrickCharacter_EquipCurrentItem");
static_assert(sizeof(BrickCharacter_EquipCurrentItem) == 0x000001, "Wrong size on BrickCharacter_EquipCurrentItem");
static_assert(offsetof(BrickCharacter_EquipCurrentItem, ReturnValue) == 0x000000, "Member 'BrickCharacter_EquipCurrentItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.EquipItem
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_EquipItem final
{
public:
	class AInventoryItem*                         InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipUnequip;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_EquipItem) == 0x000008, "Wrong alignment on BrickCharacter_EquipItem");
static_assert(sizeof(BrickCharacter_EquipItem) == 0x000010, "Wrong size on BrickCharacter_EquipItem");
static_assert(offsetof(BrickCharacter_EquipItem, InItem) == 0x000000, "Member 'BrickCharacter_EquipItem::InItem' has a wrong offset!");
static_assert(offsetof(BrickCharacter_EquipItem, bSkipUnequip) == 0x000008, "Member 'BrickCharacter_EquipItem::bSkipUnequip' has a wrong offset!");
static_assert(offsetof(BrickCharacter_EquipItem, ReturnValue) == 0x000009, "Member 'BrickCharacter_EquipItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.OnRep_CarriedBrick
// 0x0030 (0x0030 - 0x0000)
struct BrickCharacter_OnRep_CarriedBrick final
{
public:
	struct FBrickCarryInfo                        OldCarriedBrick;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_OnRep_CarriedBrick) == 0x000004, "Wrong alignment on BrickCharacter_OnRep_CarriedBrick");
static_assert(sizeof(BrickCharacter_OnRep_CarriedBrick) == 0x000030, "Wrong size on BrickCharacter_OnRep_CarriedBrick");
static_assert(offsetof(BrickCharacter_OnRep_CarriedBrick, OldCarriedBrick) == 0x000000, "Member 'BrickCharacter_OnRep_CarriedBrick::OldCarriedBrick' has a wrong offset!");

// Function BrickRigs.BrickCharacter.OnRep_CurrentItem
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_OnRep_CurrentItem final
{
public:
	class AInventoryItem*                         PrevItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_OnRep_CurrentItem) == 0x000008, "Wrong alignment on BrickCharacter_OnRep_CurrentItem");
static_assert(sizeof(BrickCharacter_OnRep_CurrentItem) == 0x000008, "Wrong size on BrickCharacter_OnRep_CurrentItem");
static_assert(offsetof(BrickCharacter_OnRep_CurrentItem, PrevItem) == 0x000000, "Member 'BrickCharacter_OnRep_CurrentItem::PrevItem' has a wrong offset!");

// Function BrickRigs.BrickCharacter.PickUpBrick
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_PickUpBrick final
{
public:
	class UBrick*                                 Brick;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_PickUpBrick) == 0x000008, "Wrong alignment on BrickCharacter_PickUpBrick");
static_assert(sizeof(BrickCharacter_PickUpBrick) == 0x000008, "Wrong size on BrickCharacter_PickUpBrick");
static_assert(offsetof(BrickCharacter_PickUpBrick, Brick) == 0x000000, "Member 'BrickCharacter_PickUpBrick::Brick' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerDropCarriedBrick
// 0x0024 (0x0024 - 0x0000)
struct BrickCharacter_ServerDropCarriedBrick final
{
public:
	struct FVector                                BrickLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BrickRotation;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BrickVelocity;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerDropCarriedBrick) == 0x000004, "Wrong alignment on BrickCharacter_ServerDropCarriedBrick");
static_assert(sizeof(BrickCharacter_ServerDropCarriedBrick) == 0x000024, "Wrong size on BrickCharacter_ServerDropCarriedBrick");
static_assert(offsetof(BrickCharacter_ServerDropCarriedBrick, BrickLocation) == 0x000000, "Member 'BrickCharacter_ServerDropCarriedBrick::BrickLocation' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerDropCarriedBrick, BrickRotation) == 0x00000C, "Member 'BrickCharacter_ServerDropCarriedBrick::BrickRotation' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerDropCarriedBrick, BrickVelocity) == 0x000018, "Member 'BrickCharacter_ServerDropCarriedBrick::BrickVelocity' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerEnterVehicle
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_ServerEnterVehicle final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickEditorObjectID                   InSeatID;                                          // 0x0008(0x0002)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_ServerEnterVehicle) == 0x000008, "Wrong alignment on BrickCharacter_ServerEnterVehicle");
static_assert(sizeof(BrickCharacter_ServerEnterVehicle) == 0x000010, "Wrong size on BrickCharacter_ServerEnterVehicle");
static_assert(offsetof(BrickCharacter_ServerEnterVehicle, InVehicle) == 0x000000, "Member 'BrickCharacter_ServerEnterVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerEnterVehicle, InSeatID) == 0x000008, "Member 'BrickCharacter_ServerEnterVehicle::InSeatID' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerOnReplicatedAutoFire
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_ServerOnReplicatedAutoFire final
{
public:
	class UFirearmComponent*                      FirearmComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MuzzlePitchAndYaw;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_ServerOnReplicatedAutoFire) == 0x000008, "Wrong alignment on BrickCharacter_ServerOnReplicatedAutoFire");
static_assert(sizeof(BrickCharacter_ServerOnReplicatedAutoFire) == 0x000010, "Wrong size on BrickCharacter_ServerOnReplicatedAutoFire");
static_assert(offsetof(BrickCharacter_ServerOnReplicatedAutoFire, FirearmComp) == 0x000000, "Member 'BrickCharacter_ServerOnReplicatedAutoFire::FirearmComp' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerOnReplicatedAutoFire, MuzzlePitchAndYaw) == 0x000008, "Member 'BrickCharacter_ServerOnReplicatedAutoFire::MuzzlePitchAndYaw' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerOnReplicatedSingleFire
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_ServerOnReplicatedSingleFire final
{
public:
	class UFirearmComponent*                      FirearmComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MuzzlePitchAndYaw;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_ServerOnReplicatedSingleFire) == 0x000008, "Wrong alignment on BrickCharacter_ServerOnReplicatedSingleFire");
static_assert(sizeof(BrickCharacter_ServerOnReplicatedSingleFire) == 0x000010, "Wrong size on BrickCharacter_ServerOnReplicatedSingleFire");
static_assert(offsetof(BrickCharacter_ServerOnReplicatedSingleFire, FirearmComp) == 0x000000, "Member 'BrickCharacter_ServerOnReplicatedSingleFire::FirearmComp' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerOnReplicatedSingleFire, MuzzlePitchAndYaw) == 0x000008, "Member 'BrickCharacter_ServerOnReplicatedSingleFire::MuzzlePitchAndYaw' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerOnSingleFire
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_ServerOnSingleFire final
{
public:
	class UFirearmComponent*                      FirearmComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerOnSingleFire) == 0x000008, "Wrong alignment on BrickCharacter_ServerOnSingleFire");
static_assert(sizeof(BrickCharacter_ServerOnSingleFire) == 0x000008, "Wrong size on BrickCharacter_ServerOnSingleFire");
static_assert(offsetof(BrickCharacter_ServerOnSingleFire, FirearmComp) == 0x000000, "Member 'BrickCharacter_ServerOnSingleFire::FirearmComp' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerOnStartAutoFire
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_ServerOnStartAutoFire final
{
public:
	class UFirearmComponent*                      FirearmComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerOnStartAutoFire) == 0x000008, "Wrong alignment on BrickCharacter_ServerOnStartAutoFire");
static_assert(sizeof(BrickCharacter_ServerOnStartAutoFire) == 0x000008, "Wrong size on BrickCharacter_ServerOnStartAutoFire");
static_assert(offsetof(BrickCharacter_ServerOnStartAutoFire, FirearmComp) == 0x000000, "Member 'BrickCharacter_ServerOnStartAutoFire::FirearmComp' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerOnStopAutoFire
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_ServerOnStopAutoFire final
{
public:
	class UFirearmComponent*                      FirearmComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoundsFired;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_ServerOnStopAutoFire) == 0x000008, "Wrong alignment on BrickCharacter_ServerOnStopAutoFire");
static_assert(sizeof(BrickCharacter_ServerOnStopAutoFire) == 0x000010, "Wrong size on BrickCharacter_ServerOnStopAutoFire");
static_assert(offsetof(BrickCharacter_ServerOnStopAutoFire, FirearmComp) == 0x000000, "Member 'BrickCharacter_ServerOnStopAutoFire::FirearmComp' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerOnStopAutoFire, RoundsFired) == 0x000008, "Member 'BrickCharacter_ServerOnStopAutoFire::RoundsFired' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerOnThrewExplosive
// 0x0018 (0x0018 - 0x0000)
struct BrickCharacter_ServerOnThrewExplosive final
{
public:
	struct FPlayerViewPoint                       ViewPoint;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerOnThrewExplosive) == 0x000004, "Wrong alignment on BrickCharacter_ServerOnThrewExplosive");
static_assert(sizeof(BrickCharacter_ServerOnThrewExplosive) == 0x000018, "Wrong size on BrickCharacter_ServerOnThrewExplosive");
static_assert(offsetof(BrickCharacter_ServerOnThrewExplosive, ViewPoint) == 0x000000, "Member 'BrickCharacter_ServerOnThrewExplosive::ViewPoint' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerPickUpBrick
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_ServerPickUpBrick final
{
public:
	class UBrick*                                 Brick;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerPickUpBrick) == 0x000008, "Wrong alignment on BrickCharacter_ServerPickUpBrick");
static_assert(sizeof(BrickCharacter_ServerPickUpBrick) == 0x000008, "Wrong size on BrickCharacter_ServerPickUpBrick");
static_assert(offsetof(BrickCharacter_ServerPickUpBrick, Brick) == 0x000000, "Member 'BrickCharacter_ServerPickUpBrick::Brick' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerSetCurrentItem
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_ServerSetCurrentItem final
{
public:
	class AInventoryItem*                         NewItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerSetCurrentItem) == 0x000008, "Wrong alignment on BrickCharacter_ServerSetCurrentItem");
static_assert(sizeof(BrickCharacter_ServerSetCurrentItem) == 0x000008, "Wrong size on BrickCharacter_ServerSetCurrentItem");
static_assert(offsetof(BrickCharacter_ServerSetCurrentItem, NewItem) == 0x000000, "Member 'BrickCharacter_ServerSetCurrentItem::NewItem' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerThrowCurrentItem
// 0x0018 (0x0018 - 0x0000)
struct BrickCharacter_ServerThrowCurrentItem final
{
public:
	struct FPlayerViewPoint                       ViewPoint;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ServerThrowCurrentItem) == 0x000004, "Wrong alignment on BrickCharacter_ServerThrowCurrentItem");
static_assert(sizeof(BrickCharacter_ServerThrowCurrentItem) == 0x000018, "Wrong size on BrickCharacter_ServerThrowCurrentItem");
static_assert(offsetof(BrickCharacter_ServerThrowCurrentItem, ViewPoint) == 0x000000, "Member 'BrickCharacter_ServerThrowCurrentItem::ViewPoint' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerUpdateVehicleInput
// 0x0048 (0x0048 - 0x0000)
struct BrickCharacter_ServerUpdateVehicleInput final
{
public:
	struct FVehicleInput                          NewInput;                                          // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRepActuatorState>              NewActuatorStates;                                 // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USeatBrick*                             Seat;                                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               RestartVersion;                                    // 0x0038(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PackedView;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewAiming;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_ServerUpdateVehicleInput) == 0x000008, "Wrong alignment on BrickCharacter_ServerUpdateVehicleInput");
static_assert(sizeof(BrickCharacter_ServerUpdateVehicleInput) == 0x000048, "Wrong size on BrickCharacter_ServerUpdateVehicleInput");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleInput, NewInput) == 0x000000, "Member 'BrickCharacter_ServerUpdateVehicleInput::NewInput' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleInput, NewActuatorStates) == 0x000020, "Member 'BrickCharacter_ServerUpdateVehicleInput::NewActuatorStates' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleInput, Seat) == 0x000030, "Member 'BrickCharacter_ServerUpdateVehicleInput::Seat' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleInput, RestartVersion) == 0x000038, "Member 'BrickCharacter_ServerUpdateVehicleInput::RestartVersion' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleInput, PackedView) == 0x00003C, "Member 'BrickCharacter_ServerUpdateVehicleInput::PackedView' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleInput, bNewAiming) == 0x000040, "Member 'BrickCharacter_ServerUpdateVehicleInput::bNewAiming' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ServerUpdateVehicleViewRotation
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_ServerUpdateVehicleViewRotation final
{
public:
	class USeatBrick*                             Seat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackedView;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewAiming;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_ServerUpdateVehicleViewRotation) == 0x000008, "Wrong alignment on BrickCharacter_ServerUpdateVehicleViewRotation");
static_assert(sizeof(BrickCharacter_ServerUpdateVehicleViewRotation) == 0x000010, "Wrong size on BrickCharacter_ServerUpdateVehicleViewRotation");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleViewRotation, Seat) == 0x000000, "Member 'BrickCharacter_ServerUpdateVehicleViewRotation::Seat' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleViewRotation, PackedView) == 0x000008, "Member 'BrickCharacter_ServerUpdateVehicleViewRotation::PackedView' has a wrong offset!");
static_assert(offsetof(BrickCharacter_ServerUpdateVehicleViewRotation, bNewAiming) == 0x00000C, "Member 'BrickCharacter_ServerUpdateVehicleViewRotation::bNewAiming' has a wrong offset!");

// Function BrickRigs.BrickCharacter.SetAimRatio
// 0x0004 (0x0004 - 0x0000)
struct BrickCharacter_SetAimRatio final
{
public:
	float                                         InAimRatio;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_SetAimRatio) == 0x000004, "Wrong alignment on BrickCharacter_SetAimRatio");
static_assert(sizeof(BrickCharacter_SetAimRatio) == 0x000004, "Wrong size on BrickCharacter_SetAimRatio");
static_assert(offsetof(BrickCharacter_SetAimRatio, InAimRatio) == 0x000000, "Member 'BrickCharacter_SetAimRatio::InAimRatio' has a wrong offset!");

// Function BrickRigs.BrickCharacter.SetFireMode
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_SetFireMode final
{
public:
	EFireMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_SetFireMode) == 0x000001, "Wrong alignment on BrickCharacter_SetFireMode");
static_assert(sizeof(BrickCharacter_SetFireMode) == 0x000001, "Wrong size on BrickCharacter_SetFireMode");
static_assert(offsetof(BrickCharacter_SetFireMode, NewMode) == 0x000000, "Member 'BrickCharacter_SetFireMode::NewMode' has a wrong offset!");

// Function BrickRigs.BrickCharacter.SetWantsToFire
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_SetWantsToFire final
{
public:
	bool                                          bInWantsToFire;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_SetWantsToFire) == 0x000001, "Wrong alignment on BrickCharacter_SetWantsToFire");
static_assert(sizeof(BrickCharacter_SetWantsToFire) == 0x000001, "Wrong size on BrickCharacter_SetWantsToFire");
static_assert(offsetof(BrickCharacter_SetWantsToFire, bInWantsToFire) == 0x000000, "Member 'BrickCharacter_SetWantsToFire::bInWantsToFire' has a wrong offset!");

// Function BrickRigs.BrickCharacter.CanEnterVehicle
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_CanEnterVehicle final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBrickEditorObjectID                   InOutSeatID;                                       // 0x0008(0x0002)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_CanEnterVehicle) == 0x000008, "Wrong alignment on BrickCharacter_CanEnterVehicle");
static_assert(sizeof(BrickCharacter_CanEnterVehicle) == 0x000010, "Wrong size on BrickCharacter_CanEnterVehicle");
static_assert(offsetof(BrickCharacter_CanEnterVehicle, InVehicle) == 0x000000, "Member 'BrickCharacter_CanEnterVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BrickCharacter_CanEnterVehicle, InOutSeatID) == 0x000008, "Member 'BrickCharacter_CanEnterVehicle::InOutSeatID' has a wrong offset!");
static_assert(offsetof(BrickCharacter_CanEnterVehicle, ReturnValue) == 0x00000A, "Member 'BrickCharacter_CanEnterVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.CanEquipItem
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_CanEquipItem final
{
public:
	class AInventoryItem*                         InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_CanEquipItem) == 0x000008, "Wrong alignment on BrickCharacter_CanEquipItem");
static_assert(sizeof(BrickCharacter_CanEquipItem) == 0x000010, "Wrong size on BrickCharacter_CanEquipItem");
static_assert(offsetof(BrickCharacter_CanEquipItem, InItem) == 0x000000, "Member 'BrickCharacter_CanEquipItem::InItem' has a wrong offset!");
static_assert(offsetof(BrickCharacter_CanEquipItem, ReturnValue) == 0x000008, "Member 'BrickCharacter_CanEquipItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.CanFire
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_CanFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_CanFire) == 0x000001, "Wrong alignment on BrickCharacter_CanFire");
static_assert(sizeof(BrickCharacter_CanFire) == 0x000001, "Wrong size on BrickCharacter_CanFire");
static_assert(offsetof(BrickCharacter_CanFire, ReturnValue) == 0x000000, "Member 'BrickCharacter_CanFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.CanPickUpBrick
// 0x0010 (0x0010 - 0x0000)
struct BrickCharacter_CanPickUpBrick final
{
public:
	class UBrick*                                 Brick;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickCharacter_CanPickUpBrick) == 0x000008, "Wrong alignment on BrickCharacter_CanPickUpBrick");
static_assert(sizeof(BrickCharacter_CanPickUpBrick) == 0x000010, "Wrong size on BrickCharacter_CanPickUpBrick");
static_assert(offsetof(BrickCharacter_CanPickUpBrick, Brick) == 0x000000, "Member 'BrickCharacter_CanPickUpBrick::Brick' has a wrong offset!");
static_assert(offsetof(BrickCharacter_CanPickUpBrick, ReturnValue) == 0x000008, "Member 'BrickCharacter_CanPickUpBrick::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.GetAimRatio
// 0x0004 (0x0004 - 0x0000)
struct BrickCharacter_GetAimRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_GetAimRatio) == 0x000004, "Wrong alignment on BrickCharacter_GetAimRatio");
static_assert(sizeof(BrickCharacter_GetAimRatio) == 0x000004, "Wrong size on BrickCharacter_GetAimRatio");
static_assert(offsetof(BrickCharacter_GetAimRatio, ReturnValue) == 0x000000, "Member 'BrickCharacter_GetAimRatio::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.GetCarriedBrick
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_GetCarriedBrick final
{
public:
	class UBrick*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_GetCarriedBrick) == 0x000008, "Wrong alignment on BrickCharacter_GetCarriedBrick");
static_assert(sizeof(BrickCharacter_GetCarriedBrick) == 0x000008, "Wrong size on BrickCharacter_GetCarriedBrick");
static_assert(offsetof(BrickCharacter_GetCarriedBrick, ReturnValue) == 0x000000, "Member 'BrickCharacter_GetCarriedBrick::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.GetCurrentItem
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_GetCurrentItem final
{
public:
	class AInventoryItem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_GetCurrentItem) == 0x000008, "Wrong alignment on BrickCharacter_GetCurrentItem");
static_assert(sizeof(BrickCharacter_GetCurrentItem) == 0x000008, "Wrong size on BrickCharacter_GetCurrentItem");
static_assert(offsetof(BrickCharacter_GetCurrentItem, ReturnValue) == 0x000000, "Member 'BrickCharacter_GetCurrentItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.GetVehicleSeat
// 0x0008 (0x0008 - 0x0000)
struct BrickCharacter_GetVehicleSeat final
{
public:
	class USeatBrick*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_GetVehicleSeat) == 0x000008, "Wrong alignment on BrickCharacter_GetVehicleSeat");
static_assert(sizeof(BrickCharacter_GetVehicleSeat) == 0x000008, "Wrong size on BrickCharacter_GetVehicleSeat");
static_assert(offsetof(BrickCharacter_GetVehicleSeat, ReturnValue) == 0x000000, "Member 'BrickCharacter_GetVehicleSeat::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.GetVehicleSeatID
// 0x0002 (0x0002 - 0x0000)
struct BrickCharacter_GetVehicleSeatID final
{
public:
	struct FBrickEditorObjectID                   ReturnValue;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_GetVehicleSeatID) == 0x000002, "Wrong alignment on BrickCharacter_GetVehicleSeatID");
static_assert(sizeof(BrickCharacter_GetVehicleSeatID) == 0x000002, "Wrong size on BrickCharacter_GetVehicleSeatID");
static_assert(offsetof(BrickCharacter_GetVehicleSeatID, ReturnValue) == 0x000000, "Member 'BrickCharacter_GetVehicleSeatID::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.HasCurrentItem
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_HasCurrentItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_HasCurrentItem) == 0x000001, "Wrong alignment on BrickCharacter_HasCurrentItem");
static_assert(sizeof(BrickCharacter_HasCurrentItem) == 0x000001, "Wrong size on BrickCharacter_HasCurrentItem");
static_assert(offsetof(BrickCharacter_HasCurrentItem, ReturnValue) == 0x000000, "Member 'BrickCharacter_HasCurrentItem::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.IsCarryingBrick
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_IsCarryingBrick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_IsCarryingBrick) == 0x000001, "Wrong alignment on BrickCharacter_IsCarryingBrick");
static_assert(sizeof(BrickCharacter_IsCarryingBrick) == 0x000001, "Wrong size on BrickCharacter_IsCarryingBrick");
static_assert(offsetof(BrickCharacter_IsCarryingBrick, ReturnValue) == 0x000000, "Member 'BrickCharacter_IsCarryingBrick::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_IsFiring) == 0x000001, "Wrong alignment on BrickCharacter_IsFiring");
static_assert(sizeof(BrickCharacter_IsFiring) == 0x000001, "Wrong size on BrickCharacter_IsFiring");
static_assert(offsetof(BrickCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'BrickCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.IsInDriverSeat
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_IsInDriverSeat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_IsInDriverSeat) == 0x000001, "Wrong alignment on BrickCharacter_IsInDriverSeat");
static_assert(sizeof(BrickCharacter_IsInDriverSeat) == 0x000001, "Wrong size on BrickCharacter_IsInDriverSeat");
static_assert(offsetof(BrickCharacter_IsInDriverSeat, ReturnValue) == 0x000000, "Member 'BrickCharacter_IsInDriverSeat::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickCharacter.ShouldFire
// 0x0001 (0x0001 - 0x0000)
struct BrickCharacter_ShouldFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickCharacter_ShouldFire) == 0x000001, "Wrong alignment on BrickCharacter_ShouldFire");
static_assert(sizeof(BrickCharacter_ShouldFire) == 0x000001, "Wrong size on BrickCharacter_ShouldFire");
static_assert(offsetof(BrickCharacter_ShouldFire, ReturnValue) == 0x000000, "Member 'BrickCharacter_ShouldFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.CarWheelBrick.OnRootComponentWake
// 0x0010 (0x0010 - 0x0000)
struct CarWheelBrick_OnRootComponentWake final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarWheelBrick_OnRootComponentWake) == 0x000008, "Wrong alignment on CarWheelBrick_OnRootComponentWake");
static_assert(sizeof(CarWheelBrick_OnRootComponentWake) == 0x000010, "Wrong size on CarWheelBrick_OnRootComponentWake");
static_assert(offsetof(CarWheelBrick_OnRootComponentWake, SleepingComponent) == 0x000000, "Member 'CarWheelBrick_OnRootComponentWake::SleepingComponent' has a wrong offset!");
static_assert(offsetof(CarWheelBrick_OnRootComponentWake, BoneName) == 0x000008, "Member 'CarWheelBrick_OnRootComponentWake::BoneName' has a wrong offset!");

// Function BrickRigs.JoinSessionPopupWidget.OnPasswordChanged
// 0x0020 (0x0020 - 0x0000)
struct JoinSessionPopupWidget_OnPasswordChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JoinSessionPopupWidget_OnPasswordChanged) == 0x000008, "Wrong alignment on JoinSessionPopupWidget_OnPasswordChanged");
static_assert(sizeof(JoinSessionPopupWidget_OnPasswordChanged) == 0x000020, "Wrong size on JoinSessionPopupWidget_OnPasswordChanged");
static_assert(offsetof(JoinSessionPopupWidget_OnPasswordChanged, NewText) == 0x000000, "Member 'JoinSessionPopupWidget_OnPasswordChanged::NewText' has a wrong offset!");
static_assert(offsetof(JoinSessionPopupWidget_OnPasswordChanged, EventType) == 0x000018, "Member 'JoinSessionPopupWidget_OnPasswordChanged::EventType' has a wrong offset!");

// Function BrickRigs.JoinSessionPopupWidget.UpdateJoinState
// 0x0003 (0x0003 - 0x0000)
struct JoinSessionPopupWidget_UpdateJoinState final
{
public:
	EJoinSessionState                             InJoinState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPasswordRequired;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHasPassword;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoinSessionPopupWidget_UpdateJoinState) == 0x000001, "Wrong alignment on JoinSessionPopupWidget_UpdateJoinState");
static_assert(sizeof(JoinSessionPopupWidget_UpdateJoinState) == 0x000003, "Wrong size on JoinSessionPopupWidget_UpdateJoinState");
static_assert(offsetof(JoinSessionPopupWidget_UpdateJoinState, InJoinState) == 0x000000, "Member 'JoinSessionPopupWidget_UpdateJoinState::InJoinState' has a wrong offset!");
static_assert(offsetof(JoinSessionPopupWidget_UpdateJoinState, bInPasswordRequired) == 0x000001, "Member 'JoinSessionPopupWidget_UpdateJoinState::bInPasswordRequired' has a wrong offset!");
static_assert(offsetof(JoinSessionPopupWidget_UpdateJoinState, bInHasPassword) == 0x000002, "Member 'JoinSessionPopupWidget_UpdateJoinState::bInHasPassword' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.OnRep_Money
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_OnRep_Money final
{
public:
	float                                         PrevValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_OnRep_Money) == 0x000004, "Wrong alignment on BrickPlayerState_OnRep_Money");
static_assert(sizeof(BrickPlayerState_OnRep_Money) == 0x000004, "Wrong size on BrickPlayerState_OnRep_Money");
static_assert(offsetof(BrickPlayerState_OnRep_Money, PrevValue) == 0x000000, "Member 'BrickPlayerState_OnRep_Money::PrevValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetDeaths
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_SetDeaths final
{
public:
	int32                                         NewDeaths;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetDeaths) == 0x000004, "Wrong alignment on BrickPlayerState_SetDeaths");
static_assert(sizeof(BrickPlayerState_SetDeaths) == 0x000004, "Wrong size on BrickPlayerState_SetDeaths");
static_assert(offsetof(BrickPlayerState_SetDeaths, NewDeaths) == 0x000000, "Member 'BrickPlayerState_SetDeaths::NewDeaths' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetIsAdmin
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_SetIsAdmin final
{
public:
	bool                                          bNewIsAdmin;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetIsAdmin) == 0x000001, "Wrong alignment on BrickPlayerState_SetIsAdmin");
static_assert(sizeof(BrickPlayerState_SetIsAdmin) == 0x000001, "Wrong size on BrickPlayerState_SetIsAdmin");
static_assert(offsetof(BrickPlayerState_SetIsAdmin, bNewIsAdmin) == 0x000000, "Member 'BrickPlayerState_SetIsAdmin::bNewIsAdmin' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetIsAlive
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_SetIsAlive final
{
public:
	bool                                          bInIsAlive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetIsAlive) == 0x000001, "Wrong alignment on BrickPlayerState_SetIsAlive");
static_assert(sizeof(BrickPlayerState_SetIsAlive) == 0x000001, "Wrong size on BrickPlayerState_SetIsAlive");
static_assert(offsetof(BrickPlayerState_SetIsAlive, bInIsAlive) == 0x000000, "Member 'BrickPlayerState_SetIsAlive::bInIsAlive' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetIsTeamLeader
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_SetIsTeamLeader final
{
public:
	bool                                          bNewLeader;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetIsTeamLeader) == 0x000001, "Wrong alignment on BrickPlayerState_SetIsTeamLeader");
static_assert(sizeof(BrickPlayerState_SetIsTeamLeader) == 0x000001, "Wrong size on BrickPlayerState_SetIsTeamLeader");
static_assert(offsetof(BrickPlayerState_SetIsTeamLeader, bNewLeader) == 0x000000, "Member 'BrickPlayerState_SetIsTeamLeader::bNewLeader' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetKills
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_SetKills final
{
public:
	int32                                         NewKills;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetKills) == 0x000004, "Wrong alignment on BrickPlayerState_SetKills");
static_assert(sizeof(BrickPlayerState_SetKills) == 0x000004, "Wrong size on BrickPlayerState_SetKills");
static_assert(offsetof(BrickPlayerState_SetKills, NewKills) == 0x000000, "Member 'BrickPlayerState_SetKills::NewKills' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetMoney
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_SetMoney final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetMoney) == 0x000004, "Wrong alignment on BrickPlayerState_SetMoney");
static_assert(sizeof(BrickPlayerState_SetMoney) == 0x000004, "Wrong size on BrickPlayerState_SetMoney");
static_assert(offsetof(BrickPlayerState_SetMoney, NewValue) == 0x000000, "Member 'BrickPlayerState_SetMoney::NewValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.SetScore
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_SetScore final
{
public:
	float                                         NewScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_SetScore) == 0x000004, "Wrong alignment on BrickPlayerState_SetScore");
static_assert(sizeof(BrickPlayerState_SetScore) == 0x000004, "Wrong size on BrickPlayerState_SetScore");
static_assert(offsetof(BrickPlayerState_SetScore, NewScore) == 0x000000, "Member 'BrickPlayerState_SetScore::NewScore' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.GetDeaths
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_GetDeaths final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_GetDeaths) == 0x000004, "Wrong alignment on BrickPlayerState_GetDeaths");
static_assert(sizeof(BrickPlayerState_GetDeaths) == 0x000004, "Wrong size on BrickPlayerState_GetDeaths");
static_assert(offsetof(BrickPlayerState_GetDeaths, ReturnValue) == 0x000000, "Member 'BrickPlayerState_GetDeaths::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.GetKills
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_GetKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_GetKills) == 0x000004, "Wrong alignment on BrickPlayerState_GetKills");
static_assert(sizeof(BrickPlayerState_GetKills) == 0x000004, "Wrong size on BrickPlayerState_GetKills");
static_assert(offsetof(BrickPlayerState_GetKills, ReturnValue) == 0x000000, "Member 'BrickPlayerState_GetKills::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.GetMoney
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_GetMoney final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_GetMoney) == 0x000004, "Wrong alignment on BrickPlayerState_GetMoney");
static_assert(sizeof(BrickPlayerState_GetMoney) == 0x000004, "Wrong size on BrickPlayerState_GetMoney");
static_assert(offsetof(BrickPlayerState_GetMoney, ReturnValue) == 0x000000, "Member 'BrickPlayerState_GetMoney::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.GetPlayerNameText
// 0x0018 (0x0018 - 0x0000)
struct BrickPlayerState_GetPlayerNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_GetPlayerNameText) == 0x000008, "Wrong alignment on BrickPlayerState_GetPlayerNameText");
static_assert(sizeof(BrickPlayerState_GetPlayerNameText) == 0x000018, "Wrong size on BrickPlayerState_GetPlayerNameText");
static_assert(offsetof(BrickPlayerState_GetPlayerNameText, ReturnValue) == 0x000000, "Member 'BrickPlayerState_GetPlayerNameText::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.GetUncompressedPing
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerState_GetUncompressedPing final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_GetUncompressedPing) == 0x000004, "Wrong alignment on BrickPlayerState_GetUncompressedPing");
static_assert(sizeof(BrickPlayerState_GetUncompressedPing) == 0x000004, "Wrong size on BrickPlayerState_GetUncompressedPing");
static_assert(offsetof(BrickPlayerState_GetUncompressedPing, ReturnValue) == 0x000000, "Member 'BrickPlayerState_GetUncompressedPing::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_IsAdmin) == 0x000001, "Wrong alignment on BrickPlayerState_IsAdmin");
static_assert(sizeof(BrickPlayerState_IsAdmin) == 0x000001, "Wrong size on BrickPlayerState_IsAdmin");
static_assert(offsetof(BrickPlayerState_IsAdmin, ReturnValue) == 0x000000, "Member 'BrickPlayerState_IsAdmin::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_IsAlive) == 0x000001, "Wrong alignment on BrickPlayerState_IsAlive");
static_assert(sizeof(BrickPlayerState_IsAlive) == 0x000001, "Wrong size on BrickPlayerState_IsAlive");
static_assert(offsetof(BrickPlayerState_IsAlive, ReturnValue) == 0x000000, "Member 'BrickPlayerState_IsAlive::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.IsHost
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_IsHost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_IsHost) == 0x000001, "Wrong alignment on BrickPlayerState_IsHost");
static_assert(sizeof(BrickPlayerState_IsHost) == 0x000001, "Wrong size on BrickPlayerState_IsHost");
static_assert(offsetof(BrickPlayerState_IsHost, ReturnValue) == 0x000000, "Member 'BrickPlayerState_IsHost::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerState.IsTeamLeader
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerState_IsTeamLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerState_IsTeamLeader) == 0x000001, "Wrong alignment on BrickPlayerState_IsTeamLeader");
static_assert(sizeof(BrickPlayerState_IsTeamLeader) == 0x000001, "Wrong size on BrickPlayerState_IsTeamLeader");
static_assert(offsetof(BrickPlayerState_IsTeamLeader, ReturnValue) == 0x000000, "Member 'BrickPlayerState_IsTeamLeader::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickConnectorsISMComponent.SetStyle
// 0x0004 (0x0004 - 0x0000)
struct BrickConnectorsISMComponent_SetStyle final
{
public:
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            NewFocusedColorStyle;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            NewStyleState;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            NewFocusedStyleState;                              // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickConnectorsISMComponent_SetStyle) == 0x000001, "Wrong alignment on BrickConnectorsISMComponent_SetStyle");
static_assert(sizeof(BrickConnectorsISMComponent_SetStyle) == 0x000004, "Wrong size on BrickConnectorsISMComponent_SetStyle");
static_assert(offsetof(BrickConnectorsISMComponent_SetStyle, NewColorStyle) == 0x000000, "Member 'BrickConnectorsISMComponent_SetStyle::NewColorStyle' has a wrong offset!");
static_assert(offsetof(BrickConnectorsISMComponent_SetStyle, NewFocusedColorStyle) == 0x000001, "Member 'BrickConnectorsISMComponent_SetStyle::NewFocusedColorStyle' has a wrong offset!");
static_assert(offsetof(BrickConnectorsISMComponent_SetStyle, NewStyleState) == 0x000002, "Member 'BrickConnectorsISMComponent_SetStyle::NewStyleState' has a wrong offset!");
static_assert(offsetof(BrickConnectorsISMComponent_SetStyle, NewFocusedStyleState) == 0x000003, "Member 'BrickConnectorsISMComponent_SetStyle::NewFocusedStyleState' has a wrong offset!");

// Function BrickRigs.BrickDataSingleton.Get
// 0x0008 (0x0008 - 0x0000)
struct BrickDataSingleton_Get final
{
public:
	class UBrickDataSingleton*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDataSingleton_Get) == 0x000008, "Wrong alignment on BrickDataSingleton_Get");
static_assert(sizeof(BrickDataSingleton_Get) == 0x000008, "Wrong size on BrickDataSingleton_Get");
static_assert(offsetof(BrickDataSingleton_Get, ReturnValue) == 0x000000, "Member 'BrickDataSingleton_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickDataSingleton.GetColorDisplayName
// 0x0030 (0x0030 - 0x0000)
struct BrickDataSingleton_GetColorDisplayName final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoundValue;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickDataSingleton_GetColorDisplayName) == 0x000008, "Wrong alignment on BrickDataSingleton_GetColorDisplayName");
static_assert(sizeof(BrickDataSingleton_GetColorDisplayName) == 0x000030, "Wrong size on BrickDataSingleton_GetColorDisplayName");
static_assert(offsetof(BrickDataSingleton_GetColorDisplayName, Color) == 0x000000, "Member 'BrickDataSingleton_GetColorDisplayName::Color' has a wrong offset!");
static_assert(offsetof(BrickDataSingleton_GetColorDisplayName, bRoundValue) == 0x000010, "Member 'BrickDataSingleton_GetColorDisplayName::bRoundValue' has a wrong offset!");
static_assert(offsetof(BrickDataSingleton_GetColorDisplayName, ReturnValue) == 0x000018, "Member 'BrickDataSingleton_GetColorDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.OnTriggerBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct CapturePoint_OnTriggerBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_OnTriggerBeginOverlap) == 0x000008, "Wrong alignment on CapturePoint_OnTriggerBeginOverlap");
static_assert(sizeof(CapturePoint_OnTriggerBeginOverlap) == 0x0000A8, "Wrong size on CapturePoint_OnTriggerBeginOverlap");
static_assert(offsetof(CapturePoint_OnTriggerBeginOverlap, OverlappedComponent) == 0x000000, "Member 'CapturePoint_OnTriggerBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerBeginOverlap, OtherActor) == 0x000008, "Member 'CapturePoint_OnTriggerBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerBeginOverlap, OtherComp) == 0x000010, "Member 'CapturePoint_OnTriggerBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'CapturePoint_OnTriggerBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerBeginOverlap, bFromSweep) == 0x00001C, "Member 'CapturePoint_OnTriggerBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerBeginOverlap, SweepResult) == 0x000020, "Member 'CapturePoint_OnTriggerBeginOverlap::SweepResult' has a wrong offset!");

// Function BrickRigs.CapturePoint.OnTriggerEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct CapturePoint_OnTriggerEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CapturePoint_OnTriggerEndOverlap) == 0x000008, "Wrong alignment on CapturePoint_OnTriggerEndOverlap");
static_assert(sizeof(CapturePoint_OnTriggerEndOverlap) == 0x000020, "Wrong size on CapturePoint_OnTriggerEndOverlap");
static_assert(offsetof(CapturePoint_OnTriggerEndOverlap, OverlappedComponent) == 0x000000, "Member 'CapturePoint_OnTriggerEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerEndOverlap, OtherActor) == 0x000008, "Member 'CapturePoint_OnTriggerEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerEndOverlap, OtherComp) == 0x000010, "Member 'CapturePoint_OnTriggerEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(CapturePoint_OnTriggerEndOverlap, OtherBodyIndex) == 0x000018, "Member 'CapturePoint_OnTriggerEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function BrickRigs.CapturePoint.SetCapturedBy
// 0x0003 (0x0003 - 0x0000)
struct CapturePoint_SetCapturedBy final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewHasBeenCaptured;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_SetCapturedBy) == 0x000001, "Wrong alignment on CapturePoint_SetCapturedBy");
static_assert(sizeof(CapturePoint_SetCapturedBy) == 0x000003, "Wrong size on CapturePoint_SetCapturedBy");
static_assert(offsetof(CapturePoint_SetCapturedBy, TeamID) == 0x000000, "Member 'CapturePoint_SetCapturedBy::TeamID' has a wrong offset!");
static_assert(offsetof(CapturePoint_SetCapturedBy, bNewHasBeenCaptured) == 0x000001, "Member 'CapturePoint_SetCapturedBy::bNewHasBeenCaptured' has a wrong offset!");
static_assert(offsetof(CapturePoint_SetCapturedBy, ReturnValue) == 0x000002, "Member 'CapturePoint_SetCapturedBy::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.SetCaptureRatio
// 0x0008 (0x0008 - 0x0000)
struct CapturePoint_SetCaptureRatio final
{
public:
	float                                         NewRatio;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CapturePoint_SetCaptureRatio) == 0x000004, "Wrong alignment on CapturePoint_SetCaptureRatio");
static_assert(sizeof(CapturePoint_SetCaptureRatio) == 0x000008, "Wrong size on CapturePoint_SetCaptureRatio");
static_assert(offsetof(CapturePoint_SetCaptureRatio, NewRatio) == 0x000000, "Member 'CapturePoint_SetCaptureRatio::NewRatio' has a wrong offset!");
static_assert(offsetof(CapturePoint_SetCaptureRatio, ReturnValue) == 0x000004, "Member 'CapturePoint_SetCaptureRatio::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.SetCapturingTeam
// 0x0002 (0x0002 - 0x0000)
struct CapturePoint_SetCapturingTeam final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_SetCapturingTeam) == 0x000001, "Wrong alignment on CapturePoint_SetCapturingTeam");
static_assert(sizeof(CapturePoint_SetCapturingTeam) == 0x000002, "Wrong size on CapturePoint_SetCapturingTeam");
static_assert(offsetof(CapturePoint_SetCapturingTeam, TeamID) == 0x000000, "Member 'CapturePoint_SetCapturingTeam::TeamID' has a wrong offset!");
static_assert(offsetof(CapturePoint_SetCapturingTeam, ReturnValue) == 0x000001, "Member 'CapturePoint_SetCapturingTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.GetCapturedBy
// 0x0001 (0x0001 - 0x0000)
struct CapturePoint_GetCapturedBy final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_GetCapturedBy) == 0x000001, "Wrong alignment on CapturePoint_GetCapturedBy");
static_assert(sizeof(CapturePoint_GetCapturedBy) == 0x000001, "Wrong size on CapturePoint_GetCapturedBy");
static_assert(offsetof(CapturePoint_GetCapturedBy, ReturnValue) == 0x000000, "Member 'CapturePoint_GetCapturedBy::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.GetCapturePointShortDisplayName
// 0x0018 (0x0018 - 0x0000)
struct CapturePoint_GetCapturePointShortDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_GetCapturePointShortDisplayName) == 0x000008, "Wrong alignment on CapturePoint_GetCapturePointShortDisplayName");
static_assert(sizeof(CapturePoint_GetCapturePointShortDisplayName) == 0x000018, "Wrong size on CapturePoint_GetCapturePointShortDisplayName");
static_assert(offsetof(CapturePoint_GetCapturePointShortDisplayName, ReturnValue) == 0x000000, "Member 'CapturePoint_GetCapturePointShortDisplayName::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.GetCaptureRatio
// 0x0004 (0x0004 - 0x0000)
struct CapturePoint_GetCaptureRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_GetCaptureRatio) == 0x000004, "Wrong alignment on CapturePoint_GetCaptureRatio");
static_assert(sizeof(CapturePoint_GetCaptureRatio) == 0x000004, "Wrong size on CapturePoint_GetCaptureRatio");
static_assert(offsetof(CapturePoint_GetCaptureRatio, ReturnValue) == 0x000000, "Member 'CapturePoint_GetCaptureRatio::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.GetCapturingTeam
// 0x0001 (0x0001 - 0x0000)
struct CapturePoint_GetCapturingTeam final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_GetCapturingTeam) == 0x000001, "Wrong alignment on CapturePoint_GetCapturingTeam");
static_assert(sizeof(CapturePoint_GetCapturingTeam) == 0x000001, "Wrong size on CapturePoint_GetCapturingTeam");
static_assert(offsetof(CapturePoint_GetCapturingTeam, ReturnValue) == 0x000000, "Member 'CapturePoint_GetCapturingTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.HasBeenCaptured
// 0x0001 (0x0001 - 0x0000)
struct CapturePoint_HasBeenCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePoint_HasBeenCaptured) == 0x000001, "Wrong alignment on CapturePoint_HasBeenCaptured");
static_assert(sizeof(CapturePoint_HasBeenCaptured) == 0x000001, "Wrong size on CapturePoint_HasBeenCaptured");
static_assert(offsetof(CapturePoint_HasBeenCaptured, ReturnValue) == 0x000000, "Member 'CapturePoint_HasBeenCaptured::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.IsCapturePointOnBuilding
// 0x0010 (0x0010 - 0x0000)
struct CapturePoint_IsCapturePointOnBuilding final
{
public:
	const class ABrickBuilding*                   InBuilding;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CapturePoint_IsCapturePointOnBuilding) == 0x000008, "Wrong alignment on CapturePoint_IsCapturePointOnBuilding");
static_assert(sizeof(CapturePoint_IsCapturePointOnBuilding) == 0x000010, "Wrong size on CapturePoint_IsCapturePointOnBuilding");
static_assert(offsetof(CapturePoint_IsCapturePointOnBuilding, InBuilding) == 0x000000, "Member 'CapturePoint_IsCapturePointOnBuilding::InBuilding' has a wrong offset!");
static_assert(offsetof(CapturePoint_IsCapturePointOnBuilding, ReturnValue) == 0x000008, "Member 'CapturePoint_IsCapturePointOnBuilding::ReturnValue' has a wrong offset!");

// Function BrickRigs.CapturePoint.IsCharacterOnCapturePoint
// 0x0010 (0x0010 - 0x0000)
struct CapturePoint_IsCharacterOnCapturePoint final
{
public:
	class ABaseCharacter*                         InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CapturePoint_IsCharacterOnCapturePoint) == 0x000008, "Wrong alignment on CapturePoint_IsCharacterOnCapturePoint");
static_assert(sizeof(CapturePoint_IsCharacterOnCapturePoint) == 0x000010, "Wrong size on CapturePoint_IsCharacterOnCapturePoint");
static_assert(offsetof(CapturePoint_IsCharacterOnCapturePoint, InCharacter) == 0x000000, "Member 'CapturePoint_IsCharacterOnCapturePoint::InCharacter' has a wrong offset!");
static_assert(offsetof(CapturePoint_IsCharacterOnCapturePoint, ReturnValue) == 0x000008, "Member 'CapturePoint_IsCharacterOnCapturePoint::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickEditorArrowComponent.SetArrowType
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorArrowComponent_SetArrowType final
{
public:
	EBrickEditorArrowType                         NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorArrowComponent_SetArrowType) == 0x000001, "Wrong alignment on BrickEditorArrowComponent_SetArrowType");
static_assert(sizeof(BrickEditorArrowComponent_SetArrowType) == 0x000001, "Wrong size on BrickEditorArrowComponent_SetArrowType");
static_assert(offsetof(BrickEditorArrowComponent_SetArrowType, NewType) == 0x000000, "Member 'BrickEditorArrowComponent_SetArrowType::NewType' has a wrong offset!");

// Function BrickRigs.BrickEditorArrowComponent.SetCircularArrowAngle
// 0x0004 (0x0004 - 0x0000)
struct BrickEditorArrowComponent_SetCircularArrowAngle final
{
public:
	float                                         NewAngle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorArrowComponent_SetCircularArrowAngle) == 0x000004, "Wrong alignment on BrickEditorArrowComponent_SetCircularArrowAngle");
static_assert(sizeof(BrickEditorArrowComponent_SetCircularArrowAngle) == 0x000004, "Wrong size on BrickEditorArrowComponent_SetCircularArrowAngle");
static_assert(offsetof(BrickEditorArrowComponent_SetCircularArrowAngle, NewAngle) == 0x000000, "Member 'BrickEditorArrowComponent_SetCircularArrowAngle::NewAngle' has a wrong offset!");

// Function BrickRigs.BrickEditorArrowComponent.SetCircularArrowRadius
// 0x0004 (0x0004 - 0x0000)
struct BrickEditorArrowComponent_SetCircularArrowRadius final
{
public:
	float                                         NewRadius;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorArrowComponent_SetCircularArrowRadius) == 0x000004, "Wrong alignment on BrickEditorArrowComponent_SetCircularArrowRadius");
static_assert(sizeof(BrickEditorArrowComponent_SetCircularArrowRadius) == 0x000004, "Wrong size on BrickEditorArrowComponent_SetCircularArrowRadius");
static_assert(offsetof(BrickEditorArrowComponent_SetCircularArrowRadius, NewRadius) == 0x000000, "Member 'BrickEditorArrowComponent_SetCircularArrowRadius::NewRadius' has a wrong offset!");

// Function BrickRigs.BrickEditorArrowComponent.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorArrowComponent_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorArrowComponent_SetColorStyle) == 0x000001, "Wrong alignment on BrickEditorArrowComponent_SetColorStyle");
static_assert(sizeof(BrickEditorArrowComponent_SetColorStyle) == 0x000001, "Wrong size on BrickEditorArrowComponent_SetColorStyle");
static_assert(offsetof(BrickEditorArrowComponent_SetColorStyle, NewStyle) == 0x000000, "Member 'BrickEditorArrowComponent_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickEditorArrowComponent.SetLinearArrowLength
// 0x0004 (0x0004 - 0x0000)
struct BrickEditorArrowComponent_SetLinearArrowLength final
{
public:
	float                                         NewLength;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorArrowComponent_SetLinearArrowLength) == 0x000004, "Wrong alignment on BrickEditorArrowComponent_SetLinearArrowLength");
static_assert(sizeof(BrickEditorArrowComponent_SetLinearArrowLength) == 0x000004, "Wrong size on BrickEditorArrowComponent_SetLinearArrowLength");
static_assert(offsetof(BrickEditorArrowComponent_SetLinearArrowLength, NewLength) == 0x000000, "Member 'BrickEditorArrowComponent_SetLinearArrowLength::NewLength' has a wrong offset!");

// Function BrickRigs.CouplingBrick.Interact_DisengageCoupling
// 0x0008 (0x0008 - 0x0000)
struct CouplingBrick_Interact_DisengageCoupling final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CouplingBrick_Interact_DisengageCoupling) == 0x000008, "Wrong alignment on CouplingBrick_Interact_DisengageCoupling");
static_assert(sizeof(CouplingBrick_Interact_DisengageCoupling) == 0x000008, "Wrong size on CouplingBrick_Interact_DisengageCoupling");
static_assert(offsetof(CouplingBrick_Interact_DisengageCoupling, PC) == 0x000000, "Member 'CouplingBrick_Interact_DisengageCoupling::PC' has a wrong offset!");

// Function BrickRigs.CouplingBrick.Interact_EngageCoupling
// 0x0008 (0x0008 - 0x0000)
struct CouplingBrick_Interact_EngageCoupling final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CouplingBrick_Interact_EngageCoupling) == 0x000008, "Wrong alignment on CouplingBrick_Interact_EngageCoupling");
static_assert(sizeof(CouplingBrick_Interact_EngageCoupling) == 0x000008, "Wrong size on CouplingBrick_Interact_EngageCoupling");
static_assert(offsetof(CouplingBrick_Interact_EngageCoupling, PC) == 0x000000, "Member 'CouplingBrick_Interact_EngageCoupling::PC' has a wrong offset!");

// Function BrickRigs.BrickEditorMirrorAxisWidget.UpdateCanBeSelected
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorMirrorAxisWidget_UpdateCanBeSelected final
{
public:
	bool                                          bNewCanBeSelected;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorMirrorAxisWidget_UpdateCanBeSelected) == 0x000001, "Wrong alignment on BrickEditorMirrorAxisWidget_UpdateCanBeSelected");
static_assert(sizeof(BrickEditorMirrorAxisWidget_UpdateCanBeSelected) == 0x000001, "Wrong size on BrickEditorMirrorAxisWidget_UpdateCanBeSelected");
static_assert(offsetof(BrickEditorMirrorAxisWidget_UpdateCanBeSelected, bNewCanBeSelected) == 0x000000, "Member 'BrickEditorMirrorAxisWidget_UpdateCanBeSelected::bNewCanBeSelected' has a wrong offset!");

// Function BrickRigs.BrickEditorMirrorAxisWidget.UpdateIsSelected
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorMirrorAxisWidget_UpdateIsSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorMirrorAxisWidget_UpdateIsSelected) == 0x000001, "Wrong alignment on BrickEditorMirrorAxisWidget_UpdateIsSelected");
static_assert(sizeof(BrickEditorMirrorAxisWidget_UpdateIsSelected) == 0x000001, "Wrong size on BrickEditorMirrorAxisWidget_UpdateIsSelected");
static_assert(offsetof(BrickEditorMirrorAxisWidget_UpdateIsSelected, bNewSelected) == 0x000000, "Member 'BrickEditorMirrorAxisWidget_UpdateIsSelected::bNewSelected' has a wrong offset!");

// Function BrickRigs.BrickEditorMirrorAxisWidget.UpdateMirrorAxis
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorMirrorAxisWidget_UpdateMirrorAxis final
{
public:
	EAxis                                         InAxis;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorMirrorAxisWidget_UpdateMirrorAxis) == 0x000001, "Wrong alignment on BrickEditorMirrorAxisWidget_UpdateMirrorAxis");
static_assert(sizeof(BrickEditorMirrorAxisWidget_UpdateMirrorAxis) == 0x000001, "Wrong size on BrickEditorMirrorAxisWidget_UpdateMirrorAxis");
static_assert(offsetof(BrickEditorMirrorAxisWidget_UpdateMirrorAxis, InAxis) == 0x000000, "Member 'BrickEditorMirrorAxisWidget_UpdateMirrorAxis::InAxis' has a wrong offset!");

// Function BrickRigs.BaseEditorInputComponent.GetCycleViewModeValueText
// 0x0018 (0x0018 - 0x0000)
struct BaseEditorInputComponent_GetCycleViewModeValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEditorInputComponent_GetCycleViewModeValueText) == 0x000008, "Wrong alignment on BaseEditorInputComponent_GetCycleViewModeValueText");
static_assert(sizeof(BaseEditorInputComponent_GetCycleViewModeValueText) == 0x000018, "Wrong size on BaseEditorInputComponent_GetCycleViewModeValueText");
static_assert(offsetof(BaseEditorInputComponent_GetCycleViewModeValueText, ReturnValue) == 0x000000, "Member 'BaseEditorInputComponent_GetCycleViewModeValueText::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseEditorInputComponent.GetExitEditorWithVehicleEnabled
// 0x0001 (0x0001 - 0x0000)
struct BaseEditorInputComponent_GetExitEditorWithVehicleEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEditorInputComponent_GetExitEditorWithVehicleEnabled) == 0x000001, "Wrong alignment on BaseEditorInputComponent_GetExitEditorWithVehicleEnabled");
static_assert(sizeof(BaseEditorInputComponent_GetExitEditorWithVehicleEnabled) == 0x000001, "Wrong size on BaseEditorInputComponent_GetExitEditorWithVehicleEnabled");
static_assert(offsetof(BaseEditorInputComponent_GetExitEditorWithVehicleEnabled, ReturnValue) == 0x000000, "Member 'BaseEditorInputComponent_GetExitEditorWithVehicleEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseEditorInputComponent.GetSaveItemAsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BaseEditorInputComponent_GetSaveItemAsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEditorInputComponent_GetSaveItemAsEnabled) == 0x000001, "Wrong alignment on BaseEditorInputComponent_GetSaveItemAsEnabled");
static_assert(sizeof(BaseEditorInputComponent_GetSaveItemAsEnabled) == 0x000001, "Wrong size on BaseEditorInputComponent_GetSaveItemAsEnabled");
static_assert(offsetof(BaseEditorInputComponent_GetSaveItemAsEnabled, ReturnValue) == 0x000000, "Member 'BaseEditorInputComponent_GetSaveItemAsEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseEditorInputComponent.GetSaveItemEnabled
// 0x0001 (0x0001 - 0x0000)
struct BaseEditorInputComponent_GetSaveItemEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEditorInputComponent_GetSaveItemEnabled) == 0x000001, "Wrong alignment on BaseEditorInputComponent_GetSaveItemEnabled");
static_assert(sizeof(BaseEditorInputComponent_GetSaveItemEnabled) == 0x000001, "Wrong size on BaseEditorInputComponent_GetSaveItemEnabled");
static_assert(offsetof(BaseEditorInputComponent_GetSaveItemEnabled, ReturnValue) == 0x000000, "Member 'BaseEditorInputComponent_GetSaveItemEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseEditorInputComponent.GetUploadItemAsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BaseEditorInputComponent_GetUploadItemAsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEditorInputComponent_GetUploadItemAsEnabled) == 0x000001, "Wrong alignment on BaseEditorInputComponent_GetUploadItemAsEnabled");
static_assert(sizeof(BaseEditorInputComponent_GetUploadItemAsEnabled) == 0x000001, "Wrong size on BaseEditorInputComponent_GetUploadItemAsEnabled");
static_assert(offsetof(BaseEditorInputComponent_GetUploadItemAsEnabled, ReturnValue) == 0x000000, "Member 'BaseEditorInputComponent_GetUploadItemAsEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.BaseEditorInputComponent.GetUploadItemEnabled
// 0x0001 (0x0001 - 0x0000)
struct BaseEditorInputComponent_GetUploadItemEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEditorInputComponent_GetUploadItemEnabled) == 0x000001, "Wrong alignment on BaseEditorInputComponent_GetUploadItemEnabled");
static_assert(sizeof(BaseEditorInputComponent_GetUploadItemEnabled) == 0x000001, "Wrong size on BaseEditorInputComponent_GetUploadItemEnabled");
static_assert(offsetof(BaseEditorInputComponent_GetUploadItemEnabled, ReturnValue) == 0x000000, "Member 'BaseEditorInputComponent_GetUploadItemEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.ExplosiveItem.Explode
// 0x0028 (0x0028 - 0x0000)
struct ExplosiveItem_Explode final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosiveItem_Explode) == 0x000008, "Wrong alignment on ExplosiveItem_Explode");
static_assert(sizeof(ExplosiveItem_Explode) == 0x000028, "Wrong size on ExplosiveItem_Explode");
static_assert(offsetof(ExplosiveItem_Explode, DamageAmount) == 0x000000, "Member 'ExplosiveItem_Explode::DamageAmount' has a wrong offset!");
static_assert(offsetof(ExplosiveItem_Explode, DamageEvent) == 0x000008, "Member 'ExplosiveItem_Explode::DamageEvent' has a wrong offset!");
static_assert(offsetof(ExplosiveItem_Explode, EventInstigator) == 0x000018, "Member 'ExplosiveItem_Explode::EventInstigator' has a wrong offset!");
static_assert(offsetof(ExplosiveItem_Explode, DamageCauser) == 0x000020, "Member 'ExplosiveItem_Explode::DamageCauser' has a wrong offset!");

// Function BrickRigs.ExplosiveItem.SetExplosiveState
// 0x0001 (0x0001 - 0x0000)
struct ExplosiveItem_SetExplosiveState final
{
public:
	EExplosiveItemState                           NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosiveItem_SetExplosiveState) == 0x000001, "Wrong alignment on ExplosiveItem_SetExplosiveState");
static_assert(sizeof(ExplosiveItem_SetExplosiveState) == 0x000001, "Wrong size on ExplosiveItem_SetExplosiveState");
static_assert(offsetof(ExplosiveItem_SetExplosiveState, NewState) == 0x000000, "Member 'ExplosiveItem_SetExplosiveState::NewState' has a wrong offset!");

// Function BrickRigs.ExplosiveItem.IsPrimed
// 0x0001 (0x0001 - 0x0000)
struct ExplosiveItem_IsPrimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosiveItem_IsPrimed) == 0x000001, "Wrong alignment on ExplosiveItem_IsPrimed");
static_assert(sizeof(ExplosiveItem_IsPrimed) == 0x000001, "Wrong size on ExplosiveItem_IsPrimed");
static_assert(offsetof(ExplosiveItem_IsPrimed, ReturnValue) == 0x000000, "Member 'ExplosiveItem_IsPrimed::ReturnValue' has a wrong offset!");

// Function BrickRigs.DashboardSliderWidget.UpdateColorStyle
// 0x0001 (0x0001 - 0x0000)
struct DashboardSliderWidget_UpdateColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DashboardSliderWidget_UpdateColorStyle) == 0x000001, "Wrong alignment on DashboardSliderWidget_UpdateColorStyle");
static_assert(sizeof(DashboardSliderWidget_UpdateColorStyle) == 0x000001, "Wrong size on DashboardSliderWidget_UpdateColorStyle");
static_assert(offsetof(DashboardSliderWidget_UpdateColorStyle, NewStyle) == 0x000000, "Member 'DashboardSliderWidget_UpdateColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.DashboardSliderWidget.UpdateIcon
// 0x0004 (0x0004 - 0x0000)
struct DashboardSliderWidget_UpdateIcon final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DashboardSliderWidget_UpdateIcon) == 0x000004, "Wrong alignment on DashboardSliderWidget_UpdateIcon");
static_assert(sizeof(DashboardSliderWidget_UpdateIcon) == 0x000004, "Wrong size on DashboardSliderWidget_UpdateIcon");
static_assert(offsetof(DashboardSliderWidget_UpdateIcon, IconIndex) == 0x000000, "Member 'DashboardSliderWidget_UpdateIcon::IconIndex' has a wrong offset!");

// Function BrickRigs.BrickEditorObjectPropertyWidget.UpdateSelectedObjects
// 0x0020 (0x0020 - 0x0000)
struct BrickEditorObjectPropertyWidget_UpdateSelectedObjects final
{
public:
	class FText                                   FirstObjectName;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumSelectedObjects;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultObjects;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickEditorObjectPropertyWidget_UpdateSelectedObjects) == 0x000008, "Wrong alignment on BrickEditorObjectPropertyWidget_UpdateSelectedObjects");
static_assert(sizeof(BrickEditorObjectPropertyWidget_UpdateSelectedObjects) == 0x000020, "Wrong size on BrickEditorObjectPropertyWidget_UpdateSelectedObjects");
static_assert(offsetof(BrickEditorObjectPropertyWidget_UpdateSelectedObjects, FirstObjectName) == 0x000000, "Member 'BrickEditorObjectPropertyWidget_UpdateSelectedObjects::FirstObjectName' has a wrong offset!");
static_assert(offsetof(BrickEditorObjectPropertyWidget_UpdateSelectedObjects, NumSelectedObjects) == 0x000018, "Member 'BrickEditorObjectPropertyWidget_UpdateSelectedObjects::NumSelectedObjects' has a wrong offset!");
static_assert(offsetof(BrickEditorObjectPropertyWidget_UpdateSelectedObjects, bDefaultObjects) == 0x00001C, "Member 'BrickEditorObjectPropertyWidget_UpdateSelectedObjects::bDefaultObjects' has a wrong offset!");

// Function BrickRigs.BrickEditorParticleComponent.OnSystemFinishedCallback
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorParticleComponent_OnSystemFinishedCallback final
{
public:
	class UParticleSystemComponent*               InParticleComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorParticleComponent_OnSystemFinishedCallback) == 0x000008, "Wrong alignment on BrickEditorParticleComponent_OnSystemFinishedCallback");
static_assert(sizeof(BrickEditorParticleComponent_OnSystemFinishedCallback) == 0x000008, "Wrong size on BrickEditorParticleComponent_OnSystemFinishedCallback");
static_assert(offsetof(BrickEditorParticleComponent_OnSystemFinishedCallback, InParticleComponent) == 0x000000, "Member 'BrickEditorParticleComponent_OnSystemFinishedCallback::InParticleComponent' has a wrong offset!");

// Function BrickRigs.GravelSilo.Interact_CloseSilo
// 0x0008 (0x0008 - 0x0000)
struct GravelSilo_Interact_CloseSilo final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravelSilo_Interact_CloseSilo) == 0x000008, "Wrong alignment on GravelSilo_Interact_CloseSilo");
static_assert(sizeof(GravelSilo_Interact_CloseSilo) == 0x000008, "Wrong size on GravelSilo_Interact_CloseSilo");
static_assert(offsetof(GravelSilo_Interact_CloseSilo, PC) == 0x000000, "Member 'GravelSilo_Interact_CloseSilo::PC' has a wrong offset!");

// Function BrickRigs.GravelSilo.Interact_OpenSilo
// 0x0008 (0x0008 - 0x0000)
struct GravelSilo_Interact_OpenSilo final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravelSilo_Interact_OpenSilo) == 0x000008, "Wrong alignment on GravelSilo_Interact_OpenSilo");
static_assert(sizeof(GravelSilo_Interact_OpenSilo) == 0x000008, "Wrong size on GravelSilo_Interact_OpenSilo");
static_assert(offsetof(GravelSilo_Interact_OpenSilo, PC) == 0x000000, "Member 'GravelSilo_Interact_OpenSilo::PC' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.AddMirrorModeWidget
// 0x0010 (0x0010 - 0x0000)
struct BrickEditorWidget_AddMirrorModeWidget final
{
public:
	class UBrickEditorMirrorAxisWidget*           Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickEditorWidget_AddMirrorModeWidget) == 0x000008, "Wrong alignment on BrickEditorWidget_AddMirrorModeWidget");
static_assert(sizeof(BrickEditorWidget_AddMirrorModeWidget) == 0x000010, "Wrong size on BrickEditorWidget_AddMirrorModeWidget");
static_assert(offsetof(BrickEditorWidget_AddMirrorModeWidget, Widget) == 0x000000, "Member 'BrickEditorWidget_AddMirrorModeWidget::Widget' has a wrong offset!");
static_assert(offsetof(BrickEditorWidget_AddMirrorModeWidget, Index_0) == 0x000008, "Member 'BrickEditorWidget_AddMirrorModeWidget::Index_0' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.AddModeWidget
// 0x0008 (0x0008 - 0x0000)
struct BrickEditorWidget_AddModeWidget final
{
public:
	class UBrickEditorModeWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorWidget_AddModeWidget) == 0x000008, "Wrong alignment on BrickEditorWidget_AddModeWidget");
static_assert(sizeof(BrickEditorWidget_AddModeWidget) == 0x000008, "Wrong size on BrickEditorWidget_AddModeWidget");
static_assert(offsetof(BrickEditorWidget_AddModeWidget, Widget) == 0x000000, "Member 'BrickEditorWidget_AddModeWidget::Widget' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.OnMeasurementSystemChanged
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorWidget_OnMeasurementSystemChanged final
{
public:
	EMeasurementSystem                            NewSystem;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorWidget_OnMeasurementSystemChanged) == 0x000001, "Wrong alignment on BrickEditorWidget_OnMeasurementSystemChanged");
static_assert(sizeof(BrickEditorWidget_OnMeasurementSystemChanged) == 0x000001, "Wrong size on BrickEditorWidget_OnMeasurementSystemChanged");
static_assert(offsetof(BrickEditorWidget_OnMeasurementSystemChanged, NewSystem) == 0x000000, "Member 'BrickEditorWidget_OnMeasurementSystemChanged::NewSystem' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.OnPlacableSearchTextChanged
// 0x0020 (0x0020 - 0x0000)
struct BrickEditorWidget_OnPlacableSearchTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickEditorWidget_OnPlacableSearchTextChanged) == 0x000008, "Wrong alignment on BrickEditorWidget_OnPlacableSearchTextChanged");
static_assert(sizeof(BrickEditorWidget_OnPlacableSearchTextChanged) == 0x000020, "Wrong size on BrickEditorWidget_OnPlacableSearchTextChanged");
static_assert(offsetof(BrickEditorWidget_OnPlacableSearchTextChanged, NewText) == 0x000000, "Member 'BrickEditorWidget_OnPlacableSearchTextChanged::NewText' has a wrong offset!");
static_assert(offsetof(BrickEditorWidget_OnPlacableSearchTextChanged, EventType) == 0x000018, "Member 'BrickEditorWidget_OnPlacableSearchTextChanged::EventType' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.UpdateCanClearPlacableFilter
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorWidget_UpdateCanClearPlacableFilter final
{
public:
	bool                                          bNewCanClear;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorWidget_UpdateCanClearPlacableFilter) == 0x000001, "Wrong alignment on BrickEditorWidget_UpdateCanClearPlacableFilter");
static_assert(sizeof(BrickEditorWidget_UpdateCanClearPlacableFilter) == 0x000001, "Wrong size on BrickEditorWidget_UpdateCanClearPlacableFilter");
static_assert(offsetof(BrickEditorWidget_UpdateCanClearPlacableFilter, bNewCanClear) == 0x000000, "Member 'BrickEditorWidget_UpdateCanClearPlacableFilter::bNewCanClear' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.UpdateCanPlaceObjects
// 0x0001 (0x0001 - 0x0000)
struct BrickEditorWidget_UpdateCanPlaceObjects final
{
public:
	bool                                          bNewCanPlace;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorWidget_UpdateCanPlaceObjects) == 0x000001, "Wrong alignment on BrickEditorWidget_UpdateCanPlaceObjects");
static_assert(sizeof(BrickEditorWidget_UpdateCanPlaceObjects) == 0x000001, "Wrong size on BrickEditorWidget_UpdateCanPlaceObjects");
static_assert(offsetof(BrickEditorWidget_UpdateCanPlaceObjects, bNewCanPlace) == 0x000000, "Member 'BrickEditorWidget_UpdateCanPlaceObjects::bNewCanPlace' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.UpdateEditorUIScale
// 0x0004 (0x0004 - 0x0000)
struct BrickEditorWidget_UpdateEditorUIScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickEditorWidget_UpdateEditorUIScale) == 0x000004, "Wrong alignment on BrickEditorWidget_UpdateEditorUIScale");
static_assert(sizeof(BrickEditorWidget_UpdateEditorUIScale) == 0x000004, "Wrong size on BrickEditorWidget_UpdateEditorUIScale");
static_assert(offsetof(BrickEditorWidget_UpdateEditorUIScale, NewScale) == 0x000000, "Member 'BrickEditorWidget_UpdateEditorUIScale::NewScale' has a wrong offset!");

// Function BrickRigs.BrickEditorWidget.UpdateSelection
// 0x0020 (0x0020 - 0x0000)
struct BrickEditorWidget_UpdateSelection final
{
public:
	class FText                                   SelectionName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAnythingSelected;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickEditorWidget_UpdateSelection) == 0x000008, "Wrong alignment on BrickEditorWidget_UpdateSelection");
static_assert(sizeof(BrickEditorWidget_UpdateSelection) == 0x000020, "Wrong size on BrickEditorWidget_UpdateSelection");
static_assert(offsetof(BrickEditorWidget_UpdateSelection, SelectionName) == 0x000000, "Member 'BrickEditorWidget_UpdateSelection::SelectionName' has a wrong offset!");
static_assert(offsetof(BrickEditorWidget_UpdateSelection, bAnythingSelected) == 0x000018, "Member 'BrickEditorWidget_UpdateSelection::bAnythingSelected' has a wrong offset!");

// Function BrickRigs.HUDContainerWidget.AddGameOverlayWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDContainerWidget_AddGameOverlayWidget final
{
public:
	class UGameOverlayWidget*                     Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContainerWidget_AddGameOverlayWidget) == 0x000008, "Wrong alignment on HUDContainerWidget_AddGameOverlayWidget");
static_assert(sizeof(HUDContainerWidget_AddGameOverlayWidget) == 0x000008, "Wrong size on HUDContainerWidget_AddGameOverlayWidget");
static_assert(offsetof(HUDContainerWidget_AddGameOverlayWidget, Widget) == 0x000000, "Member 'HUDContainerWidget_AddGameOverlayWidget::Widget' has a wrong offset!");

// Function BrickRigs.HUDContainerWidget.AddHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDContainerWidget_AddHUDWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContainerWidget_AddHUDWidget) == 0x000008, "Wrong alignment on HUDContainerWidget_AddHUDWidget");
static_assert(sizeof(HUDContainerWidget_AddHUDWidget) == 0x000008, "Wrong size on HUDContainerWidget_AddHUDWidget");
static_assert(offsetof(HUDContainerWidget_AddHUDWidget, Widget) == 0x000000, "Member 'HUDContainerWidget_AddHUDWidget::Widget' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickGameInstance_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickGameInstance*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameInstance_Get) == 0x000008, "Wrong alignment on BrickGameInstance_Get");
static_assert(sizeof(BrickGameInstance_Get) == 0x000010, "Wrong size on BrickGameInstance_Get");
static_assert(offsetof(BrickGameInstance_Get, WorldContextObject) == 0x000000, "Member 'BrickGameInstance_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_Get, ReturnValue) == 0x000008, "Member 'BrickGameInstance_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.ClosePopup
// 0x0008 (0x0008 - 0x0000)
struct BrickGameInstance_ClosePopup final
{
public:
	struct FPopupHandle                           Handle;                                            // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPopupResult                                  Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameInstance_ClosePopup) == 0x000004, "Wrong alignment on BrickGameInstance_ClosePopup");
static_assert(sizeof(BrickGameInstance_ClosePopup) == 0x000008, "Wrong size on BrickGameInstance_ClosePopup");
static_assert(offsetof(BrickGameInstance_ClosePopup, Handle) == 0x000000, "Member 'BrickGameInstance_ClosePopup::Handle' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_ClosePopup, Result) == 0x000004, "Member 'BrickGameInstance_ClosePopup::Result' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_ClosePopup, ReturnValue) == 0x000005, "Member 'BrickGameInstance_ClosePopup::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.CreatePopupParams
// 0x0010 (0x0010 - 0x0000)
struct BrickGameInstance_CreatePopupParams final
{
public:
	TSubclassOf<class UPopupParams>               ParamsClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPopupParams*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameInstance_CreatePopupParams) == 0x000008, "Wrong alignment on BrickGameInstance_CreatePopupParams");
static_assert(sizeof(BrickGameInstance_CreatePopupParams) == 0x000010, "Wrong size on BrickGameInstance_CreatePopupParams");
static_assert(offsetof(BrickGameInstance_CreatePopupParams, ParamsClass) == 0x000000, "Member 'BrickGameInstance_CreatePopupParams::ParamsClass' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_CreatePopupParams, ReturnValue) == 0x000008, "Member 'BrickGameInstance_CreatePopupParams::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.OpenMainMenu
// 0x0001 (0x0001 - 0x0000)
struct BrickGameInstance_OpenMainMenu final
{
public:
	bool                                          bForceExit;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameInstance_OpenMainMenu) == 0x000001, "Wrong alignment on BrickGameInstance_OpenMainMenu");
static_assert(sizeof(BrickGameInstance_OpenMainMenu) == 0x000001, "Wrong size on BrickGameInstance_OpenMainMenu");
static_assert(offsetof(BrickGameInstance_OpenMainMenu, bForceExit) == 0x000000, "Member 'BrickGameInstance_OpenMainMenu::bForceExit' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.OpenMessagePopup
// 0x0038 (0x0038 - 0x0000)
struct BrickGameInstance_OpenMessagePopup final
{
public:
	struct FPopupHandle                           Handle;                                            // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bCanCancel;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPopupResult Result)>          ClosedDelegate;                                    // 0x0024(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameInstance_OpenMessagePopup) == 0x000008, "Wrong alignment on BrickGameInstance_OpenMessagePopup");
static_assert(sizeof(BrickGameInstance_OpenMessagePopup) == 0x000038, "Wrong size on BrickGameInstance_OpenMessagePopup");
static_assert(offsetof(BrickGameInstance_OpenMessagePopup, Handle) == 0x000000, "Member 'BrickGameInstance_OpenMessagePopup::Handle' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenMessagePopup, Message) == 0x000008, "Member 'BrickGameInstance_OpenMessagePopup::Message' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenMessagePopup, bCanCancel) == 0x000020, "Member 'BrickGameInstance_OpenMessagePopup::bCanCancel' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenMessagePopup, ClosedDelegate) == 0x000024, "Member 'BrickGameInstance_OpenMessagePopup::ClosedDelegate' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenMessagePopup, ReturnValue) == 0x000034, "Member 'BrickGameInstance_OpenMessagePopup::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.OpenPopup
// 0x0018 (0x0018 - 0x0000)
struct BrickGameInstance_OpenPopup final
{
public:
	struct FPopupHandle                           Handle;                                            // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPopupParams*                           PopupParams;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggleOpen;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameInstance_OpenPopup) == 0x000008, "Wrong alignment on BrickGameInstance_OpenPopup");
static_assert(sizeof(BrickGameInstance_OpenPopup) == 0x000018, "Wrong size on BrickGameInstance_OpenPopup");
static_assert(offsetof(BrickGameInstance_OpenPopup, Handle) == 0x000000, "Member 'BrickGameInstance_OpenPopup::Handle' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenPopup, PopupParams) == 0x000008, "Member 'BrickGameInstance_OpenPopup::PopupParams' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenPopup, bToggleOpen) == 0x000010, "Member 'BrickGameInstance_OpenPopup::bToggleOpen' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_OpenPopup, ReturnValue) == 0x000011, "Member 'BrickGameInstance_OpenPopup::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.QuitGame
// 0x0001 (0x0001 - 0x0000)
struct BrickGameInstance_QuitGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameInstance_QuitGame) == 0x000001, "Wrong alignment on BrickGameInstance_QuitGame");
static_assert(sizeof(BrickGameInstance_QuitGame) == 0x000001, "Wrong size on BrickGameInstance_QuitGame");
static_assert(offsetof(BrickGameInstance_QuitGame, ReturnValue) == 0x000000, "Member 'BrickGameInstance_QuitGame::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameInstance.IsPopupOpen
// 0x0008 (0x0008 - 0x0000)
struct BrickGameInstance_IsPopupOpen final
{
public:
	struct FPopupHandle                           Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameInstance_IsPopupOpen) == 0x000004, "Wrong alignment on BrickGameInstance_IsPopupOpen");
static_assert(sizeof(BrickGameInstance_IsPopupOpen) == 0x000008, "Wrong size on BrickGameInstance_IsPopupOpen");
static_assert(offsetof(BrickGameInstance_IsPopupOpen, Handle) == 0x000000, "Member 'BrickGameInstance_IsPopupOpen::Handle' has a wrong offset!");
static_assert(offsetof(BrickGameInstance_IsPopupOpen, ReturnValue) == 0x000004, "Member 'BrickGameInstance_IsPopupOpen::ReturnValue' has a wrong offset!");

// Function BrickRigs.CurrentItemWidget.FadeOut
// 0x0001 (0x0001 - 0x0000)
struct CurrentItemWidget_FadeOut final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrentItemWidget_FadeOut) == 0x000001, "Wrong alignment on CurrentItemWidget_FadeOut");
static_assert(sizeof(CurrentItemWidget_FadeOut) == 0x000001, "Wrong size on CurrentItemWidget_FadeOut");
static_assert(offsetof(CurrentItemWidget_FadeOut, bImmediate) == 0x000000, "Member 'CurrentItemWidget_FadeOut::bImmediate' has a wrong offset!");

// Function BrickRigs.CurrentItemWidget.UpdateAmmo
// 0x000C (0x000C - 0x0000)
struct CurrentItemWidget_UpdateAmmo final
{
public:
	int32                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Capacity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrentItemWidget_UpdateAmmo) == 0x000004, "Wrong alignment on CurrentItemWidget_UpdateAmmo");
static_assert(sizeof(CurrentItemWidget_UpdateAmmo) == 0x00000C, "Wrong size on CurrentItemWidget_UpdateAmmo");
static_assert(offsetof(CurrentItemWidget_UpdateAmmo, Current) == 0x000000, "Member 'CurrentItemWidget_UpdateAmmo::Current' has a wrong offset!");
static_assert(offsetof(CurrentItemWidget_UpdateAmmo, Capacity) == 0x000004, "Member 'CurrentItemWidget_UpdateAmmo::Capacity' has a wrong offset!");
static_assert(offsetof(CurrentItemWidget_UpdateAmmo, Ammo) == 0x000008, "Member 'CurrentItemWidget_UpdateAmmo::Ammo' has a wrong offset!");

// Function BrickRigs.CurrentItemWidget.UpdateAmmoType
// 0x0001 (0x0001 - 0x0000)
struct CurrentItemWidget_UpdateAmmoType final
{
public:
	EAmmoType                                     NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrentItemWidget_UpdateAmmoType) == 0x000001, "Wrong alignment on CurrentItemWidget_UpdateAmmoType");
static_assert(sizeof(CurrentItemWidget_UpdateAmmoType) == 0x000001, "Wrong size on CurrentItemWidget_UpdateAmmoType");
static_assert(offsetof(CurrentItemWidget_UpdateAmmoType, NewType) == 0x000000, "Member 'CurrentItemWidget_UpdateAmmoType::NewType' has a wrong offset!");

// Function BrickRigs.CurrentItemWidget.UpdateFireMode
// 0x0002 (0x0002 - 0x0000)
struct CurrentItemWidget_UpdateFireMode final
{
public:
	EFireMode                                     NewMode;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFirearm;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrentItemWidget_UpdateFireMode) == 0x000001, "Wrong alignment on CurrentItemWidget_UpdateFireMode");
static_assert(sizeof(CurrentItemWidget_UpdateFireMode) == 0x000002, "Wrong size on CurrentItemWidget_UpdateFireMode");
static_assert(offsetof(CurrentItemWidget_UpdateFireMode, NewMode) == 0x000000, "Member 'CurrentItemWidget_UpdateFireMode::NewMode' has a wrong offset!");
static_assert(offsetof(CurrentItemWidget_UpdateFireMode, bHasFirearm) == 0x000001, "Member 'CurrentItemWidget_UpdateFireMode::bHasFirearm' has a wrong offset!");

// Function BrickRigs.CurrentItemWidget.UpdateItemName
// 0x0018 (0x0018 - 0x0000)
struct CurrentItemWidget_UpdateItemName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrentItemWidget_UpdateItemName) == 0x000008, "Wrong alignment on CurrentItemWidget_UpdateItemName");
static_assert(sizeof(CurrentItemWidget_UpdateItemName) == 0x000018, "Wrong size on CurrentItemWidget_UpdateItemName");
static_assert(offsetof(CurrentItemWidget_UpdateItemName, NewName) == 0x000000, "Member 'CurrentItemWidget_UpdateItemName::NewName' has a wrong offset!");

// Function BrickRigs.BrickGameSession.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickGameSession_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickGameSession*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameSession_Get) == 0x000008, "Wrong alignment on BrickGameSession_Get");
static_assert(sizeof(BrickGameSession_Get) == 0x000010, "Wrong size on BrickGameSession_Get");
static_assert(offsetof(BrickGameSession_Get, WorldContextObject) == 0x000000, "Member 'BrickGameSession_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickGameSession_Get, ReturnValue) == 0x000008, "Member 'BrickGameSession_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickGameState_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickGameState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_Get) == 0x000008, "Wrong alignment on BrickGameState_Get");
static_assert(sizeof(BrickGameState_Get) == 0x000010, "Wrong size on BrickGameState_Get");
static_assert(offsetof(BrickGameState_Get, WorldContextObject) == 0x000000, "Member 'BrickGameState_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickGameState_Get, ReturnValue) == 0x000008, "Member 'BrickGameState_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.SetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct BrickGameState_SetCurrentRound final
{
public:
	int32                                         NewRound;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_SetCurrentRound) == 0x000004, "Wrong alignment on BrickGameState_SetCurrentRound");
static_assert(sizeof(BrickGameState_SetCurrentRound) == 0x000004, "Wrong size on BrickGameState_SetCurrentRound");
static_assert(offsetof(BrickGameState_SetCurrentRound, NewRound) == 0x000000, "Member 'BrickGameState_SetCurrentRound::NewRound' has a wrong offset!");

// Function BrickRigs.BrickGameState.SetMatchSettings
// 0x00C8 (0x00C8 - 0x0000)
struct BrickGameState_SetMatchSettings final
{
public:
	struct FMatchSettings                         NewSettings;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_SetMatchSettings) == 0x000008, "Wrong alignment on BrickGameState_SetMatchSettings");
static_assert(sizeof(BrickGameState_SetMatchSettings) == 0x0000C8, "Wrong size on BrickGameState_SetMatchSettings");
static_assert(offsetof(BrickGameState_SetMatchSettings, NewSettings) == 0x000000, "Member 'BrickGameState_SetMatchSettings::NewSettings' has a wrong offset!");

// Function BrickRigs.BrickGameState.SetMatchWinner
// 0x0001 (0x0001 - 0x0000)
struct BrickGameState_SetMatchWinner final
{
public:
	struct FMatchWinner                           InWinner;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_SetMatchWinner) == 0x000001, "Wrong alignment on BrickGameState_SetMatchWinner");
static_assert(sizeof(BrickGameState_SetMatchWinner) == 0x000001, "Wrong size on BrickGameState_SetMatchWinner");
static_assert(offsetof(BrickGameState_SetMatchWinner, InWinner) == 0x000000, "Member 'BrickGameState_SetMatchWinner::InWinner' has a wrong offset!");

// Function BrickRigs.BrickGameState.SetNextMatchSettings
// 0x00C8 (0x00C8 - 0x0000)
struct BrickGameState_SetNextMatchSettings final
{
public:
	struct FMatchSettings                         NewSettings;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_SetNextMatchSettings) == 0x000008, "Wrong alignment on BrickGameState_SetNextMatchSettings");
static_assert(sizeof(BrickGameState_SetNextMatchSettings) == 0x0000C8, "Wrong size on BrickGameState_SetNextMatchSettings");
static_assert(offsetof(BrickGameState_SetNextMatchSettings, NewSettings) == 0x000000, "Member 'BrickGameState_SetNextMatchSettings::NewSettings' has a wrong offset!");

// Function BrickRigs.BrickGameState.CanPlayerJoinTeam
// 0x0010 (0x0010 - 0x0000)
struct BrickGameState_CanPlayerJoinTeam final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamID;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickGameState_CanPlayerJoinTeam) == 0x000008, "Wrong alignment on BrickGameState_CanPlayerJoinTeam");
static_assert(sizeof(BrickGameState_CanPlayerJoinTeam) == 0x000010, "Wrong size on BrickGameState_CanPlayerJoinTeam");
static_assert(offsetof(BrickGameState_CanPlayerJoinTeam, PC) == 0x000000, "Member 'BrickGameState_CanPlayerJoinTeam::PC' has a wrong offset!");
static_assert(offsetof(BrickGameState_CanPlayerJoinTeam, TeamID) == 0x000008, "Member 'BrickGameState_CanPlayerJoinTeam::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameState_CanPlayerJoinTeam, ReturnValue) == 0x000009, "Member 'BrickGameState_CanPlayerJoinTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.DoesTeamExist
// 0x0002 (0x0002 - 0x0000)
struct BrickGameState_DoesTeamExist final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_DoesTeamExist) == 0x000001, "Wrong alignment on BrickGameState_DoesTeamExist");
static_assert(sizeof(BrickGameState_DoesTeamExist) == 0x000002, "Wrong size on BrickGameState_DoesTeamExist");
static_assert(offsetof(BrickGameState_DoesTeamExist, TeamID) == 0x000000, "Member 'BrickGameState_DoesTeamExist::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameState_DoesTeamExist, ReturnValue) == 0x000001, "Member 'BrickGameState_DoesTeamExist::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.FindTeam
// 0x0010 (0x0010 - 0x0000)
struct BrickGameState_FindTeam final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickTeam*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_FindTeam) == 0x000008, "Wrong alignment on BrickGameState_FindTeam");
static_assert(sizeof(BrickGameState_FindTeam) == 0x000010, "Wrong size on BrickGameState_FindTeam");
static_assert(offsetof(BrickGameState_FindTeam, TeamID) == 0x000000, "Member 'BrickGameState_FindTeam::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameState_FindTeam, ReturnValue) == 0x000008, "Member 'BrickGameState_FindTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct BrickGameState_GetCurrentRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetCurrentRound) == 0x000004, "Wrong alignment on BrickGameState_GetCurrentRound");
static_assert(sizeof(BrickGameState_GetCurrentRound) == 0x000004, "Wrong size on BrickGameState_GetCurrentRound");
static_assert(offsetof(BrickGameState_GetCurrentRound, ReturnValue) == 0x000000, "Member 'BrickGameState_GetCurrentRound::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetDefaultTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameState_GetDefaultTeam final
{
public:
	class UBrickTeam*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetDefaultTeam) == 0x000008, "Wrong alignment on BrickGameState_GetDefaultTeam");
static_assert(sizeof(BrickGameState_GetDefaultTeam) == 0x000008, "Wrong size on BrickGameState_GetDefaultTeam");
static_assert(offsetof(BrickGameState_GetDefaultTeam, ReturnValue) == 0x000000, "Member 'BrickGameState_GetDefaultTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetDummyTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameState_GetDummyTeam final
{
public:
	class UBrickTeam*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetDummyTeam) == 0x000008, "Wrong alignment on BrickGameState_GetDummyTeam");
static_assert(sizeof(BrickGameState_GetDummyTeam) == 0x000008, "Wrong size on BrickGameState_GetDummyTeam");
static_assert(offsetof(BrickGameState_GetDummyTeam, ReturnValue) == 0x000000, "Member 'BrickGameState_GetDummyTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetMatchRandomSeed
// 0x0001 (0x0001 - 0x0000)
struct BrickGameState_GetMatchRandomSeed final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetMatchRandomSeed) == 0x000001, "Wrong alignment on BrickGameState_GetMatchRandomSeed");
static_assert(sizeof(BrickGameState_GetMatchRandomSeed) == 0x000001, "Wrong size on BrickGameState_GetMatchRandomSeed");
static_assert(offsetof(BrickGameState_GetMatchRandomSeed, ReturnValue) == 0x000000, "Member 'BrickGameState_GetMatchRandomSeed::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetMatchSettings
// 0x00C8 (0x00C8 - 0x0000)
struct BrickGameState_GetMatchSettings final
{
public:
	struct FMatchSettings                         ReturnValue;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetMatchSettings) == 0x000008, "Wrong alignment on BrickGameState_GetMatchSettings");
static_assert(sizeof(BrickGameState_GetMatchSettings) == 0x0000C8, "Wrong size on BrickGameState_GetMatchSettings");
static_assert(offsetof(BrickGameState_GetMatchSettings, ReturnValue) == 0x000000, "Member 'BrickGameState_GetMatchSettings::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetMatchTimerRate
// 0x0004 (0x0004 - 0x0000)
struct BrickGameState_GetMatchTimerRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetMatchTimerRate) == 0x000004, "Wrong alignment on BrickGameState_GetMatchTimerRate");
static_assert(sizeof(BrickGameState_GetMatchTimerRate) == 0x000004, "Wrong size on BrickGameState_GetMatchTimerRate");
static_assert(offsetof(BrickGameState_GetMatchTimerRate, ReturnValue) == 0x000000, "Member 'BrickGameState_GetMatchTimerRate::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetMatchTimerRemaining
// 0x0004 (0x0004 - 0x0000)
struct BrickGameState_GetMatchTimerRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetMatchTimerRemaining) == 0x000004, "Wrong alignment on BrickGameState_GetMatchTimerRemaining");
static_assert(sizeof(BrickGameState_GetMatchTimerRemaining) == 0x000004, "Wrong size on BrickGameState_GetMatchTimerRemaining");
static_assert(offsetof(BrickGameState_GetMatchTimerRemaining, ReturnValue) == 0x000000, "Member 'BrickGameState_GetMatchTimerRemaining::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetMatchWinner
// 0x0001 (0x0001 - 0x0000)
struct BrickGameState_GetMatchWinner final
{
public:
	struct FMatchWinner                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetMatchWinner) == 0x000001, "Wrong alignment on BrickGameState_GetMatchWinner");
static_assert(sizeof(BrickGameState_GetMatchWinner) == 0x000001, "Wrong size on BrickGameState_GetMatchWinner");
static_assert(offsetof(BrickGameState_GetMatchWinner, ReturnValue) == 0x000000, "Member 'BrickGameState_GetMatchWinner::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetMaxPlayersInTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameState_GetMaxPlayersInTeam final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetMaxPlayersInTeam) == 0x000004, "Wrong alignment on BrickGameState_GetMaxPlayersInTeam");
static_assert(sizeof(BrickGameState_GetMaxPlayersInTeam) == 0x000008, "Wrong size on BrickGameState_GetMaxPlayersInTeam");
static_assert(offsetof(BrickGameState_GetMaxPlayersInTeam, TeamID) == 0x000000, "Member 'BrickGameState_GetMaxPlayersInTeam::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameState_GetMaxPlayersInTeam, ReturnValue) == 0x000004, "Member 'BrickGameState_GetMaxPlayersInTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetNextMatchSettings
// 0x00C8 (0x00C8 - 0x0000)
struct BrickGameState_GetNextMatchSettings final
{
public:
	struct FMatchSettings                         ReturnValue;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetNextMatchSettings) == 0x000008, "Wrong alignment on BrickGameState_GetNextMatchSettings");
static_assert(sizeof(BrickGameState_GetNextMatchSettings) == 0x0000C8, "Wrong size on BrickGameState_GetNextMatchSettings");
static_assert(offsetof(BrickGameState_GetNextMatchSettings, ReturnValue) == 0x000000, "Member 'BrickGameState_GetNextMatchSettings::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetNumFreeSlotsInTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameState_GetNumFreeSlotsInTeam final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetNumFreeSlotsInTeam) == 0x000004, "Wrong alignment on BrickGameState_GetNumFreeSlotsInTeam");
static_assert(sizeof(BrickGameState_GetNumFreeSlotsInTeam) == 0x000008, "Wrong size on BrickGameState_GetNumFreeSlotsInTeam");
static_assert(offsetof(BrickGameState_GetNumFreeSlotsInTeam, TeamID) == 0x000000, "Member 'BrickGameState_GetNumFreeSlotsInTeam::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameState_GetNumFreeSlotsInTeam, ReturnValue) == 0x000004, "Member 'BrickGameState_GetNumFreeSlotsInTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetNumPlayersInTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameState_GetNumPlayersInTeam final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetNumPlayersInTeam) == 0x000004, "Wrong alignment on BrickGameState_GetNumPlayersInTeam");
static_assert(sizeof(BrickGameState_GetNumPlayersInTeam) == 0x000008, "Wrong size on BrickGameState_GetNumPlayersInTeam");
static_assert(offsetof(BrickGameState_GetNumPlayersInTeam, TeamID) == 0x000000, "Member 'BrickGameState_GetNumPlayersInTeam::TeamID' has a wrong offset!");
static_assert(offsetof(BrickGameState_GetNumPlayersInTeam, ReturnValue) == 0x000004, "Member 'BrickGameState_GetNumPlayersInTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetNumPlayersToStartWarmup
// 0x0004 (0x0004 - 0x0000)
struct BrickGameState_GetNumPlayersToStartWarmup final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetNumPlayersToStartWarmup) == 0x000004, "Wrong alignment on BrickGameState_GetNumPlayersToStartWarmup");
static_assert(sizeof(BrickGameState_GetNumPlayersToStartWarmup) == 0x000004, "Wrong size on BrickGameState_GetNumPlayersToStartWarmup");
static_assert(offsetof(BrickGameState_GetNumPlayersToStartWarmup, ReturnValue) == 0x000000, "Member 'BrickGameState_GetNumPlayersToStartWarmup::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetTeams
// 0x0010 (0x0010 - 0x0000)
struct BrickGameState_GetTeams final
{
public:
	TArray<class UBrickTeam*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetTeams) == 0x000008, "Wrong alignment on BrickGameState_GetTeams");
static_assert(sizeof(BrickGameState_GetTeams) == 0x000010, "Wrong size on BrickGameState_GetTeams");
static_assert(offsetof(BrickGameState_GetTeams, ReturnValue) == 0x000000, "Member 'BrickGameState_GetTeams::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetVehiclePrice
// 0x001C (0x001C - 0x0000)
struct BrickGameState_GetVehiclePrice final
{
public:
	struct FVehicleSpawnProperties                Props;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetVehiclePrice) == 0x000004, "Wrong alignment on BrickGameState_GetVehiclePrice");
static_assert(sizeof(BrickGameState_GetVehiclePrice) == 0x00001C, "Wrong size on BrickGameState_GetVehiclePrice");
static_assert(offsetof(BrickGameState_GetVehiclePrice, Props) == 0x000000, "Member 'BrickGameState_GetVehiclePrice::Props' has a wrong offset!");
static_assert(offsetof(BrickGameState_GetVehiclePrice, ReturnValue) == 0x000018, "Member 'BrickGameState_GetVehiclePrice::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGameState.GetZombieTeam
// 0x0008 (0x0008 - 0x0000)
struct BrickGameState_GetZombieTeam final
{
public:
	class UBrickTeam*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGameState_GetZombieTeam) == 0x000008, "Wrong alignment on BrickGameState_GetZombieTeam");
static_assert(sizeof(BrickGameState_GetZombieTeam) == 0x000008, "Wrong size on BrickGameState_GetZombieTeam");
static_assert(offsetof(BrickGameState_GetZombieTeam, ReturnValue) == 0x000000, "Member 'BrickGameState_GetZombieTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickGridPanel.SetDefaultColumnFill
// 0x0004 (0x0004 - 0x0000)
struct BrickGridPanel_SetDefaultColumnFill final
{
public:
	float                                         Coefficient;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridPanel_SetDefaultColumnFill) == 0x000004, "Wrong alignment on BrickGridPanel_SetDefaultColumnFill");
static_assert(sizeof(BrickGridPanel_SetDefaultColumnFill) == 0x000004, "Wrong size on BrickGridPanel_SetDefaultColumnFill");
static_assert(offsetof(BrickGridPanel_SetDefaultColumnFill, Coefficient) == 0x000000, "Member 'BrickGridPanel_SetDefaultColumnFill::Coefficient' has a wrong offset!");

// Function BrickRigs.BrickGridPanel.SetDefaultRowFill
// 0x0004 (0x0004 - 0x0000)
struct BrickGridPanel_SetDefaultRowFill final
{
public:
	float                                         Coefficient;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridPanel_SetDefaultRowFill) == 0x000004, "Wrong alignment on BrickGridPanel_SetDefaultRowFill");
static_assert(sizeof(BrickGridPanel_SetDefaultRowFill) == 0x000004, "Wrong size on BrickGridPanel_SetDefaultRowFill");
static_assert(offsetof(BrickGridPanel_SetDefaultRowFill, Coefficient) == 0x000000, "Member 'BrickGridPanel_SetDefaultRowFill::Coefficient' has a wrong offset!");

// Function BrickRigs.BrickGridPanel.SetSlotSpacingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickGridPanel_SetSlotSpacingStyle final
{
public:
	EBrickUISpacingStyle                          NewStyle;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickGridPanel_SetSlotSpacingStyle) == 0x000001, "Wrong alignment on BrickGridPanel_SetSlotSpacingStyle");
static_assert(sizeof(BrickGridPanel_SetSlotSpacingStyle) == 0x000001, "Wrong size on BrickGridPanel_SetSlotSpacingStyle");
static_assert(offsetof(BrickGridPanel_SetSlotSpacingStyle, NewStyle) == 0x000000, "Member 'BrickGridPanel_SetSlotSpacingStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickHorizontalBox.SetSlotSpacingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickHorizontalBox_SetSlotSpacingStyle final
{
public:
	EBrickUISpacingStyle                          NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickHorizontalBox_SetSlotSpacingStyle) == 0x000001, "Wrong alignment on BrickHorizontalBox_SetSlotSpacingStyle");
static_assert(sizeof(BrickHorizontalBox_SetSlotSpacingStyle) == 0x000001, "Wrong size on BrickHorizontalBox_SetSlotSpacingStyle");
static_assert(offsetof(BrickHorizontalBox_SetSlotSpacingStyle, NewStyle) == 0x000000, "Member 'BrickHorizontalBox_SetSlotSpacingStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickImage.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickImage_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_SetColorStyle) == 0x000001, "Wrong alignment on BrickImage_SetColorStyle");
static_assert(sizeof(BrickImage_SetColorStyle) == 0x000001, "Wrong size on BrickImage_SetColorStyle");
static_assert(offsetof(BrickImage_SetColorStyle, NewStyle) == 0x000000, "Member 'BrickImage_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickImage.SetIconAtlas
// 0x0001 (0x0001 - 0x0000)
struct BrickImage_SetIconAtlas final
{
public:
	EBrickUIIconAtlas                             NewAtlas;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_SetIconAtlas) == 0x000001, "Wrong alignment on BrickImage_SetIconAtlas");
static_assert(sizeof(BrickImage_SetIconAtlas) == 0x000001, "Wrong size on BrickImage_SetIconAtlas");
static_assert(offsetof(BrickImage_SetIconAtlas, NewAtlas) == 0x000000, "Member 'BrickImage_SetIconAtlas::NewAtlas' has a wrong offset!");

// Function BrickRigs.BrickImage.SetIconAtlasAndSlot
// 0x000C (0x000C - 0x0000)
struct BrickImage_SetIconAtlasAndSlot final
{
public:
	EBrickUIIconAtlas                             NewAtlas;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickUIIconSlot                       NewSlot;                                           // 0x0004(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_SetIconAtlasAndSlot) == 0x000004, "Wrong alignment on BrickImage_SetIconAtlasAndSlot");
static_assert(sizeof(BrickImage_SetIconAtlasAndSlot) == 0x00000C, "Wrong size on BrickImage_SetIconAtlasAndSlot");
static_assert(offsetof(BrickImage_SetIconAtlasAndSlot, NewAtlas) == 0x000000, "Member 'BrickImage_SetIconAtlasAndSlot::NewAtlas' has a wrong offset!");
static_assert(offsetof(BrickImage_SetIconAtlasAndSlot, NewSlot) == 0x000004, "Member 'BrickImage_SetIconAtlasAndSlot::NewSlot' has a wrong offset!");

// Function BrickRigs.BrickImage.SetIconSlot
// 0x0008 (0x0008 - 0x0000)
struct BrickImage_SetIconSlot final
{
public:
	struct FBrickUIIconSlot                       NewSlot;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_SetIconSlot) == 0x000004, "Wrong alignment on BrickImage_SetIconSlot");
static_assert(sizeof(BrickImage_SetIconSlot) == 0x000008, "Wrong size on BrickImage_SetIconSlot");
static_assert(offsetof(BrickImage_SetIconSlot, NewSlot) == 0x000000, "Member 'BrickImage_SetIconSlot::NewSlot' has a wrong offset!");

// Function BrickRigs.BrickImage.SetIsThrobber
// 0x0001 (0x0001 - 0x0000)
struct BrickImage_SetIsThrobber final
{
public:
	bool                                          bNewIsThrobber;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_SetIsThrobber) == 0x000001, "Wrong alignment on BrickImage_SetIsThrobber");
static_assert(sizeof(BrickImage_SetIsThrobber) == 0x000001, "Wrong size on BrickImage_SetIsThrobber");
static_assert(offsetof(BrickImage_SetIsThrobber, bNewIsThrobber) == 0x000000, "Member 'BrickImage_SetIsThrobber::bNewIsThrobber' has a wrong offset!");

// Function BrickRigs.BrickImage.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct BrickImage_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_SetStyleState) == 0x000001, "Wrong alignment on BrickImage_SetStyleState");
static_assert(sizeof(BrickImage_SetStyleState) == 0x000001, "Wrong size on BrickImage_SetStyleState");
static_assert(offsetof(BrickImage_SetStyleState, NewState) == 0x000000, "Member 'BrickImage_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.BrickImage.IsLoadingImage
// 0x0001 (0x0001 - 0x0000)
struct BrickImage_IsLoadingImage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickImage_IsLoadingImage) == 0x000001, "Wrong alignment on BrickImage_IsLoadingImage");
static_assert(sizeof(BrickImage_IsLoadingImage) == 0x000001, "Wrong size on BrickImage_IsLoadingImage");
static_assert(offsetof(BrickImage_IsLoadingImage, ReturnValue) == 0x000000, "Member 'BrickImage_IsLoadingImage::ReturnValue' has a wrong offset!");

// Function BrickRigs.DragStrip.CreateTreeMID
// 0x0008 (0x0008 - 0x0000)
struct DragStrip_CreateTreeMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragStrip_CreateTreeMID) == 0x000008, "Wrong alignment on DragStrip_CreateTreeMID");
static_assert(sizeof(DragStrip_CreateTreeMID) == 0x000008, "Wrong size on DragStrip_CreateTreeMID");
static_assert(offsetof(DragStrip_CreateTreeMID, ReturnValue) == 0x000000, "Member 'DragStrip_CreateTreeMID::ReturnValue' has a wrong offset!");

// Function BrickRigs.DragStrip.Interact_StartRace
// 0x0008 (0x0008 - 0x0000)
struct DragStrip_Interact_StartRace final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragStrip_Interact_StartRace) == 0x000008, "Wrong alignment on DragStrip_Interact_StartRace");
static_assert(sizeof(DragStrip_Interact_StartRace) == 0x000008, "Wrong size on DragStrip_Interact_StartRace");
static_assert(offsetof(DragStrip_Interact_StartRace, PC) == 0x000000, "Member 'DragStrip_Interact_StartRace::PC' has a wrong offset!");

// Function BrickRigs.DragStrip.GetInteractionLocation
// 0x000C (0x000C - 0x0000)
struct DragStrip_GetInteractionLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragStrip_GetInteractionLocation) == 0x000004, "Wrong alignment on DragStrip_GetInteractionLocation");
static_assert(sizeof(DragStrip_GetInteractionLocation) == 0x00000C, "Wrong size on DragStrip_GetInteractionLocation");
static_assert(offsetof(DragStrip_GetInteractionLocation, ReturnValue) == 0x000000, "Member 'DragStrip_GetInteractionLocation::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickObjectPool.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickObjectPool_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrickObjectPool*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickObjectPool_Get) == 0x000008, "Wrong alignment on BrickObjectPool_Get");
static_assert(sizeof(BrickObjectPool_Get) == 0x000010, "Wrong size on BrickObjectPool_Get");
static_assert(offsetof(BrickObjectPool_Get, WorldContextObject) == 0x000000, "Member 'BrickObjectPool_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_Get, ReturnValue) == 0x000008, "Member 'BrickObjectPool_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickObjectPool.GetWidget
// 0x0018 (0x0018 - 0x0000)
struct BrickObjectPool_GetWidget final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickObjectPool_GetWidget) == 0x000008, "Wrong alignment on BrickObjectPool_GetWidget");
static_assert(sizeof(BrickObjectPool_GetWidget) == 0x000018, "Wrong size on BrickObjectPool_GetWidget");
static_assert(offsetof(BrickObjectPool_GetWidget, WorldContextObject) == 0x000000, "Member 'BrickObjectPool_GetWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_GetWidget, WidgetClass) == 0x000008, "Member 'BrickObjectPool_GetWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_GetWidget, ReturnValue) == 0x000010, "Member 'BrickObjectPool_GetWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickObjectPool.PoolWidget
// 0x0008 (0x0008 - 0x0000)
struct BrickObjectPool_PoolWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickObjectPool_PoolWidget) == 0x000008, "Wrong alignment on BrickObjectPool_PoolWidget");
static_assert(sizeof(BrickObjectPool_PoolWidget) == 0x000008, "Wrong size on BrickObjectPool_PoolWidget");
static_assert(offsetof(BrickObjectPool_PoolWidget, Widget) == 0x000000, "Member 'BrickObjectPool_PoolWidget::Widget' has a wrong offset!");

// Function BrickRigs.BrickObjectPool.PoolWidgets
// 0x0018 (0x0018 - 0x0000)
struct BrickObjectPool_PoolWidgets final
{
public:
	TArray<class UUserWidget*>                    Widgets;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         NumToKeep;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickObjectPool_PoolWidgets) == 0x000008, "Wrong alignment on BrickObjectPool_PoolWidgets");
static_assert(sizeof(BrickObjectPool_PoolWidgets) == 0x000018, "Wrong size on BrickObjectPool_PoolWidgets");
static_assert(offsetof(BrickObjectPool_PoolWidgets, Widgets) == 0x000000, "Member 'BrickObjectPool_PoolWidgets::Widgets' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_PoolWidgets, NumToKeep) == 0x000010, "Member 'BrickObjectPool_PoolWidgets::NumToKeep' has a wrong offset!");

// Function BrickRigs.BrickObjectPool.RecycleWidget
// 0x0030 (0x0030 - 0x0000)
struct BrickObjectPool_RecycleWidget final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    Widgets;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutRecycled;                                      // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickObjectPool_RecycleWidget) == 0x000008, "Wrong alignment on BrickObjectPool_RecycleWidget");
static_assert(sizeof(BrickObjectPool_RecycleWidget) == 0x000030, "Wrong size on BrickObjectPool_RecycleWidget");
static_assert(offsetof(BrickObjectPool_RecycleWidget, WorldContextObject) == 0x000000, "Member 'BrickObjectPool_RecycleWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_RecycleWidget, Widgets) == 0x000008, "Member 'BrickObjectPool_RecycleWidget::Widgets' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_RecycleWidget, WidgetClass) == 0x000018, "Member 'BrickObjectPool_RecycleWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_RecycleWidget, Index_0) == 0x000020, "Member 'BrickObjectPool_RecycleWidget::Index_0' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_RecycleWidget, bOutRecycled) == 0x000024, "Member 'BrickObjectPool_RecycleWidget::bOutRecycled' has a wrong offset!");
static_assert(offsetof(BrickObjectPool_RecycleWidget, ReturnValue) == 0x000028, "Member 'BrickObjectPool_RecycleWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.DetonatorBrick.Interact_Detonate
// 0x0008 (0x0008 - 0x0000)
struct DetonatorBrick_Interact_Detonate final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetonatorBrick_Interact_Detonate) == 0x000008, "Wrong alignment on DetonatorBrick_Interact_Detonate");
static_assert(sizeof(DetonatorBrick_Interact_Detonate) == 0x000008, "Wrong size on DetonatorBrick_Interact_Detonate");
static_assert(offsetof(DetonatorBrick_Interact_Detonate, PC) == 0x000000, "Member 'DetonatorBrick_Interact_Detonate::PC' has a wrong offset!");

// Function BrickRigs.ConnectorSpacingPropertyWidget.SetConnectorSpacing
// 0x0002 (0x0002 - 0x0000)
struct ConnectorSpacingPropertyWidget_SetConnectorSpacing final
{
public:
	struct FScalableBrickConnectorSpacing         NewSpacing;                                        // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConnectorSpacingPropertyWidget_SetConnectorSpacing) == 0x000002, "Wrong alignment on ConnectorSpacingPropertyWidget_SetConnectorSpacing");
static_assert(sizeof(ConnectorSpacingPropertyWidget_SetConnectorSpacing) == 0x000002, "Wrong size on ConnectorSpacingPropertyWidget_SetConnectorSpacing");
static_assert(offsetof(ConnectorSpacingPropertyWidget_SetConnectorSpacing, NewSpacing) == 0x000000, "Member 'ConnectorSpacingPropertyWidget_SetConnectorSpacing::NewSpacing' has a wrong offset!");

// Function BrickRigs.ConnectorSpacingPropertyWidget.UpdateConnectorSpacing
// 0x0004 (0x0004 - 0x0000)
struct ConnectorSpacingPropertyWidget_UpdateConnectorSpacing final
{
public:
	struct FScalableBrickConnectorSpacing         NewSpacing;                                        // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         AxisFlags;                                         // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConnectorSpacingPropertyWidget_UpdateConnectorSpacing) == 0x000002, "Wrong alignment on ConnectorSpacingPropertyWidget_UpdateConnectorSpacing");
static_assert(sizeof(ConnectorSpacingPropertyWidget_UpdateConnectorSpacing) == 0x000004, "Wrong size on ConnectorSpacingPropertyWidget_UpdateConnectorSpacing");
static_assert(offsetof(ConnectorSpacingPropertyWidget_UpdateConnectorSpacing, NewSpacing) == 0x000000, "Member 'ConnectorSpacingPropertyWidget_UpdateConnectorSpacing::NewSpacing' has a wrong offset!");
static_assert(offsetof(ConnectorSpacingPropertyWidget_UpdateConnectorSpacing, AxisFlags) == 0x000002, "Member 'ConnectorSpacingPropertyWidget_UpdateConnectorSpacing::AxisFlags' has a wrong offset!");

// Function BrickRigs.ContextMenuWidget.OnActionTriggered
// 0x000C (0x000C - 0x0000)
struct ContextMenuWidget_OnActionTriggered final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReleased;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextMenuWidget_OnActionTriggered) == 0x000004, "Wrong alignment on ContextMenuWidget_OnActionTriggered");
static_assert(sizeof(ContextMenuWidget_OnActionTriggered) == 0x00000C, "Wrong size on ContextMenuWidget_OnActionTriggered");
static_assert(offsetof(ContextMenuWidget_OnActionTriggered, ActionName) == 0x000000, "Member 'ContextMenuWidget_OnActionTriggered::ActionName' has a wrong offset!");
static_assert(offsetof(ContextMenuWidget_OnActionTriggered, bReleased) == 0x000008, "Member 'ContextMenuWidget_OnActionTriggered::bReleased' has a wrong offset!");

// Function BrickRigs.ContextMenuWidget.UpdateTitleText
// 0x0018 (0x0018 - 0x0000)
struct ContextMenuWidget_UpdateTitleText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextMenuWidget_UpdateTitleText) == 0x000008, "Wrong alignment on ContextMenuWidget_UpdateTitleText");
static_assert(sizeof(ContextMenuWidget_UpdateTitleText) == 0x000018, "Wrong size on ContextMenuWidget_UpdateTitleText");
static_assert(offsetof(ContextMenuWidget_UpdateTitleText, InText) == 0x000000, "Member 'ContextMenuWidget_UpdateTitleText::InText' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.AccessInventory
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_AccessInventory final
{
public:
	class UInventoryComponent*                    InAccessedInventory;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_AccessInventory) == 0x000008, "Wrong alignment on BrickPlayerController_AccessInventory");
static_assert(sizeof(BrickPlayerController_AccessInventory) == 0x000008, "Wrong size on BrickPlayerController_AccessInventory");
static_assert(offsetof(BrickPlayerController_AccessInventory, InAccessedInventory) == 0x000000, "Member 'BrickPlayerController_AccessInventory::InAccessedInventory' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.AdjustSlomoSpeed
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerController_AdjustSlomoSpeed final
{
public:
	int32                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_AdjustSlomoSpeed) == 0x000004, "Wrong alignment on BrickPlayerController_AdjustSlomoSpeed");
static_assert(sizeof(BrickPlayerController_AdjustSlomoSpeed) == 0x000004, "Wrong size on BrickPlayerController_AdjustSlomoSpeed");
static_assert(offsetof(BrickPlayerController_AdjustSlomoSpeed, Dir) == 0x000000, "Member 'BrickPlayerController_AdjustSlomoSpeed::Dir' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.AdminSay
// 0x0018 (0x0018 - 0x0000)
struct BrickPlayerController_AdminSay final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_AdminSay) == 0x000008, "Wrong alignment on BrickPlayerController_AdminSay");
static_assert(sizeof(BrickPlayerController_AdminSay) == 0x000018, "Wrong size on BrickPlayerController_AdminSay");
static_assert(offsetof(BrickPlayerController_AdminSay, Message) == 0x000000, "Member 'BrickPlayerController_AdminSay::Message' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanCheat
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanCheat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanCheat) == 0x000001, "Wrong alignment on BrickPlayerController_CanCheat");
static_assert(sizeof(BrickPlayerController_CanCheat) == 0x000001, "Wrong size on BrickPlayerController_CanCheat");
static_assert(offsetof(BrickPlayerController_CanCheat, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanCheat::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanRestartAt
// 0x0120 (0x0120 - 0x0000)
struct BrickPlayerController_CanRestartAt final
{
public:
	struct FPlayerSpawnRequest                    InOutSpawnRequest;                                 // 0x0000(0x0118)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bForceRestart;                                     // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerSpawnResult                            ReturnValue;                                       // 0x0119(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanRestartAt) == 0x000008, "Wrong alignment on BrickPlayerController_CanRestartAt");
static_assert(sizeof(BrickPlayerController_CanRestartAt) == 0x000120, "Wrong size on BrickPlayerController_CanRestartAt");
static_assert(offsetof(BrickPlayerController_CanRestartAt, InOutSpawnRequest) == 0x000000, "Member 'BrickPlayerController_CanRestartAt::InOutSpawnRequest' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanRestartAt, bForceRestart) == 0x000118, "Member 'BrickPlayerController_CanRestartAt::bForceRestart' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanRestartAt, ReturnValue) == 0x000119, "Member 'BrickPlayerController_CanRestartAt::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientDamagedCharacter
// 0x000C (0x000C - 0x0000)
struct BrickPlayerController_ClientDamagedCharacter final
{
public:
	struct FClientDamageInfo                      DamageInfo;                                        // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ClientDamagedCharacter) == 0x000004, "Wrong alignment on BrickPlayerController_ClientDamagedCharacter");
static_assert(sizeof(BrickPlayerController_ClientDamagedCharacter) == 0x00000C, "Wrong size on BrickPlayerController_ClientDamagedCharacter");
static_assert(offsetof(BrickPlayerController_ClientDamagedCharacter, DamageInfo) == 0x000000, "Member 'BrickPlayerController_ClientDamagedCharacter::DamageInfo' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientOnFailedToRestart
// 0x001C (0x001C - 0x0000)
struct BrickPlayerController_ClientOnFailedToRestart final
{
public:
	EPlayerSpawnResult                            SpawnResult;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleSpawnProperties                Props;                                             // 0x0004(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ClientOnFailedToRestart) == 0x000004, "Wrong alignment on BrickPlayerController_ClientOnFailedToRestart");
static_assert(sizeof(BrickPlayerController_ClientOnFailedToRestart) == 0x00001C, "Wrong size on BrickPlayerController_ClientOnFailedToRestart");
static_assert(offsetof(BrickPlayerController_ClientOnFailedToRestart, SpawnResult) == 0x000000, "Member 'BrickPlayerController_ClientOnFailedToRestart::SpawnResult' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ClientOnFailedToRestart, Props) == 0x000004, "Member 'BrickPlayerController_ClientOnFailedToRestart::Props' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientReceiveChatMessage
// 0x00A8 (0x00A8 - 0x0000)
struct BrickPlayerController_ClientReceiveChatMessage final
{
public:
	struct FBrickChatMessage                      ChatMessage;                                       // 0x0000(0x00A8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ClientReceiveChatMessage) == 0x000008, "Wrong alignment on BrickPlayerController_ClientReceiveChatMessage");
static_assert(sizeof(BrickPlayerController_ClientReceiveChatMessage) == 0x0000A8, "Wrong size on BrickPlayerController_ClientReceiveChatMessage");
static_assert(offsetof(BrickPlayerController_ClientReceiveChatMessage, ChatMessage) == 0x000000, "Member 'BrickPlayerController_ClientReceiveChatMessage::ChatMessage' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientReceiveChatMessages
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ClientReceiveChatMessages final
{
public:
	TArray<struct FBrickChatMessage>              ChatMessages;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ClientReceiveChatMessages) == 0x000008, "Wrong alignment on BrickPlayerController_ClientReceiveChatMessages");
static_assert(sizeof(BrickPlayerController_ClientReceiveChatMessages) == 0x000010, "Wrong size on BrickPlayerController_ClientReceiveChatMessages");
static_assert(offsetof(BrickPlayerController_ClientReceiveChatMessages, ChatMessages) == 0x000000, "Member 'BrickPlayerController_ClientReceiveChatMessages::ChatMessages' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientRevertVehicleDamage
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ClientRevertVehicleDamage final
{
public:
	class ABrickVehicle*                          Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x0008(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ClientRevertVehicleDamage) == 0x000008, "Wrong alignment on BrickPlayerController_ClientRevertVehicleDamage");
static_assert(sizeof(BrickPlayerController_ClientRevertVehicleDamage) == 0x000010, "Wrong size on BrickPlayerController_ClientRevertVehicleDamage");
static_assert(offsetof(BrickPlayerController_ClientRevertVehicleDamage, Vehicle) == 0x000000, "Member 'BrickPlayerController_ClientRevertVehicleDamage::Vehicle' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ClientRevertVehicleDamage, ComparisonIndex) == 0x000008, "Member 'BrickPlayerController_ClientRevertVehicleDamage::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientSentWrongAdminPassword
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ClientSentWrongAdminPassword final
{
public:
	uint8                                         AttemptsRemaining;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ClientSentWrongAdminPassword) == 0x000001, "Wrong alignment on BrickPlayerController_ClientSentWrongAdminPassword");
static_assert(sizeof(BrickPlayerController_ClientSentWrongAdminPassword) == 0x000001, "Wrong size on BrickPlayerController_ClientSentWrongAdminPassword");
static_assert(offsetof(BrickPlayerController_ClientSentWrongAdminPassword, AttemptsRemaining) == 0x000000, "Member 'BrickPlayerController_ClientSentWrongAdminPassword::AttemptsRemaining' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ClientWasKickedForDuration
// 0x0018 (0x0018 - 0x0000)
struct BrickPlayerController_ClientWasKickedForDuration final
{
public:
	class FString                                 KickReason;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              KickDuration;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ClientWasKickedForDuration) == 0x000008, "Wrong alignment on BrickPlayerController_ClientWasKickedForDuration");
static_assert(sizeof(BrickPlayerController_ClientWasKickedForDuration) == 0x000018, "Wrong size on BrickPlayerController_ClientWasKickedForDuration");
static_assert(offsetof(BrickPlayerController_ClientWasKickedForDuration, KickReason) == 0x000000, "Member 'BrickPlayerController_ClientWasKickedForDuration::KickReason' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ClientWasKickedForDuration, KickDuration) == 0x000010, "Member 'BrickPlayerController_ClientWasKickedForDuration::KickDuration' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.DestroyCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_DestroyCharacter final
{
public:
	class ABaseCharacter*                         Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_DestroyCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_DestroyCharacter");
static_assert(sizeof(BrickPlayerController_DestroyCharacter) == 0x000008, "Wrong size on BrickPlayerController_DestroyCharacter");
static_assert(offsetof(BrickPlayerController_DestroyCharacter, Char) == 0x000000, "Member 'BrickPlayerController_DestroyCharacter::Char' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.EnterEditor
// 0x0108 (0x0108 - 0x0000)
struct BrickPlayerController_EnterEditor final
{
public:
	EUGCType                                      InUGCType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUGCFileInfo                           InFileInfo;                                        // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bImport;                                           // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EntryPoint;                                        // 0x00F8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_EnterEditor) == 0x000008, "Wrong alignment on BrickPlayerController_EnterEditor");
static_assert(sizeof(BrickPlayerController_EnterEditor) == 0x000108, "Wrong size on BrickPlayerController_EnterEditor");
static_assert(offsetof(BrickPlayerController_EnterEditor, InUGCType) == 0x000000, "Member 'BrickPlayerController_EnterEditor::InUGCType' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_EnterEditor, InFileInfo) == 0x000008, "Member 'BrickPlayerController_EnterEditor::InFileInfo' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_EnterEditor, bImport) == 0x0000F0, "Member 'BrickPlayerController_EnterEditor::bImport' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_EnterEditor, EntryPoint) == 0x0000F8, "Member 'BrickPlayerController_EnterEditor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_EnterEditor, ReturnValue) == 0x000100, "Member 'BrickPlayerController_EnterEditor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.EnterFreeCam
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_EnterFreeCam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_EnterFreeCam) == 0x000001, "Wrong alignment on BrickPlayerController_EnterFreeCam");
static_assert(sizeof(BrickPlayerController_EnterFreeCam) == 0x000001, "Wrong size on BrickPlayerController_EnterFreeCam");
static_assert(offsetof(BrickPlayerController_EnterFreeCam, ReturnValue) == 0x000000, "Member 'BrickPlayerController_EnterFreeCam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.EnterVehicleEditor
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_EnterVehicleEditor final
{
public:
	class AActor*                                 EntryPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_EnterVehicleEditor) == 0x000008, "Wrong alignment on BrickPlayerController_EnterVehicleEditor");
static_assert(sizeof(BrickPlayerController_EnterVehicleEditor) == 0x000008, "Wrong size on BrickPlayerController_EnterVehicleEditor");
static_assert(offsetof(BrickPlayerController_EnterVehicleEditor, EntryPoint) == 0x000000, "Member 'BrickPlayerController_EnterVehicleEditor::EntryPoint' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ExitEditor
// 0x00E8 (0x00E8 - 0x0000)
struct BrickPlayerController_ExitEditor final
{
public:
	struct FUGCFileInfo                           InFileInfo;                                        // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ExitEditor) == 0x000008, "Wrong alignment on BrickPlayerController_ExitEditor");
static_assert(sizeof(BrickPlayerController_ExitEditor) == 0x0000E8, "Wrong size on BrickPlayerController_ExitEditor");
static_assert(offsetof(BrickPlayerController_ExitEditor, InFileInfo) == 0x000000, "Member 'BrickPlayerController_ExitEditor::InFileInfo' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.JoinTeam
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_JoinTeam final
{
public:
	struct FGenericTeamId                         InTeamId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_JoinTeam) == 0x000001, "Wrong alignment on BrickPlayerController_JoinTeam");
static_assert(sizeof(BrickPlayerController_JoinTeam) == 0x000001, "Wrong size on BrickPlayerController_JoinTeam");
static_assert(offsetof(BrickPlayerController_JoinTeam, InTeamId) == 0x000000, "Member 'BrickPlayerController_JoinTeam::InTeamId' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.OnRep_AccessedInventory
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_OnRep_AccessedInventory final
{
public:
	class UInventoryComponent*                    OldInventory;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_OnRep_AccessedInventory) == 0x000008, "Wrong alignment on BrickPlayerController_OnRep_AccessedInventory");
static_assert(sizeof(BrickPlayerController_OnRep_AccessedInventory) == 0x000008, "Wrong size on BrickPlayerController_OnRep_AccessedInventory");
static_assert(offsetof(BrickPlayerController_OnRep_AccessedInventory, OldInventory) == 0x000000, "Member 'BrickPlayerController_OnRep_AccessedInventory::OldInventory' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.OnRep_PlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_OnRep_PlayerCharacter final
{
public:
	class ABaseCharacter*                         OldCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_OnRep_PlayerCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_OnRep_PlayerCharacter");
static_assert(sizeof(BrickPlayerController_OnRep_PlayerCharacter) == 0x000008, "Wrong size on BrickPlayerController_OnRep_PlayerCharacter");
static_assert(offsetof(BrickPlayerController_OnRep_PlayerCharacter, OldCharacter) == 0x000000, "Member 'BrickPlayerController_OnRep_PlayerCharacter::OldCharacter' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.OpenMap
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_OpenMap final
{
public:
	bool                                          bToggleOpen;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_OpenMap) == 0x000001, "Wrong alignment on BrickPlayerController_OpenMap");
static_assert(sizeof(BrickPlayerController_OpenMap) == 0x000001, "Wrong size on BrickPlayerController_OpenMap");
static_assert(offsetof(BrickPlayerController_OpenMap, bToggleOpen) == 0x000000, "Member 'BrickPlayerController_OpenMap::bToggleOpen' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.OpenScoreboard
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_OpenScoreboard final
{
public:
	bool                                          bToggleOpen;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_OpenScoreboard) == 0x000001, "Wrong alignment on BrickPlayerController_OpenScoreboard");
static_assert(sizeof(BrickPlayerController_OpenScoreboard) == 0x000001, "Wrong size on BrickPlayerController_OpenScoreboard");
static_assert(offsetof(BrickPlayerController_OpenScoreboard, bToggleOpen) == 0x000000, "Member 'BrickPlayerController_OpenScoreboard::bToggleOpen' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.OpenVehicleBrowser
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_OpenVehicleBrowser final
{
public:
	class AActor*                                 EntryPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_OpenVehicleBrowser) == 0x000008, "Wrong alignment on BrickPlayerController_OpenVehicleBrowser");
static_assert(sizeof(BrickPlayerController_OpenVehicleBrowser) == 0x000008, "Wrong size on BrickPlayerController_OpenVehicleBrowser");
static_assert(offsetof(BrickPlayerController_OpenVehicleBrowser, EntryPoint) == 0x000000, "Member 'BrickPlayerController_OpenVehicleBrowser::EntryPoint' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.PossessCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_PossessCharacter final
{
public:
	class ABaseCharacter*                         Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_PossessCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_PossessCharacter");
static_assert(sizeof(BrickPlayerController_PossessCharacter) == 0x000008, "Wrong size on BrickPlayerController_PossessCharacter");
static_assert(offsetof(BrickPlayerController_PossessCharacter, Char) == 0x000000, "Member 'BrickPlayerController_PossessCharacter::Char' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.RequestAdminAccess
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_RequestAdminAccess final
{
public:
	class FString                                 PW;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_RequestAdminAccess) == 0x000008, "Wrong alignment on BrickPlayerController_RequestAdminAccess");
static_assert(sizeof(BrickPlayerController_RequestAdminAccess) == 0x000010, "Wrong size on BrickPlayerController_RequestAdminAccess");
static_assert(offsetof(BrickPlayerController_RequestAdminAccess, PW) == 0x000000, "Member 'BrickPlayerController_RequestAdminAccess::PW' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.RestartAt
// 0x0120 (0x0120 - 0x0000)
struct BrickPlayerController_RestartAt final
{
public:
	struct FPlayerSpawnRequest                    SpawnRequest;                                      // 0x0000(0x0118)(Parm, NativeAccessSpecifierPublic)
	EPlayerSpawnResult                            ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_RestartAt) == 0x000008, "Wrong alignment on BrickPlayerController_RestartAt");
static_assert(sizeof(BrickPlayerController_RestartAt) == 0x000120, "Wrong size on BrickPlayerController_RestartAt");
static_assert(offsetof(BrickPlayerController_RestartAt, SpawnRequest) == 0x000000, "Member 'BrickPlayerController_RestartAt::SpawnRequest' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_RestartAt, ReturnValue) == 0x000118, "Member 'BrickPlayerController_RestartAt::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.Say
// 0x0018 (0x0018 - 0x0000)
struct BrickPlayerController_Say final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_Say) == 0x000008, "Wrong alignment on BrickPlayerController_Say");
static_assert(sizeof(BrickPlayerController_Say) == 0x000018, "Wrong size on BrickPlayerController_Say");
static_assert(offsetof(BrickPlayerController_Say, Message) == 0x000000, "Member 'BrickPlayerController_Say::Message' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ScrapAllVehicles
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ScrapAllVehicles final
{
public:
	bool                                          bIncludeUsed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ScrapAllVehicles) == 0x000001, "Wrong alignment on BrickPlayerController_ScrapAllVehicles");
static_assert(sizeof(BrickPlayerController_ScrapAllVehicles) == 0x000001, "Wrong size on BrickPlayerController_ScrapAllVehicles");
static_assert(offsetof(BrickPlayerController_ScrapAllVehicles, bIncludeUsed) == 0x000000, "Member 'BrickPlayerController_ScrapAllVehicles::bIncludeUsed' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ScrapVehicle
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ScrapVehicle final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPerson;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ScrapVehicle) == 0x000008, "Wrong alignment on BrickPlayerController_ScrapVehicle");
static_assert(sizeof(BrickPlayerController_ScrapVehicle) == 0x000010, "Wrong size on BrickPlayerController_ScrapVehicle");
static_assert(offsetof(BrickPlayerController_ScrapVehicle, InVehicle) == 0x000000, "Member 'BrickPlayerController_ScrapVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ScrapVehicle, bInPerson) == 0x000008, "Member 'BrickPlayerController_ScrapVehicle::bInPerson' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SendChatMessage
// 0x0020 (0x0020 - 0x0000)
struct BrickPlayerController_SendChatMessage final
{
public:
	EChatContext                                  Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SendChatMessage) == 0x000008, "Wrong alignment on BrickPlayerController_SendChatMessage");
static_assert(sizeof(BrickPlayerController_SendChatMessage) == 0x000020, "Wrong size on BrickPlayerController_SendChatMessage");
static_assert(offsetof(BrickPlayerController_SendChatMessage, Context) == 0x000000, "Member 'BrickPlayerController_SendChatMessage::Context' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_SendChatMessage, Message) == 0x000008, "Member 'BrickPlayerController_SendChatMessage::Message' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerAccessInventory
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_ServerAccessInventory final
{
public:
	class UInventoryComponent*                    InInventory;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerAccessInventory) == 0x000008, "Wrong alignment on BrickPlayerController_ServerAccessInventory");
static_assert(sizeof(BrickPlayerController_ServerAccessInventory) == 0x000008, "Wrong size on BrickPlayerController_ServerAccessInventory");
static_assert(offsetof(BrickPlayerController_ServerAccessInventory, InInventory) == 0x000000, "Member 'BrickPlayerController_ServerAccessInventory::InInventory' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerApplyMatchSettings
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerApplyMatchSettings final
{
public:
	bool                                          bFade;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerApplyMatchSettings) == 0x000001, "Wrong alignment on BrickPlayerController_ServerApplyMatchSettings");
static_assert(sizeof(BrickPlayerController_ServerApplyMatchSettings) == 0x000001, "Wrong size on BrickPlayerController_ServerApplyMatchSettings");
static_assert(offsetof(BrickPlayerController_ServerApplyMatchSettings, bFade) == 0x000000, "Member 'BrickPlayerController_ServerApplyMatchSettings::bFade' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerAttachWinchBrick
// 0x0028 (0x0028 - 0x0000)
struct BrickPlayerController_ServerAttachWinchBrick final
{
public:
	class UWinchBrick*                            WinchBrick;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWinchAttachTarget                     AttachTarget;                                      // 0x0008(0x001C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerAttachWinchBrick) == 0x000008, "Wrong alignment on BrickPlayerController_ServerAttachWinchBrick");
static_assert(sizeof(BrickPlayerController_ServerAttachWinchBrick) == 0x000028, "Wrong size on BrickPlayerController_ServerAttachWinchBrick");
static_assert(offsetof(BrickPlayerController_ServerAttachWinchBrick, WinchBrick) == 0x000000, "Member 'BrickPlayerController_ServerAttachWinchBrick::WinchBrick' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerAttachWinchBrick, AttachTarget) == 0x000008, "Member 'BrickPlayerController_ServerAttachWinchBrick::AttachTarget' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerCheatMoney
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerController_ServerCheatMoney final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerCheatMoney) == 0x000004, "Wrong alignment on BrickPlayerController_ServerCheatMoney");
static_assert(sizeof(BrickPlayerController_ServerCheatMoney) == 0x000004, "Wrong size on BrickPlayerController_ServerCheatMoney");
static_assert(offsetof(BrickPlayerController_ServerCheatMoney, Amount) == 0x000000, "Member 'BrickPlayerController_ServerCheatMoney::Amount' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerCheatScore
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerController_ServerCheatScore final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerCheatScore) == 0x000004, "Wrong alignment on BrickPlayerController_ServerCheatScore");
static_assert(sizeof(BrickPlayerController_ServerCheatScore) == 0x000004, "Wrong size on BrickPlayerController_ServerCheatScore");
static_assert(offsetof(BrickPlayerController_ServerCheatScore, Amount) == 0x000000, "Member 'BrickPlayerController_ServerCheatScore::Amount' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerCycleCharacters
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerCycleCharacters final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerCycleCharacters) == 0x000001, "Wrong alignment on BrickPlayerController_ServerCycleCharacters");
static_assert(sizeof(BrickPlayerController_ServerCycleCharacters) == 0x000001, "Wrong size on BrickPlayerController_ServerCycleCharacters");
static_assert(offsetof(BrickPlayerController_ServerCycleCharacters, bForward) == 0x000000, "Member 'BrickPlayerController_ServerCycleCharacters::bForward' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerCycleVehicles
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerCycleVehicles final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerCycleVehicles) == 0x000001, "Wrong alignment on BrickPlayerController_ServerCycleVehicles");
static_assert(sizeof(BrickPlayerController_ServerCycleVehicles) == 0x000001, "Wrong size on BrickPlayerController_ServerCycleVehicles");
static_assert(offsetof(BrickPlayerController_ServerCycleVehicles, bReverse) == 0x000000, "Member 'BrickPlayerController_ServerCycleVehicles::bReverse' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerDestroyCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_ServerDestroyCharacter final
{
public:
	class ABaseCharacter*                         Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerDestroyCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_ServerDestroyCharacter");
static_assert(sizeof(BrickPlayerController_ServerDestroyCharacter) == 0x000008, "Wrong size on BrickPlayerController_ServerDestroyCharacter");
static_assert(offsetof(BrickPlayerController_ServerDestroyCharacter, Char) == 0x000000, "Member 'BrickPlayerController_ServerDestroyCharacter::Char' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerEngageCouplingBrick
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerEngageCouplingBrick final
{
public:
	class UCouplingBrick*                         CouplingBrick;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngage;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerEngageCouplingBrick) == 0x000008, "Wrong alignment on BrickPlayerController_ServerEngageCouplingBrick");
static_assert(sizeof(BrickPlayerController_ServerEngageCouplingBrick) == 0x000010, "Wrong size on BrickPlayerController_ServerEngageCouplingBrick");
static_assert(offsetof(BrickPlayerController_ServerEngageCouplingBrick, CouplingBrick) == 0x000000, "Member 'BrickPlayerController_ServerEngageCouplingBrick::CouplingBrick' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerEngageCouplingBrick, bEngage) == 0x000008, "Member 'BrickPlayerController_ServerEngageCouplingBrick::bEngage' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerJoinTeam
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerJoinTeam final
{
public:
	struct FGenericTeamId                         InTeamId;                                          // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerJoinTeam) == 0x000001, "Wrong alignment on BrickPlayerController_ServerJoinTeam");
static_assert(sizeof(BrickPlayerController_ServerJoinTeam) == 0x000001, "Wrong size on BrickPlayerController_ServerJoinTeam");
static_assert(offsetof(BrickPlayerController_ServerJoinTeam, InTeamId) == 0x000000, "Member 'BrickPlayerController_ServerJoinTeam::InTeamId' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerOnAnyVehicleConstructed
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_ServerOnAnyVehicleConstructed final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerOnAnyVehicleConstructed) == 0x000008, "Wrong alignment on BrickPlayerController_ServerOnAnyVehicleConstructed");
static_assert(sizeof(BrickPlayerController_ServerOnAnyVehicleConstructed) == 0x000008, "Wrong size on BrickPlayerController_ServerOnAnyVehicleConstructed");
static_assert(offsetof(BrickPlayerController_ServerOnAnyVehicleConstructed, InVehicle) == 0x000000, "Member 'BrickPlayerController_ServerOnAnyVehicleConstructed::InVehicle' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerOnMeleeHit
// 0x0038 (0x0038 - 0x0000)
struct BrickPlayerController_ServerOnMeleeHit final
{
public:
	struct FRepHitInfo                            HitInfo;                                           // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerOnMeleeHit) == 0x000004, "Wrong alignment on BrickPlayerController_ServerOnMeleeHit");
static_assert(sizeof(BrickPlayerController_ServerOnMeleeHit) == 0x000038, "Wrong size on BrickPlayerController_ServerOnMeleeHit");
static_assert(offsetof(BrickPlayerController_ServerOnMeleeHit, HitInfo) == 0x000000, "Member 'BrickPlayerController_ServerOnMeleeHit::HitInfo' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerOnPlayerChangedMatchSettings
// 0x00D0 (0x00D0 - 0x0000)
struct BrickPlayerController_ServerOnPlayerChangedMatchSettings final
{
public:
	struct FMatchSettings                         NewSettings;                                       // 0x0000(0x00C8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFade;                                             // 0x00C9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerOnPlayerChangedMatchSettings) == 0x000008, "Wrong alignment on BrickPlayerController_ServerOnPlayerChangedMatchSettings");
static_assert(sizeof(BrickPlayerController_ServerOnPlayerChangedMatchSettings) == 0x0000D0, "Wrong size on BrickPlayerController_ServerOnPlayerChangedMatchSettings");
static_assert(offsetof(BrickPlayerController_ServerOnPlayerChangedMatchSettings, NewSettings) == 0x000000, "Member 'BrickPlayerController_ServerOnPlayerChangedMatchSettings::NewSettings' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerOnPlayerChangedMatchSettings, bApply) == 0x0000C8, "Member 'BrickPlayerController_ServerOnPlayerChangedMatchSettings::bApply' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerOnPlayerChangedMatchSettings, bFade) == 0x0000C9, "Member 'BrickPlayerController_ServerOnPlayerChangedMatchSettings::bFade' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerOnProjectileHit
// 0x0048 (0x0048 - 0x0000)
struct BrickPlayerController_ServerOnProjectileHit final
{
public:
	struct FProjectileHitInfo                     HitInfo;                                           // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerOnProjectileHit) == 0x000004, "Wrong alignment on BrickPlayerController_ServerOnProjectileHit");
static_assert(sizeof(BrickPlayerController_ServerOnProjectileHit) == 0x000048, "Wrong size on BrickPlayerController_ServerOnProjectileHit");
static_assert(offsetof(BrickPlayerController_ServerOnProjectileHit, HitInfo) == 0x000000, "Member 'BrickPlayerController_ServerOnProjectileHit::HitInfo' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerOpenGravelSilo
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerOpenGravelSilo final
{
public:
	class AGravelSilo*                            Silo;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpen;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerOpenGravelSilo) == 0x000008, "Wrong alignment on BrickPlayerController_ServerOpenGravelSilo");
static_assert(sizeof(BrickPlayerController_ServerOpenGravelSilo) == 0x000010, "Wrong size on BrickPlayerController_ServerOpenGravelSilo");
static_assert(offsetof(BrickPlayerController_ServerOpenGravelSilo, Silo) == 0x000000, "Member 'BrickPlayerController_ServerOpenGravelSilo::Silo' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerOpenGravelSilo, bOpen) == 0x000008, "Member 'BrickPlayerController_ServerOpenGravelSilo::bOpen' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerPossessCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_ServerPossessCharacter final
{
public:
	class ABaseCharacter*                         Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerPossessCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_ServerPossessCharacter");
static_assert(sizeof(BrickPlayerController_ServerPossessCharacter) == 0x000008, "Wrong size on BrickPlayerController_ServerPossessCharacter");
static_assert(offsetof(BrickPlayerController_ServerPossessCharacter, Char) == 0x000000, "Member 'BrickPlayerController_ServerPossessCharacter::Char' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerRequestAdminAccess
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerRequestAdminAccess final
{
public:
	class FString                                 PW;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerRequestAdminAccess) == 0x000008, "Wrong alignment on BrickPlayerController_ServerRequestAdminAccess");
static_assert(sizeof(BrickPlayerController_ServerRequestAdminAccess) == 0x000010, "Wrong size on BrickPlayerController_ServerRequestAdminAccess");
static_assert(offsetof(BrickPlayerController_ServerRequestAdminAccess, PW) == 0x000000, "Member 'BrickPlayerController_ServerRequestAdminAccess::PW' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerRestartAt
// 0x0118 (0x0118 - 0x0000)
struct BrickPlayerController_ServerRestartAt final
{
public:
	struct FPlayerSpawnRequest                    SpawnRequest;                                      // 0x0000(0x0118)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerRestartAt) == 0x000008, "Wrong alignment on BrickPlayerController_ServerRestartAt");
static_assert(sizeof(BrickPlayerController_ServerRestartAt) == 0x000118, "Wrong size on BrickPlayerController_ServerRestartAt");
static_assert(offsetof(BrickPlayerController_ServerRestartAt, SpawnRequest) == 0x000000, "Member 'BrickPlayerController_ServerRestartAt::SpawnRequest' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerScrapAllVehicles
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerScrapAllVehicles final
{
public:
	bool                                          bIncludeUsed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerScrapAllVehicles) == 0x000001, "Wrong alignment on BrickPlayerController_ServerScrapAllVehicles");
static_assert(sizeof(BrickPlayerController_ServerScrapAllVehicles) == 0x000001, "Wrong size on BrickPlayerController_ServerScrapAllVehicles");
static_assert(offsetof(BrickPlayerController_ServerScrapAllVehicles, bIncludeUsed) == 0x000000, "Member 'BrickPlayerController_ServerScrapAllVehicles::bIncludeUsed' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerScrapVehicle
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerScrapVehicle final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPerson;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerScrapVehicle) == 0x000008, "Wrong alignment on BrickPlayerController_ServerScrapVehicle");
static_assert(sizeof(BrickPlayerController_ServerScrapVehicle) == 0x000010, "Wrong size on BrickPlayerController_ServerScrapVehicle");
static_assert(offsetof(BrickPlayerController_ServerScrapVehicle, InVehicle) == 0x000000, "Member 'BrickPlayerController_ServerScrapVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerScrapVehicle, bInPerson) == 0x000008, "Member 'BrickPlayerController_ServerScrapVehicle::bInPerson' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerSendChatMessage
// 0x0020 (0x0020 - 0x0000)
struct BrickPlayerController_ServerSendChatMessage final
{
public:
	EChatContext                                  Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerSendChatMessage) == 0x000008, "Wrong alignment on BrickPlayerController_ServerSendChatMessage");
static_assert(sizeof(BrickPlayerController_ServerSendChatMessage) == 0x000020, "Wrong size on BrickPlayerController_ServerSendChatMessage");
static_assert(offsetof(BrickPlayerController_ServerSendChatMessage, Context) == 0x000000, "Member 'BrickPlayerController_ServerSendChatMessage::Context' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerSendChatMessage, Message) == 0x000008, "Member 'BrickPlayerController_ServerSendChatMessage::Message' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerSetElevatorDirection
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerSetElevatorDirection final
{
public:
	class AElevator*                              Elevator;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EElevatorDirection                            Dir;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerSetElevatorDirection) == 0x000008, "Wrong alignment on BrickPlayerController_ServerSetElevatorDirection");
static_assert(sizeof(BrickPlayerController_ServerSetElevatorDirection) == 0x000010, "Wrong size on BrickPlayerController_ServerSetElevatorDirection");
static_assert(offsetof(BrickPlayerController_ServerSetElevatorDirection, Elevator) == 0x000000, "Member 'BrickPlayerController_ServerSetElevatorDirection::Elevator' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerSetElevatorDirection, Dir) == 0x000008, "Member 'BrickPlayerController_ServerSetElevatorDirection::Dir' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerSetSwitchBrickValue
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerSetSwitchBrickValue final
{
public:
	class USwitchBrick*                           SwitchBrick;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          NewValue;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerSetSwitchBrickValue) == 0x000008, "Wrong alignment on BrickPlayerController_ServerSetSwitchBrickValue");
static_assert(sizeof(BrickPlayerController_ServerSetSwitchBrickValue) == 0x000010, "Wrong size on BrickPlayerController_ServerSetSwitchBrickValue");
static_assert(offsetof(BrickPlayerController_ServerSetSwitchBrickValue, SwitchBrick) == 0x000000, "Member 'BrickPlayerController_ServerSetSwitchBrickValue::SwitchBrick' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerSetSwitchBrickValue, NewValue) == 0x000008, "Member 'BrickPlayerController_ServerSetSwitchBrickValue::NewValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerSetVehiclePinMode
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerSetVehiclePinMode final
{
public:
	EVehiclePinMode                               PinMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerSetVehiclePinMode) == 0x000001, "Wrong alignment on BrickPlayerController_ServerSetVehiclePinMode");
static_assert(sizeof(BrickPlayerController_ServerSetVehiclePinMode) == 0x000001, "Wrong size on BrickPlayerController_ServerSetVehiclePinMode");
static_assert(offsetof(BrickPlayerController_ServerSetVehiclePinMode, PinMode) == 0x000000, "Member 'BrickPlayerController_ServerSetVehiclePinMode::PinMode' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerSpawnDummy
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_ServerSpawnDummy final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        CompressedYaw;                                     // 0x000C(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerSpawnDummy) == 0x000004, "Wrong alignment on BrickPlayerController_ServerSpawnDummy");
static_assert(sizeof(BrickPlayerController_ServerSpawnDummy) == 0x000010, "Wrong size on BrickPlayerController_ServerSpawnDummy");
static_assert(offsetof(BrickPlayerController_ServerSpawnDummy, Location) == 0x000000, "Member 'BrickPlayerController_ServerSpawnDummy::Location' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerSpawnDummy, CompressedYaw) == 0x00000C, "Member 'BrickPlayerController_ServerSpawnDummy::CompressedYaw' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerSpectateNextCharacter
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerSpectateNextCharacter final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerSpectateNextCharacter) == 0x000001, "Wrong alignment on BrickPlayerController_ServerSpectateNextCharacter");
static_assert(sizeof(BrickPlayerController_ServerSpectateNextCharacter) == 0x000001, "Wrong size on BrickPlayerController_ServerSpectateNextCharacter");
static_assert(offsetof(BrickPlayerController_ServerSpectateNextCharacter, bForward) == 0x000000, "Member 'BrickPlayerController_ServerSpectateNextCharacter::bForward' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerStartDragRace
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_ServerStartDragRace final
{
public:
	class ADragStrip*                             DragStrip;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerStartDragRace) == 0x000008, "Wrong alignment on BrickPlayerController_ServerStartDragRace");
static_assert(sizeof(BrickPlayerController_ServerStartDragRace) == 0x000008, "Wrong size on BrickPlayerController_ServerStartDragRace");
static_assert(offsetof(BrickPlayerController_ServerStartDragRace, DragStrip) == 0x000000, "Member 'BrickPlayerController_ServerStartDragRace::DragStrip' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerToggleInvincible
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ServerToggleInvincible final
{
public:
	bool                                          bVehicle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerToggleInvincible) == 0x000001, "Wrong alignment on BrickPlayerController_ServerToggleInvincible");
static_assert(sizeof(BrickPlayerController_ServerToggleInvincible) == 0x000001, "Wrong size on BrickPlayerController_ServerToggleInvincible");
static_assert(offsetof(BrickPlayerController_ServerToggleInvincible, bVehicle) == 0x000000, "Member 'BrickPlayerController_ServerToggleInvincible::bVehicle' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerTriggerDetonatorBrick
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_ServerTriggerDetonatorBrick final
{
public:
	class UDetonatorBrick*                        DetonatorBrick;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ServerTriggerDetonatorBrick) == 0x000008, "Wrong alignment on BrickPlayerController_ServerTriggerDetonatorBrick");
static_assert(sizeof(BrickPlayerController_ServerTriggerDetonatorBrick) == 0x000008, "Wrong size on BrickPlayerController_ServerTriggerDetonatorBrick");
static_assert(offsetof(BrickPlayerController_ServerTriggerDetonatorBrick, DetonatorBrick) == 0x000000, "Member 'BrickPlayerController_ServerTriggerDetonatorBrick::DetonatorBrick' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerUpdateActuator
// 0x001C (0x001C - 0x0000)
struct BrickPlayerController_ServerUpdateActuator final
{
public:
	struct FRepActuatorState                      NewState;                                          // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               RestartVersion;                                    // 0x0018(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerUpdateActuator) == 0x000004, "Wrong alignment on BrickPlayerController_ServerUpdateActuator");
static_assert(sizeof(BrickPlayerController_ServerUpdateActuator) == 0x00001C, "Wrong size on BrickPlayerController_ServerUpdateActuator");
static_assert(offsetof(BrickPlayerController_ServerUpdateActuator, NewState) == 0x000000, "Member 'BrickPlayerController_ServerUpdateActuator::NewState' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateActuator, RestartVersion) == 0x000018, "Member 'BrickPlayerController_ServerUpdateActuator::RestartVersion' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerUpdateVehicleMovement
// 0x0020 (0x0020 - 0x0000)
struct BrickPlayerController_ServerUpdateVehicleMovement final
{
public:
	class ABrickVehicle*                          Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRepBrickMovementState>         MovementSates;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OwnerTimestamp;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x001C(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerUpdateVehicleMovement) == 0x000008, "Wrong alignment on BrickPlayerController_ServerUpdateVehicleMovement");
static_assert(sizeof(BrickPlayerController_ServerUpdateVehicleMovement) == 0x000020, "Wrong size on BrickPlayerController_ServerUpdateVehicleMovement");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovement, Vehicle) == 0x000000, "Member 'BrickPlayerController_ServerUpdateVehicleMovement::Vehicle' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovement, MovementSates) == 0x000008, "Member 'BrickPlayerController_ServerUpdateVehicleMovement::MovementSates' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovement, OwnerTimestamp) == 0x000018, "Member 'BrickPlayerController_ServerUpdateVehicleMovement::OwnerTimestamp' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovement, ComparisonIndex) == 0x00001C, "Member 'BrickPlayerController_ServerUpdateVehicleMovement::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ServerUpdateVehicleMovementAndDamage
// 0x0038 (0x0038 - 0x0000)
struct BrickPlayerController_ServerUpdateVehicleMovementAndDamage final
{
public:
	class ABrickVehicle*                          Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRepBrickMovementState>         MovementSates;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OwnerTimestamp;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickConnectionDamageBitfield         ConnectionDamage;                                  // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRestartTransformVersion               ComparisonIndex;                                   // 0x0030(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage) == 0x000008, "Wrong alignment on BrickPlayerController_ServerUpdateVehicleMovementAndDamage");
static_assert(sizeof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage) == 0x000038, "Wrong size on BrickPlayerController_ServerUpdateVehicleMovementAndDamage");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage, Vehicle) == 0x000000, "Member 'BrickPlayerController_ServerUpdateVehicleMovementAndDamage::Vehicle' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage, MovementSates) == 0x000008, "Member 'BrickPlayerController_ServerUpdateVehicleMovementAndDamage::MovementSates' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage, OwnerTimestamp) == 0x000018, "Member 'BrickPlayerController_ServerUpdateVehicleMovementAndDamage::OwnerTimestamp' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage, ConnectionDamage) == 0x000020, "Member 'BrickPlayerController_ServerUpdateVehicleMovementAndDamage::ConnectionDamage' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_ServerUpdateVehicleMovementAndDamage, ComparisonIndex) == 0x000030, "Member 'BrickPlayerController_ServerUpdateVehicleMovementAndDamage::ComparisonIndex' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SetFixedCam
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_SetFixedCam final
{
public:
	bool                                          bNewFixedCam;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SetFixedCam) == 0x000001, "Wrong alignment on BrickPlayerController_SetFixedCam");
static_assert(sizeof(BrickPlayerController_SetFixedCam) == 0x000001, "Wrong size on BrickPlayerController_SetFixedCam");
static_assert(offsetof(BrickPlayerController_SetFixedCam, bNewFixedCam) == 0x000000, "Member 'BrickPlayerController_SetFixedCam::bNewFixedCam' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SetFreeCamMode
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_SetFreeCamMode final
{
public:
	EFreeCamMode                                  NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SetFreeCamMode) == 0x000001, "Wrong alignment on BrickPlayerController_SetFreeCamMode");
static_assert(sizeof(BrickPlayerController_SetFreeCamMode) == 0x000001, "Wrong size on BrickPlayerController_SetFreeCamMode");
static_assert(offsetof(BrickPlayerController_SetFreeCamMode, NewMode) == 0x000000, "Member 'BrickPlayerController_SetFreeCamMode::NewMode' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SetPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_SetPlayerCharacter final
{
public:
	class ABaseCharacter*                         InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SetPlayerCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_SetPlayerCharacter");
static_assert(sizeof(BrickPlayerController_SetPlayerCharacter) == 0x000008, "Wrong size on BrickPlayerController_SetPlayerCharacter");
static_assert(offsetof(BrickPlayerController_SetPlayerCharacter, InCharacter) == 0x000000, "Member 'BrickPlayerController_SetPlayerCharacter::InCharacter' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SetSpectatedCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_SetSpectatedCharacter final
{
public:
	class ABaseCharacter*                         InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SetSpectatedCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_SetSpectatedCharacter");
static_assert(sizeof(BrickPlayerController_SetSpectatedCharacter) == 0x000008, "Wrong size on BrickPlayerController_SetSpectatedCharacter");
static_assert(offsetof(BrickPlayerController_SetSpectatedCharacter, InCharacter) == 0x000000, "Member 'BrickPlayerController_SetSpectatedCharacter::InCharacter' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SetVehiclePinMode
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_SetVehiclePinMode final
{
public:
	EVehiclePinMode                               PinMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SetVehiclePinMode) == 0x000001, "Wrong alignment on BrickPlayerController_SetVehiclePinMode");
static_assert(sizeof(BrickPlayerController_SetVehiclePinMode) == 0x000001, "Wrong size on BrickPlayerController_SetVehiclePinMode");
static_assert(offsetof(BrickPlayerController_SetVehiclePinMode, PinMode) == 0x000000, "Member 'BrickPlayerController_SetVehiclePinMode::PinMode' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ShowHUDWidget
// 0x0028 (0x0028 - 0x0000)
struct BrickPlayerController_ShowHUDWidget final
{
public:
	TSoftClassPtr<class UClass>                   HUDWidgetClass;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ShowHUDWidget) == 0x000008, "Wrong alignment on BrickPlayerController_ShowHUDWidget");
static_assert(sizeof(BrickPlayerController_ShowHUDWidget) == 0x000028, "Wrong size on BrickPlayerController_ShowHUDWidget");
static_assert(offsetof(BrickPlayerController_ShowHUDWidget, HUDWidgetClass) == 0x000000, "Member 'BrickPlayerController_ShowHUDWidget::HUDWidgetClass' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SpawnDummy
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_SpawnDummy final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SpawnDummy) == 0x000004, "Wrong alignment on BrickPlayerController_SpawnDummy");
static_assert(sizeof(BrickPlayerController_SpawnDummy) == 0x000010, "Wrong size on BrickPlayerController_SpawnDummy");
static_assert(offsetof(BrickPlayerController_SpawnDummy, Location) == 0x000000, "Member 'BrickPlayerController_SpawnDummy::Location' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_SpawnDummy, Yaw) == 0x00000C, "Member 'BrickPlayerController_SpawnDummy::Yaw' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.SpectateNextCharacter
// 0x0002 (0x0002 - 0x0000)
struct BrickPlayerController_SpectateNextCharacter final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_SpectateNextCharacter) == 0x000001, "Wrong alignment on BrickPlayerController_SpectateNextCharacter");
static_assert(sizeof(BrickPlayerController_SpectateNextCharacter) == 0x000002, "Wrong size on BrickPlayerController_SpectateNextCharacter");
static_assert(offsetof(BrickPlayerController_SpectateNextCharacter, bForward) == 0x000000, "Member 'BrickPlayerController_SpectateNextCharacter::bForward' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_SpectateNextCharacter, ReturnValue) == 0x000001, "Member 'BrickPlayerController_SpectateNextCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.ToggleInvincible
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_ToggleInvincible final
{
public:
	bool                                          bVehicle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_ToggleInvincible) == 0x000001, "Wrong alignment on BrickPlayerController_ToggleInvincible");
static_assert(sizeof(BrickPlayerController_ToggleInvincible) == 0x000001, "Wrong size on BrickPlayerController_ToggleInvincible");
static_assert(offsetof(BrickPlayerController_ToggleInvincible, bVehicle) == 0x000000, "Member 'BrickPlayerController_ToggleInvincible::bVehicle' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanAccessInventory
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_CanAccessInventory final
{
public:
	class UInventoryComponent*                    InInventory;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanAccessInventory) == 0x000008, "Wrong alignment on BrickPlayerController_CanAccessInventory");
static_assert(sizeof(BrickPlayerController_CanAccessInventory) == 0x000010, "Wrong size on BrickPlayerController_CanAccessInventory");
static_assert(offsetof(BrickPlayerController_CanAccessInventory, InInventory) == 0x000000, "Member 'BrickPlayerController_CanAccessInventory::InInventory' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanAccessInventory, ReturnValue) == 0x000008, "Member 'BrickPlayerController_CanAccessInventory::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanDestroyAllDummies
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanDestroyAllDummies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanDestroyAllDummies) == 0x000001, "Wrong alignment on BrickPlayerController_CanDestroyAllDummies");
static_assert(sizeof(BrickPlayerController_CanDestroyAllDummies) == 0x000001, "Wrong size on BrickPlayerController_CanDestroyAllDummies");
static_assert(offsetof(BrickPlayerController_CanDestroyAllDummies, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanDestroyAllDummies::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanDestroyCharacter
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_CanDestroyCharacter final
{
public:
	class ABaseCharacter*                         Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanDestroyCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_CanDestroyCharacter");
static_assert(sizeof(BrickPlayerController_CanDestroyCharacter) == 0x000010, "Wrong size on BrickPlayerController_CanDestroyCharacter");
static_assert(offsetof(BrickPlayerController_CanDestroyCharacter, Char) == 0x000000, "Member 'BrickPlayerController_CanDestroyCharacter::Char' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanDestroyCharacter, ReturnValue) == 0x000008, "Member 'BrickPlayerController_CanDestroyCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanEnterEditor
// 0x0018 (0x0018 - 0x0000)
struct BrickPlayerController_CanEnterEditor final
{
public:
	EUGCType                                      InUGCType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EntryPoint;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanEnterEditor) == 0x000008, "Wrong alignment on BrickPlayerController_CanEnterEditor");
static_assert(sizeof(BrickPlayerController_CanEnterEditor) == 0x000018, "Wrong size on BrickPlayerController_CanEnterEditor");
static_assert(offsetof(BrickPlayerController_CanEnterEditor, InUGCType) == 0x000000, "Member 'BrickPlayerController_CanEnterEditor::InUGCType' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanEnterEditor, EntryPoint) == 0x000008, "Member 'BrickPlayerController_CanEnterEditor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanEnterEditor, ReturnValue) == 0x000010, "Member 'BrickPlayerController_CanEnterEditor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanEverBeAdmin
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanEverBeAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanEverBeAdmin) == 0x000001, "Wrong alignment on BrickPlayerController_CanEverBeAdmin");
static_assert(sizeof(BrickPlayerController_CanEverBeAdmin) == 0x000001, "Wrong size on BrickPlayerController_CanEverBeAdmin");
static_assert(offsetof(BrickPlayerController_CanEverBeAdmin, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanEverBeAdmin::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanExplodeVehicle
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanExplodeVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanExplodeVehicle) == 0x000001, "Wrong alignment on BrickPlayerController_CanExplodeVehicle");
static_assert(sizeof(BrickPlayerController_CanExplodeVehicle) == 0x000001, "Wrong size on BrickPlayerController_CanExplodeVehicle");
static_assert(offsetof(BrickPlayerController_CanExplodeVehicle, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanExplodeVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanInteract
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanInteract) == 0x000001, "Wrong alignment on BrickPlayerController_CanInteract");
static_assert(sizeof(BrickPlayerController_CanInteract) == 0x000001, "Wrong size on BrickPlayerController_CanInteract");
static_assert(offsetof(BrickPlayerController_CanInteract, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanInteract::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanJoinTeam
// 0x0002 (0x0002 - 0x0000)
struct BrickPlayerController_CanJoinTeam final
{
public:
	struct FGenericTeamId                         InTeamId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanJoinTeam) == 0x000001, "Wrong alignment on BrickPlayerController_CanJoinTeam");
static_assert(sizeof(BrickPlayerController_CanJoinTeam) == 0x000002, "Wrong size on BrickPlayerController_CanJoinTeam");
static_assert(offsetof(BrickPlayerController_CanJoinTeam, InTeamId) == 0x000000, "Member 'BrickPlayerController_CanJoinTeam::InTeamId' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanJoinTeam, ReturnValue) == 0x000001, "Member 'BrickPlayerController_CanJoinTeam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanOpenVehicleBrowser
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_CanOpenVehicleBrowser final
{
public:
	class AActor*                                 EntryPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanOpenVehicleBrowser) == 0x000008, "Wrong alignment on BrickPlayerController_CanOpenVehicleBrowser");
static_assert(sizeof(BrickPlayerController_CanOpenVehicleBrowser) == 0x000010, "Wrong size on BrickPlayerController_CanOpenVehicleBrowser");
static_assert(offsetof(BrickPlayerController_CanOpenVehicleBrowser, EntryPoint) == 0x000000, "Member 'BrickPlayerController_CanOpenVehicleBrowser::EntryPoint' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanOpenVehicleBrowser, ReturnValue) == 0x000008, "Member 'BrickPlayerController_CanOpenVehicleBrowser::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanPinVehicle
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanPinVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanPinVehicle) == 0x000001, "Wrong alignment on BrickPlayerController_CanPinVehicle");
static_assert(sizeof(BrickPlayerController_CanPinVehicle) == 0x000001, "Wrong size on BrickPlayerController_CanPinVehicle");
static_assert(offsetof(BrickPlayerController_CanPinVehicle, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanPinVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanPossessCharacter
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_CanPossessCharacter final
{
public:
	class ABaseCharacter*                         Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanPossessCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_CanPossessCharacter");
static_assert(sizeof(BrickPlayerController_CanPossessCharacter) == 0x000010, "Wrong size on BrickPlayerController_CanPossessCharacter");
static_assert(offsetof(BrickPlayerController_CanPossessCharacter, Char) == 0x000000, "Member 'BrickPlayerController_CanPossessCharacter::Char' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanPossessCharacter, ReturnValue) == 0x000008, "Member 'BrickPlayerController_CanPossessCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanRecoverAllDummies
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanRecoverAllDummies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanRecoverAllDummies) == 0x000001, "Wrong alignment on BrickPlayerController_CanRecoverAllDummies");
static_assert(sizeof(BrickPlayerController_CanRecoverAllDummies) == 0x000001, "Wrong size on BrickPlayerController_CanRecoverAllDummies");
static_assert(offsetof(BrickPlayerController_CanRecoverAllDummies, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanRecoverAllDummies::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanRestartOnSpot
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanRestartOnSpot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanRestartOnSpot) == 0x000001, "Wrong alignment on BrickPlayerController_CanRestartOnSpot");
static_assert(sizeof(BrickPlayerController_CanRestartOnSpot) == 0x000001, "Wrong size on BrickPlayerController_CanRestartOnSpot");
static_assert(offsetof(BrickPlayerController_CanRestartOnSpot, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanRestartOnSpot::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanRestartVehicle
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanRestartVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanRestartVehicle) == 0x000001, "Wrong alignment on BrickPlayerController_CanRestartVehicle");
static_assert(sizeof(BrickPlayerController_CanRestartVehicle) == 0x000001, "Wrong size on BrickPlayerController_CanRestartVehicle");
static_assert(offsetof(BrickPlayerController_CanRestartVehicle, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanRestartVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanScrapAllVehicles
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanScrapAllVehicles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanScrapAllVehicles) == 0x000001, "Wrong alignment on BrickPlayerController_CanScrapAllVehicles");
static_assert(sizeof(BrickPlayerController_CanScrapAllVehicles) == 0x000001, "Wrong size on BrickPlayerController_CanScrapAllVehicles");
static_assert(offsetof(BrickPlayerController_CanScrapAllVehicles, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanScrapAllVehicles::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanScrapVehicle
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_CanScrapVehicle final
{
public:
	class ABrickVehicle*                          InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPerson;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanScrapVehicle) == 0x000008, "Wrong alignment on BrickPlayerController_CanScrapVehicle");
static_assert(sizeof(BrickPlayerController_CanScrapVehicle) == 0x000010, "Wrong size on BrickPlayerController_CanScrapVehicle");
static_assert(offsetof(BrickPlayerController_CanScrapVehicle, InVehicle) == 0x000000, "Member 'BrickPlayerController_CanScrapVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanScrapVehicle, bInPerson) == 0x000008, "Member 'BrickPlayerController_CanScrapVehicle::bInPerson' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanScrapVehicle, ReturnValue) == 0x000009, "Member 'BrickPlayerController_CanScrapVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanSpawnAnywhere
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanSpawnAnywhere final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanSpawnAnywhere) == 0x000001, "Wrong alignment on BrickPlayerController_CanSpawnAnywhere");
static_assert(sizeof(BrickPlayerController_CanSpawnAnywhere) == 0x000001, "Wrong size on BrickPlayerController_CanSpawnAnywhere");
static_assert(offsetof(BrickPlayerController_CanSpawnAnywhere, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanSpawnAnywhere::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanSpawnDummy
// 0x0002 (0x0002 - 0x0000)
struct BrickPlayerController_CanSpawnDummy final
{
public:
	bool                                          bAtAll;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanSpawnDummy) == 0x000001, "Wrong alignment on BrickPlayerController_CanSpawnDummy");
static_assert(sizeof(BrickPlayerController_CanSpawnDummy) == 0x000002, "Wrong size on BrickPlayerController_CanSpawnDummy");
static_assert(offsetof(BrickPlayerController_CanSpawnDummy, bAtAll) == 0x000000, "Member 'BrickPlayerController_CanSpawnDummy::bAtAll' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanSpawnDummy, ReturnValue) == 0x000001, "Member 'BrickPlayerController_CanSpawnDummy::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanSpawnVehicle
// 0x00F0 (0x00F0 - 0x0000)
struct BrickPlayerController_CanSpawnVehicle final
{
public:
	struct FUGCFileInfo                           FileInfo;                                          // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRemoveCurrent;                                    // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerSpawnResult                            ReturnValue;                                       // 0x00E9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanSpawnVehicle) == 0x000008, "Wrong alignment on BrickPlayerController_CanSpawnVehicle");
static_assert(sizeof(BrickPlayerController_CanSpawnVehicle) == 0x0000F0, "Wrong size on BrickPlayerController_CanSpawnVehicle");
static_assert(offsetof(BrickPlayerController_CanSpawnVehicle, FileInfo) == 0x000000, "Member 'BrickPlayerController_CanSpawnVehicle::FileInfo' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanSpawnVehicle, bRemoveCurrent) == 0x0000E8, "Member 'BrickPlayerController_CanSpawnVehicle::bRemoveCurrent' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanSpawnVehicle, ReturnValue) == 0x0000E9, "Member 'BrickPlayerController_CanSpawnVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanSpectateCharacter
// 0x0010 (0x0010 - 0x0000)
struct BrickPlayerController_CanSpectateCharacter final
{
public:
	class ABaseCharacter*                         InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickPlayerController_CanSpectateCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_CanSpectateCharacter");
static_assert(sizeof(BrickPlayerController_CanSpectateCharacter) == 0x000010, "Wrong size on BrickPlayerController_CanSpectateCharacter");
static_assert(offsetof(BrickPlayerController_CanSpectateCharacter, InCharacter) == 0x000000, "Member 'BrickPlayerController_CanSpectateCharacter::InCharacter' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_CanSpectateCharacter, ReturnValue) == 0x000008, "Member 'BrickPlayerController_CanSpectateCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanTeleportPlayer
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanTeleportPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanTeleportPlayer) == 0x000001, "Wrong alignment on BrickPlayerController_CanTeleportPlayer");
static_assert(sizeof(BrickPlayerController_CanTeleportPlayer) == 0x000001, "Wrong size on BrickPlayerController_CanTeleportPlayer");
static_assert(offsetof(BrickPlayerController_CanTeleportPlayer, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanTeleportPlayer::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanToggleInvincible
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanToggleInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanToggleInvincible) == 0x000001, "Wrong alignment on BrickPlayerController_CanToggleInvincible");
static_assert(sizeof(BrickPlayerController_CanToggleInvincible) == 0x000001, "Wrong size on BrickPlayerController_CanToggleInvincible");
static_assert(offsetof(BrickPlayerController_CanToggleInvincible, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanToggleInvincible::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanUseFreeCam
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanUseFreeCam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanUseFreeCam) == 0x000001, "Wrong alignment on BrickPlayerController_CanUseFreeCam");
static_assert(sizeof(BrickPlayerController_CanUseFreeCam) == 0x000001, "Wrong size on BrickPlayerController_CanUseFreeCam");
static_assert(offsetof(BrickPlayerController_CanUseFreeCam, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanUseFreeCam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanUseSlowMotion
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanUseSlowMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanUseSlowMotion) == 0x000001, "Wrong alignment on BrickPlayerController_CanUseSlowMotion");
static_assert(sizeof(BrickPlayerController_CanUseSlowMotion) == 0x000001, "Wrong size on BrickPlayerController_CanUseSlowMotion");
static_assert(offsetof(BrickPlayerController_CanUseSlowMotion, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanUseSlowMotion::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.CanViewInventory
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_CanViewInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_CanViewInventory) == 0x000001, "Wrong alignment on BrickPlayerController_CanViewInventory");
static_assert(sizeof(BrickPlayerController_CanViewInventory) == 0x000001, "Wrong size on BrickPlayerController_CanViewInventory");
static_assert(offsetof(BrickPlayerController_CanViewInventory, ReturnValue) == 0x000000, "Member 'BrickPlayerController_CanViewInventory::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.FindFocusedHUDIconComponent
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_FindFocusedHUDIconComponent final
{
public:
	class UHUDIconComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_FindFocusedHUDIconComponent) == 0x000008, "Wrong alignment on BrickPlayerController_FindFocusedHUDIconComponent");
static_assert(sizeof(BrickPlayerController_FindFocusedHUDIconComponent) == 0x000008, "Wrong size on BrickPlayerController_FindFocusedHUDIconComponent");
static_assert(offsetof(BrickPlayerController_FindFocusedHUDIconComponent, ReturnValue) == 0x000000, "Member 'BrickPlayerController_FindFocusedHUDIconComponent::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetAccessedInventory
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetAccessedInventory final
{
public:
	class UInventoryComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetAccessedInventory) == 0x000008, "Wrong alignment on BrickPlayerController_GetAccessedInventory");
static_assert(sizeof(BrickPlayerController_GetAccessedInventory) == 0x000008, "Wrong size on BrickPlayerController_GetAccessedInventory");
static_assert(offsetof(BrickPlayerController_GetAccessedInventory, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetAccessedInventory::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetBrickEditor
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetBrickEditor final
{
public:
	class ABrickEditor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetBrickEditor) == 0x000008, "Wrong alignment on BrickPlayerController_GetBrickEditor");
static_assert(sizeof(BrickPlayerController_GetBrickEditor) == 0x000008, "Wrong size on BrickPlayerController_GetBrickEditor");
static_assert(offsetof(BrickPlayerController_GetBrickEditor, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetBrickEditor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetEditorEntryPoint
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetEditorEntryPoint final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetEditorEntryPoint) == 0x000008, "Wrong alignment on BrickPlayerController_GetEditorEntryPoint");
static_assert(sizeof(BrickPlayerController_GetEditorEntryPoint) == 0x000008, "Wrong size on BrickPlayerController_GetEditorEntryPoint");
static_assert(offsetof(BrickPlayerController_GetEditorEntryPoint, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetEditorEntryPoint::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetFreeCamMode
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_GetFreeCamMode final
{
public:
	EFreeCamMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetFreeCamMode) == 0x000001, "Wrong alignment on BrickPlayerController_GetFreeCamMode");
static_assert(sizeof(BrickPlayerController_GetFreeCamMode) == 0x000001, "Wrong size on BrickPlayerController_GetFreeCamMode");
static_assert(offsetof(BrickPlayerController_GetFreeCamMode, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetFreeCamMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetPlayerCharacter final
{
public:
	class ABaseCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetPlayerCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_GetPlayerCharacter");
static_assert(sizeof(BrickPlayerController_GetPlayerCharacter) == 0x000008, "Wrong size on BrickPlayerController_GetPlayerCharacter");
static_assert(offsetof(BrickPlayerController_GetPlayerCharacter, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetPlayerCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetPlayerVehicle
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetPlayerVehicle final
{
public:
	class ABrickVehicle*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetPlayerVehicle) == 0x000008, "Wrong alignment on BrickPlayerController_GetPlayerVehicle");
static_assert(sizeof(BrickPlayerController_GetPlayerVehicle) == 0x000008, "Wrong size on BrickPlayerController_GetPlayerVehicle");
static_assert(offsetof(BrickPlayerController_GetPlayerVehicle, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetPlayerVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetRespawnTimerRemaining
// 0x0004 (0x0004 - 0x0000)
struct BrickPlayerController_GetRespawnTimerRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetRespawnTimerRemaining) == 0x000004, "Wrong alignment on BrickPlayerController_GetRespawnTimerRemaining");
static_assert(sizeof(BrickPlayerController_GetRespawnTimerRemaining) == 0x000004, "Wrong size on BrickPlayerController_GetRespawnTimerRemaining");
static_assert(offsetof(BrickPlayerController_GetRespawnTimerRemaining, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetRespawnTimerRemaining::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetSpectatedCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetSpectatedCharacter final
{
public:
	class ABaseCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetSpectatedCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_GetSpectatedCharacter");
static_assert(sizeof(BrickPlayerController_GetSpectatedCharacter) == 0x000008, "Wrong size on BrickPlayerController_GetSpectatedCharacter");
static_assert(offsetof(BrickPlayerController_GetSpectatedCharacter, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetSpectatedCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetViewedCharacter
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetViewedCharacter final
{
public:
	class ABaseCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetViewedCharacter) == 0x000008, "Wrong alignment on BrickPlayerController_GetViewedCharacter");
static_assert(sizeof(BrickPlayerController_GetViewedCharacter) == 0x000008, "Wrong size on BrickPlayerController_GetViewedCharacter");
static_assert(offsetof(BrickPlayerController_GetViewedCharacter, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetViewedCharacter::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.GetViewedVehicle
// 0x0008 (0x0008 - 0x0000)
struct BrickPlayerController_GetViewedVehicle final
{
public:
	class ABrickVehicle*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_GetViewedVehicle) == 0x000008, "Wrong alignment on BrickPlayerController_GetViewedVehicle");
static_assert(sizeof(BrickPlayerController_GetViewedVehicle) == 0x000008, "Wrong size on BrickPlayerController_GetViewedVehicle");
static_assert(offsetof(BrickPlayerController_GetViewedVehicle, ReturnValue) == 0x000000, "Member 'BrickPlayerController_GetViewedVehicle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.IsAdminByDefault
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_IsAdminByDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_IsAdminByDefault) == 0x000001, "Wrong alignment on BrickPlayerController_IsAdminByDefault");
static_assert(sizeof(BrickPlayerController_IsAdminByDefault) == 0x000001, "Wrong size on BrickPlayerController_IsAdminByDefault");
static_assert(offsetof(BrickPlayerController_IsAdminByDefault, ReturnValue) == 0x000000, "Member 'BrickPlayerController_IsAdminByDefault::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.IsFreeCamFixed
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_IsFreeCamFixed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_IsFreeCamFixed) == 0x000001, "Wrong alignment on BrickPlayerController_IsFreeCamFixed");
static_assert(sizeof(BrickPlayerController_IsFreeCamFixed) == 0x000001, "Wrong size on BrickPlayerController_IsFreeCamFixed");
static_assert(offsetof(BrickPlayerController_IsFreeCamFixed, ReturnValue) == 0x000000, "Member 'BrickPlayerController_IsFreeCamFixed::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.IsInEditor
// 0x0002 (0x0002 - 0x0000)
struct BrickPlayerController_IsInEditor final
{
public:
	EUGCType                                      InUGCType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_IsInEditor) == 0x000001, "Wrong alignment on BrickPlayerController_IsInEditor");
static_assert(sizeof(BrickPlayerController_IsInEditor) == 0x000002, "Wrong size on BrickPlayerController_IsInEditor");
static_assert(offsetof(BrickPlayerController_IsInEditor, InUGCType) == 0x000000, "Member 'BrickPlayerController_IsInEditor::InUGCType' has a wrong offset!");
static_assert(offsetof(BrickPlayerController_IsInEditor, ReturnValue) == 0x000001, "Member 'BrickPlayerController_IsInEditor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.IsInFreeCam
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_IsInFreeCam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_IsInFreeCam) == 0x000001, "Wrong alignment on BrickPlayerController_IsInFreeCam");
static_assert(sizeof(BrickPlayerController_IsInFreeCam) == 0x000001, "Wrong size on BrickPlayerController_IsInFreeCam");
static_assert(offsetof(BrickPlayerController_IsInFreeCam, ReturnValue) == 0x000000, "Member 'BrickPlayerController_IsInFreeCam::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickPlayerController.IsInventoryOpen
// 0x0001 (0x0001 - 0x0000)
struct BrickPlayerController_IsInventoryOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickPlayerController_IsInventoryOpen) == 0x000001, "Wrong alignment on BrickPlayerController_IsInventoryOpen");
static_assert(sizeof(BrickPlayerController_IsInventoryOpen) == 0x000001, "Wrong size on BrickPlayerController_IsInventoryOpen");
static_assert(offsetof(BrickPlayerController_IsInventoryOpen, ReturnValue) == 0x000000, "Member 'BrickPlayerController_IsInventoryOpen::ReturnValue' has a wrong offset!");

// Function BrickRigs.Elevator.Interact_ElevatorDown
// 0x0008 (0x0008 - 0x0000)
struct Elevator_Interact_ElevatorDown final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_Interact_ElevatorDown) == 0x000008, "Wrong alignment on Elevator_Interact_ElevatorDown");
static_assert(sizeof(Elevator_Interact_ElevatorDown) == 0x000008, "Wrong size on Elevator_Interact_ElevatorDown");
static_assert(offsetof(Elevator_Interact_ElevatorDown, PC) == 0x000000, "Member 'Elevator_Interact_ElevatorDown::PC' has a wrong offset!");

// Function BrickRigs.Elevator.Interact_ElevatorUp
// 0x0008 (0x0008 - 0x0000)
struct Elevator_Interact_ElevatorUp final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_Interact_ElevatorUp) == 0x000008, "Wrong alignment on Elevator_Interact_ElevatorUp");
static_assert(sizeof(Elevator_Interact_ElevatorUp) == 0x000008, "Wrong size on Elevator_Interact_ElevatorUp");
static_assert(offsetof(Elevator_Interact_ElevatorUp, PC) == 0x000000, "Member 'Elevator_Interact_ElevatorUp::PC' has a wrong offset!");

// Function BrickRigs.Elevator.Interact_StopElevator
// 0x0008 (0x0008 - 0x0000)
struct Elevator_Interact_StopElevator final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_Interact_StopElevator) == 0x000008, "Wrong alignment on Elevator_Interact_StopElevator");
static_assert(sizeof(Elevator_Interact_StopElevator) == 0x000008, "Wrong size on Elevator_Interact_StopElevator");
static_assert(offsetof(Elevator_Interact_StopElevator, PC) == 0x000000, "Member 'Elevator_Interact_StopElevator::PC' has a wrong offset!");

// Function BrickRigs.Elevator.OnElevatorStateChanged
// 0x000C (0x000C - 0x0000)
struct Elevator_OnElevatorStateChanged final
{
public:
	struct FElevatorState                         NewState;                                          // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_OnElevatorStateChanged) == 0x000004, "Wrong alignment on Elevator_OnElevatorStateChanged");
static_assert(sizeof(Elevator_OnElevatorStateChanged) == 0x00000C, "Wrong size on Elevator_OnElevatorStateChanged");
static_assert(offsetof(Elevator_OnElevatorStateChanged, NewState) == 0x000000, "Member 'Elevator_OnElevatorStateChanged::NewState' has a wrong offset!");

// Function BrickRigs.Elevator.SetElevatorDirection
// 0x0001 (0x0001 - 0x0000)
struct Elevator_SetElevatorDirection final
{
public:
	EElevatorDirection                            Dir;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_SetElevatorDirection) == 0x000001, "Wrong alignment on Elevator_SetElevatorDirection");
static_assert(sizeof(Elevator_SetElevatorDirection) == 0x000001, "Wrong size on Elevator_SetElevatorDirection");
static_assert(offsetof(Elevator_SetElevatorDirection, Dir) == 0x000000, "Member 'Elevator_SetElevatorDirection::Dir' has a wrong offset!");

// Function BrickRigs.Elevator.SetElevatorState
// 0x000C (0x000C - 0x0000)
struct Elevator_SetElevatorState final
{
public:
	struct FElevatorState                         NewState;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_SetElevatorState) == 0x000004, "Wrong alignment on Elevator_SetElevatorState");
static_assert(sizeof(Elevator_SetElevatorState) == 0x00000C, "Wrong size on Elevator_SetElevatorState");
static_assert(offsetof(Elevator_SetElevatorState, NewState) == 0x000000, "Member 'Elevator_SetElevatorState::NewState' has a wrong offset!");

// Function BrickRigs.Elevator.GetInteractionLocation
// 0x0010 (0x0010 - 0x0000)
struct Elevator_GetInteractionLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_GetInteractionLocation) == 0x000004, "Wrong alignment on Elevator_GetInteractionLocation");
static_assert(sizeof(Elevator_GetInteractionLocation) == 0x000010, "Wrong size on Elevator_GetInteractionLocation");
static_assert(offsetof(Elevator_GetInteractionLocation, Index_0) == 0x000000, "Member 'Elevator_GetInteractionLocation::Index_0' has a wrong offset!");
static_assert(offsetof(Elevator_GetInteractionLocation, ReturnValue) == 0x000004, "Member 'Elevator_GetInteractionLocation::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickProjectile.OnRep_SeekingTarget
// 0x0008 (0x0008 - 0x0000)
struct BrickProjectile_OnRep_SeekingTarget final
{
public:
	class AActor*                                 OldTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickProjectile_OnRep_SeekingTarget) == 0x000008, "Wrong alignment on BrickProjectile_OnRep_SeekingTarget");
static_assert(sizeof(BrickProjectile_OnRep_SeekingTarget) == 0x000008, "Wrong size on BrickProjectile_OnRep_SeekingTarget");
static_assert(offsetof(BrickProjectile_OnRep_SeekingTarget, OldTarget) == 0x000000, "Member 'BrickProjectile_OnRep_SeekingTarget::OldTarget' has a wrong offset!");

// Function BrickRigs.WindowManagerWidget.Get
// 0x0010 (0x0010 - 0x0000)
struct WindowManagerWidget_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWindowManagerWidget*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowManagerWidget_Get) == 0x000008, "Wrong alignment on WindowManagerWidget_Get");
static_assert(sizeof(WindowManagerWidget_Get) == 0x000010, "Wrong size on WindowManagerWidget_Get");
static_assert(offsetof(WindowManagerWidget_Get, WorldContextObject) == 0x000000, "Member 'WindowManagerWidget_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WindowManagerWidget_Get, ReturnValue) == 0x000008, "Member 'WindowManagerWidget_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.WindowManagerWidget.AddActiveWidget
// 0x0008 (0x0008 - 0x0000)
struct WindowManagerWidget_AddActiveWidget final
{
public:
	class UMainWidgetBase*                        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowManagerWidget_AddActiveWidget) == 0x000008, "Wrong alignment on WindowManagerWidget_AddActiveWidget");
static_assert(sizeof(WindowManagerWidget_AddActiveWidget) == 0x000008, "Wrong size on WindowManagerWidget_AddActiveWidget");
static_assert(offsetof(WindowManagerWidget_AddActiveWidget, Widget) == 0x000000, "Member 'WindowManagerWidget_AddActiveWidget::Widget' has a wrong offset!");

// Function BrickRigs.WindowManagerWidget.SetMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct WindowManagerWidget_SetMenuOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowManagerWidget_SetMenuOpen) == 0x000001, "Wrong alignment on WindowManagerWidget_SetMenuOpen");
static_assert(sizeof(WindowManagerWidget_SetMenuOpen) == 0x000001, "Wrong size on WindowManagerWidget_SetMenuOpen");
static_assert(offsetof(WindowManagerWidget_SetMenuOpen, bOpen) == 0x000000, "Member 'WindowManagerWidget_SetMenuOpen::bOpen' has a wrong offset!");

// Function BrickRigs.WindowManagerWidget.CanOpenOrCloseMenu
// 0x0002 (0x0002 - 0x0000)
struct WindowManagerWidget_CanOpenOrCloseMenu final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowManagerWidget_CanOpenOrCloseMenu) == 0x000001, "Wrong alignment on WindowManagerWidget_CanOpenOrCloseMenu");
static_assert(sizeof(WindowManagerWidget_CanOpenOrCloseMenu) == 0x000002, "Wrong size on WindowManagerWidget_CanOpenOrCloseMenu");
static_assert(offsetof(WindowManagerWidget_CanOpenOrCloseMenu, bOpen) == 0x000000, "Member 'WindowManagerWidget_CanOpenOrCloseMenu::bOpen' has a wrong offset!");
static_assert(offsetof(WindowManagerWidget_CanOpenOrCloseMenu, ReturnValue) == 0x000001, "Member 'WindowManagerWidget_CanOpenOrCloseMenu::ReturnValue' has a wrong offset!");

// Function BrickRigs.WindowManagerWidget.IsMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct WindowManagerWidget_IsMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowManagerWidget_IsMenuOpen) == 0x000001, "Wrong alignment on WindowManagerWidget_IsMenuOpen");
static_assert(sizeof(WindowManagerWidget_IsMenuOpen) == 0x000001, "Wrong size on WindowManagerWidget_IsMenuOpen");
static_assert(offsetof(WindowManagerWidget_IsMenuOpen, ReturnValue) == 0x000000, "Member 'WindowManagerWidget_IsMenuOpen::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickScrollBox.SetSlotSpacingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickScrollBox_SetSlotSpacingStyle final
{
public:
	EBrickUISpacingStyle                          NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickScrollBox_SetSlotSpacingStyle) == 0x000001, "Wrong alignment on BrickScrollBox_SetSlotSpacingStyle");
static_assert(sizeof(BrickScrollBox_SetSlotSpacingStyle) == 0x000001, "Wrong size on BrickScrollBox_SetSlotSpacingStyle");
static_assert(offsetof(BrickScrollBox_SetSlotSpacingStyle, NewStyle) == 0x000000, "Member 'BrickScrollBox_SetSlotSpacingStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.OnTextChanged
// 0x0020 (0x0020 - 0x0000)
struct BrickSliderWidget_OnTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickSliderWidget_OnTextChanged) == 0x000008, "Wrong alignment on BrickSliderWidget_OnTextChanged");
static_assert(sizeof(BrickSliderWidget_OnTextChanged) == 0x000020, "Wrong size on BrickSliderWidget_OnTextChanged");
static_assert(offsetof(BrickSliderWidget_OnTextChanged, NewText) == 0x000000, "Member 'BrickSliderWidget_OnTextChanged::NewText' has a wrong offset!");
static_assert(offsetof(BrickSliderWidget_OnTextChanged, EventType) == 0x000018, "Member 'BrickSliderWidget_OnTextChanged::EventType' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetCustomTextFormat
// 0x0018 (0x0018 - 0x0000)
struct BrickSliderWidget_SetCustomTextFormat final
{
public:
	class FText                                   InFormat;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetCustomTextFormat) == 0x000008, "Wrong alignment on BrickSliderWidget_SetCustomTextFormat");
static_assert(sizeof(BrickSliderWidget_SetCustomTextFormat) == 0x000018, "Wrong size on BrickSliderWidget_SetCustomTextFormat");
static_assert(offsetof(BrickSliderWidget_SetCustomTextFormat, InFormat) == 0x000000, "Member 'BrickSliderWidget_SetCustomTextFormat::InFormat' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetGridSnapMode
// 0x0001 (0x0001 - 0x0000)
struct BrickSliderWidget_SetGridSnapMode final
{
public:
	EBrickSliderGridSnapMode                      NewMode;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetGridSnapMode) == 0x000001, "Wrong alignment on BrickSliderWidget_SetGridSnapMode");
static_assert(sizeof(BrickSliderWidget_SetGridSnapMode) == 0x000001, "Wrong size on BrickSliderWidget_SetGridSnapMode");
static_assert(offsetof(BrickSliderWidget_SetGridSnapMode, NewMode) == 0x000000, "Member 'BrickSliderWidget_SetGridSnapMode::NewMode' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetIsMarquee
// 0x0001 (0x0001 - 0x0000)
struct BrickSliderWidget_SetIsMarquee final
{
public:
	bool                                          bInMarquee;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetIsMarquee) == 0x000001, "Wrong alignment on BrickSliderWidget_SetIsMarquee");
static_assert(sizeof(BrickSliderWidget_SetIsMarquee) == 0x000001, "Wrong size on BrickSliderWidget_SetIsMarquee");
static_assert(offsetof(BrickSliderWidget_SetIsMarquee, bInMarquee) == 0x000000, "Member 'BrickSliderWidget_SetIsMarquee::bInMarquee' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct BrickSliderWidget_SetIsReadOnly final
{
public:
	bool                                          bInReadOnly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetIsReadOnly) == 0x000001, "Wrong alignment on BrickSliderWidget_SetIsReadOnly");
static_assert(sizeof(BrickSliderWidget_SetIsReadOnly) == 0x000001, "Wrong size on BrickSliderWidget_SetIsReadOnly");
static_assert(offsetof(BrickSliderWidget_SetIsReadOnly, bInReadOnly) == 0x000000, "Member 'BrickSliderWidget_SetIsReadOnly::bInReadOnly' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetMaxFractionalDigits
// 0x0004 (0x0004 - 0x0000)
struct BrickSliderWidget_SetMaxFractionalDigits final
{
public:
	int32                                         InMaxDigits;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetMaxFractionalDigits) == 0x000004, "Wrong alignment on BrickSliderWidget_SetMaxFractionalDigits");
static_assert(sizeof(BrickSliderWidget_SetMaxFractionalDigits) == 0x000004, "Wrong size on BrickSliderWidget_SetMaxFractionalDigits");
static_assert(offsetof(BrickSliderWidget_SetMaxFractionalDigits, InMaxDigits) == 0x000000, "Member 'BrickSliderWidget_SetMaxFractionalDigits::InMaxDigits' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetValue
// 0x0004 (0x0004 - 0x0000)
struct BrickSliderWidget_SetValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetValue) == 0x000004, "Wrong alignment on BrickSliderWidget_SetValue");
static_assert(sizeof(BrickSliderWidget_SetValue) == 0x000004, "Wrong size on BrickSliderWidget_SetValue");
static_assert(offsetof(BrickSliderWidget_SetValue, NewValue) == 0x000000, "Member 'BrickSliderWidget_SetValue::NewValue' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetValueRange
// 0x0008 (0x0008 - 0x0000)
struct BrickSliderWidget_SetValueRange final
{
public:
	float                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetValueRange) == 0x000004, "Wrong alignment on BrickSliderWidget_SetValueRange");
static_assert(sizeof(BrickSliderWidget_SetValueRange) == 0x000008, "Wrong size on BrickSliderWidget_SetValueRange");
static_assert(offsetof(BrickSliderWidget_SetValueRange, InMinValue) == 0x000000, "Member 'BrickSliderWidget_SetValueRange::InMinValue' has a wrong offset!");
static_assert(offsetof(BrickSliderWidget_SetValueRange, InMaxValue) == 0x000004, "Member 'BrickSliderWidget_SetValueRange::InMaxValue' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.SetValueType
// 0x0001 (0x0001 - 0x0000)
struct BrickSliderWidget_SetValueType final
{
public:
	ENumericValueType                             InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_SetValueType) == 0x000001, "Wrong alignment on BrickSliderWidget_SetValueType");
static_assert(sizeof(BrickSliderWidget_SetValueType) == 0x000001, "Wrong size on BrickSliderWidget_SetValueType");
static_assert(offsetof(BrickSliderWidget_SetValueType, InType) == 0x000000, "Member 'BrickSliderWidget_SetValueType::InType' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.UpdateIsDragging
// 0x0001 (0x0001 - 0x0000)
struct BrickSliderWidget_UpdateIsDragging final
{
public:
	bool                                          bIsDragging;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_UpdateIsDragging) == 0x000001, "Wrong alignment on BrickSliderWidget_UpdateIsDragging");
static_assert(sizeof(BrickSliderWidget_UpdateIsDragging) == 0x000001, "Wrong size on BrickSliderWidget_UpdateIsDragging");
static_assert(offsetof(BrickSliderWidget_UpdateIsDragging, bIsDragging) == 0x000000, "Member 'BrickSliderWidget_UpdateIsDragging::bIsDragging' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.UpdateSliderPosition
// 0x0004 (0x0004 - 0x0000)
struct BrickSliderWidget_UpdateSliderPosition final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_UpdateSliderPosition) == 0x000004, "Wrong alignment on BrickSliderWidget_UpdateSliderPosition");
static_assert(sizeof(BrickSliderWidget_UpdateSliderPosition) == 0x000004, "Wrong size on BrickSliderWidget_UpdateSliderPosition");
static_assert(offsetof(BrickSliderWidget_UpdateSliderPosition, NewValue) == 0x000000, "Member 'BrickSliderWidget_UpdateSliderPosition::NewValue' has a wrong offset!");

// Function BrickRigs.BrickSliderWidget.GetValue
// 0x0004 (0x0004 - 0x0000)
struct BrickSliderWidget_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickSliderWidget_GetValue) == 0x000004, "Wrong alignment on BrickSliderWidget_GetValue");
static_assert(sizeof(BrickSliderWidget_GetValue) == 0x000004, "Wrong size on BrickSliderWidget_GetValue");
static_assert(offsetof(BrickSliderWidget_GetValue, ReturnValue) == 0x000000, "Member 'BrickSliderWidget_GetValue::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.ColorToHex
// 0x0028 (0x0028 - 0x0000)
struct BrickStatics_ColorToHex final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAlpha;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_ColorToHex) == 0x000008, "Wrong alignment on BrickStatics_ColorToHex");
static_assert(sizeof(BrickStatics_ColorToHex) == 0x000028, "Wrong size on BrickStatics_ColorToHex");
static_assert(offsetof(BrickStatics_ColorToHex, Color) == 0x000000, "Member 'BrickStatics_ColorToHex::Color' has a wrong offset!");
static_assert(offsetof(BrickStatics_ColorToHex, bIncludeAlpha) == 0x000010, "Member 'BrickStatics_ColorToHex::bIncludeAlpha' has a wrong offset!");
static_assert(offsetof(BrickStatics_ColorToHex, ReturnValue) == 0x000018, "Member 'BrickStatics_ColorToHex::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.CreateUniqueNetId
// 0x0040 (0x0040 - 0x0000)
struct BrickStatics_CreateUniqueNetId final
{
public:
	class FName                                   OSSName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_CreateUniqueNetId) == 0x000008, "Wrong alignment on BrickStatics_CreateUniqueNetId");
static_assert(sizeof(BrickStatics_CreateUniqueNetId) == 0x000040, "Wrong size on BrickStatics_CreateUniqueNetId");
static_assert(offsetof(BrickStatics_CreateUniqueNetId, OSSName) == 0x000000, "Member 'BrickStatics_CreateUniqueNetId::OSSName' has a wrong offset!");
static_assert(offsetof(BrickStatics_CreateUniqueNetId, Str) == 0x000008, "Member 'BrickStatics_CreateUniqueNetId::Str' has a wrong offset!");
static_assert(offsetof(BrickStatics_CreateUniqueNetId, ReturnValue) == 0x000018, "Member 'BrickStatics_CreateUniqueNetId::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.ExtinguishActor
// 0x008C (0x008C - 0x0000)
struct BrickStatics_ExtinguishActor final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickStatics_ExtinguishActor) == 0x000004, "Wrong alignment on BrickStatics_ExtinguishActor");
static_assert(sizeof(BrickStatics_ExtinguishActor) == 0x00008C, "Wrong size on BrickStatics_ExtinguishActor");
static_assert(offsetof(BrickStatics_ExtinguishActor, Hit) == 0x000000, "Member 'BrickStatics_ExtinguishActor::Hit' has a wrong offset!");
static_assert(offsetof(BrickStatics_ExtinguishActor, ReturnValue) == 0x000088, "Member 'BrickStatics_ExtinguishActor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.GetPlayerUniqueNetId
// 0x0030 (0x0030 - 0x0000)
struct BrickStatics_GetPlayerUniqueNetId final
{
public:
	const class APlayerController*                PC;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_GetPlayerUniqueNetId) == 0x000008, "Wrong alignment on BrickStatics_GetPlayerUniqueNetId");
static_assert(sizeof(BrickStatics_GetPlayerUniqueNetId) == 0x000030, "Wrong size on BrickStatics_GetPlayerUniqueNetId");
static_assert(offsetof(BrickStatics_GetPlayerUniqueNetId, PC) == 0x000000, "Member 'BrickStatics_GetPlayerUniqueNetId::PC' has a wrong offset!");
static_assert(offsetof(BrickStatics_GetPlayerUniqueNetId, ReturnValue) == 0x000008, "Member 'BrickStatics_GetPlayerUniqueNetId::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct BrickStatics_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_GetProjectVersion) == 0x000008, "Wrong alignment on BrickStatics_GetProjectVersion");
static_assert(sizeof(BrickStatics_GetProjectVersion) == 0x000010, "Wrong size on BrickStatics_GetProjectVersion");
static_assert(offsetof(BrickStatics_GetProjectVersion, ReturnValue) == 0x000000, "Member 'BrickStatics_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.GetScalableBrickConnectorSpacingAxis
// 0x0004 (0x0004 - 0x0000)
struct BrickStatics_GetScalableBrickConnectorSpacingAxis final
{
public:
	struct FScalableBrickConnectorSpacing         ConnectorSpacing;                                  // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EFluAxisSigned                                Axis;                                              // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectorSpacing                             ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_GetScalableBrickConnectorSpacingAxis) == 0x000002, "Wrong alignment on BrickStatics_GetScalableBrickConnectorSpacingAxis");
static_assert(sizeof(BrickStatics_GetScalableBrickConnectorSpacingAxis) == 0x000004, "Wrong size on BrickStatics_GetScalableBrickConnectorSpacingAxis");
static_assert(offsetof(BrickStatics_GetScalableBrickConnectorSpacingAxis, ConnectorSpacing) == 0x000000, "Member 'BrickStatics_GetScalableBrickConnectorSpacingAxis::ConnectorSpacing' has a wrong offset!");
static_assert(offsetof(BrickStatics_GetScalableBrickConnectorSpacingAxis, Axis) == 0x000002, "Member 'BrickStatics_GetScalableBrickConnectorSpacingAxis::Axis' has a wrong offset!");
static_assert(offsetof(BrickStatics_GetScalableBrickConnectorSpacingAxis, ReturnValue) == 0x000003, "Member 'BrickStatics_GetScalableBrickConnectorSpacingAxis::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.HexToColor
// 0x0020 (0x0020 - 0x0000)
struct BrickStatics_HexToColor final
{
public:
	class FString                                 Hex;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_HexToColor) == 0x000008, "Wrong alignment on BrickStatics_HexToColor");
static_assert(sizeof(BrickStatics_HexToColor) == 0x000020, "Wrong size on BrickStatics_HexToColor");
static_assert(offsetof(BrickStatics_HexToColor, Hex) == 0x000000, "Member 'BrickStatics_HexToColor::Hex' has a wrong offset!");
static_assert(offsetof(BrickStatics_HexToColor, ReturnValue) == 0x000010, "Member 'BrickStatics_HexToColor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.IsModdedAsset
// 0x0010 (0x0010 - 0x0000)
struct BrickStatics_IsModdedAsset final
{
public:
	const class UObject*                          Asset;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickStatics_IsModdedAsset) == 0x000008, "Wrong alignment on BrickStatics_IsModdedAsset");
static_assert(sizeof(BrickStatics_IsModdedAsset) == 0x000010, "Wrong size on BrickStatics_IsModdedAsset");
static_assert(offsetof(BrickStatics_IsModdedAsset, Asset) == 0x000000, "Member 'BrickStatics_IsModdedAsset::Asset' has a wrong offset!");
static_assert(offsetof(BrickStatics_IsModdedAsset, ReturnValue) == 0x000008, "Member 'BrickStatics_IsModdedAsset::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.SetActorOnFire
// 0x00A0 (0x00A0 - 0x0000)
struct BrickStatics_SetActorOnFire final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class APawn*                                  Instigator;                                        // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickStatics_SetActorOnFire) == 0x000008, "Wrong alignment on BrickStatics_SetActorOnFire");
static_assert(sizeof(BrickStatics_SetActorOnFire) == 0x0000A0, "Wrong size on BrickStatics_SetActorOnFire");
static_assert(offsetof(BrickStatics_SetActorOnFire, Hit) == 0x000000, "Member 'BrickStatics_SetActorOnFire::Hit' has a wrong offset!");
static_assert(offsetof(BrickStatics_SetActorOnFire, Instigator) == 0x000088, "Member 'BrickStatics_SetActorOnFire::Instigator' has a wrong offset!");
static_assert(offsetof(BrickStatics_SetActorOnFire, DamageCauser) == 0x000090, "Member 'BrickStatics_SetActorOnFire::DamageCauser' has a wrong offset!");
static_assert(offsetof(BrickStatics_SetActorOnFire, ReturnValue) == 0x000098, "Member 'BrickStatics_SetActorOnFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.SetScalableBrickConnectorSpacingAxis
// 0x0004 (0x0004 - 0x0000)
struct BrickStatics_SetScalableBrickConnectorSpacingAxis final
{
public:
	struct FScalableBrickConnectorSpacing         ConnectorSpacing;                                  // 0x0000(0x0002)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EFluAxisSigned                                Axis;                                              // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectorSpacing                             NewSpacing;                                        // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_SetScalableBrickConnectorSpacingAxis) == 0x000002, "Wrong alignment on BrickStatics_SetScalableBrickConnectorSpacingAxis");
static_assert(sizeof(BrickStatics_SetScalableBrickConnectorSpacingAxis) == 0x000004, "Wrong size on BrickStatics_SetScalableBrickConnectorSpacingAxis");
static_assert(offsetof(BrickStatics_SetScalableBrickConnectorSpacingAxis, ConnectorSpacing) == 0x000000, "Member 'BrickStatics_SetScalableBrickConnectorSpacingAxis::ConnectorSpacing' has a wrong offset!");
static_assert(offsetof(BrickStatics_SetScalableBrickConnectorSpacingAxis, Axis) == 0x000002, "Member 'BrickStatics_SetScalableBrickConnectorSpacingAxis::Axis' has a wrong offset!");
static_assert(offsetof(BrickStatics_SetScalableBrickConnectorSpacingAxis, NewSpacing) == 0x000003, "Member 'BrickStatics_SetScalableBrickConnectorSpacingAxis::NewSpacing' has a wrong offset!");

// Function BrickRigs.BrickStatics.ShowPlayerProfileUI
// 0x0038 (0x0038 - 0x0000)
struct BrickStatics_ShowPlayerProfileUI final
{
public:
	const class APlayerController*                OwnPC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickStatics_ShowPlayerProfileUI) == 0x000008, "Wrong alignment on BrickStatics_ShowPlayerProfileUI");
static_assert(sizeof(BrickStatics_ShowPlayerProfileUI) == 0x000038, "Wrong size on BrickStatics_ShowPlayerProfileUI");
static_assert(offsetof(BrickStatics_ShowPlayerProfileUI, OwnPC) == 0x000000, "Member 'BrickStatics_ShowPlayerProfileUI::OwnPC' has a wrong offset!");
static_assert(offsetof(BrickStatics_ShowPlayerProfileUI, PlayerId) == 0x000008, "Member 'BrickStatics_ShowPlayerProfileUI::PlayerId' has a wrong offset!");
static_assert(offsetof(BrickStatics_ShowPlayerProfileUI, ReturnValue) == 0x000030, "Member 'BrickStatics_ShowPlayerProfileUI::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.SpawnExplosion
// 0x0050 (0x0050 - 0x0000)
struct BrickStatics_SpawnExplosion final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UExplosiveMaterial>         ExplosiveMaterial;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            ComponentsToIgnore;                                // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_SpawnExplosion) == 0x000008, "Wrong alignment on BrickStatics_SpawnExplosion");
static_assert(sizeof(BrickStatics_SpawnExplosion) == 0x000050, "Wrong size on BrickStatics_SpawnExplosion");
static_assert(offsetof(BrickStatics_SpawnExplosion, WorldContextObject) == 0x000000, "Member 'BrickStatics_SpawnExplosion::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, ExplosiveMaterial) == 0x000008, "Member 'BrickStatics_SpawnExplosion::ExplosiveMaterial' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, Volume) == 0x000010, "Member 'BrickStatics_SpawnExplosion::Volume' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, Location) == 0x000014, "Member 'BrickStatics_SpawnExplosion::Location' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, Rotation) == 0x000020, "Member 'BrickStatics_SpawnExplosion::Rotation' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, Instigator) == 0x000030, "Member 'BrickStatics_SpawnExplosion::Instigator' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, DamageCauser) == 0x000038, "Member 'BrickStatics_SpawnExplosion::DamageCauser' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpawnExplosion, ComponentsToIgnore) == 0x000040, "Member 'BrickStatics_SpawnExplosion::ComponentsToIgnore' has a wrong offset!");

// Function BrickRigs.BrickStatics.SpreadFire
// 0x0070 (0x0070 - 0x0000)
struct BrickStatics_SpreadFire final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoundsMin;                                         // 0x0040(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsMax;                                         // 0x004C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadDistance;                                    // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadProbability;                                 // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickStatics_SpreadFire) == 0x000010, "Wrong alignment on BrickStatics_SpreadFire");
static_assert(sizeof(BrickStatics_SpreadFire) == 0x000070, "Wrong size on BrickStatics_SpreadFire");
static_assert(offsetof(BrickStatics_SpreadFire, WorldContextObject) == 0x000000, "Member 'BrickStatics_SpreadFire::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpreadFire, Transform) == 0x000010, "Member 'BrickStatics_SpreadFire::Transform' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpreadFire, BoundsMin) == 0x000040, "Member 'BrickStatics_SpreadFire::BoundsMin' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpreadFire, BoundsMax) == 0x00004C, "Member 'BrickStatics_SpreadFire::BoundsMax' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpreadFire, SpreadDistance) == 0x000058, "Member 'BrickStatics_SpreadFire::SpreadDistance' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpreadFire, SpreadProbability) == 0x00005C, "Member 'BrickStatics_SpreadFire::SpreadProbability' has a wrong offset!");
static_assert(offsetof(BrickStatics_SpreadFire, ReturnValue) == 0x000060, "Member 'BrickStatics_SpreadFire::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickStatics.UniqueNetIdToString
// 0x0038 (0x0038 - 0x0000)
struct BrickStatics_UniqueNetIdToString final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickStatics_UniqueNetIdToString) == 0x000008, "Wrong alignment on BrickStatics_UniqueNetIdToString");
static_assert(sizeof(BrickStatics_UniqueNetIdToString) == 0x000038, "Wrong size on BrickStatics_UniqueNetIdToString");
static_assert(offsetof(BrickStatics_UniqueNetIdToString, UniqueNetId) == 0x000000, "Member 'BrickStatics_UniqueNetIdToString::UniqueNetId' has a wrong offset!");
static_assert(offsetof(BrickStatics_UniqueNetIdToString, ReturnValue) == 0x000028, "Member 'BrickStatics_UniqueNetIdToString::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct BrickTextBoxWidget_OnTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_OnTextChanged) == 0x000008, "Wrong alignment on BrickTextBoxWidget_OnTextChanged");
static_assert(sizeof(BrickTextBoxWidget_OnTextChanged) == 0x000018, "Wrong size on BrickTextBoxWidget_OnTextChanged");
static_assert(offsetof(BrickTextBoxWidget_OnTextChanged, NewText) == 0x000000, "Member 'BrickTextBoxWidget_OnTextChanged::NewText' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetAllowMultiLine
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetAllowMultiLine final
{
public:
	bool                                          bInAllowMultiLine;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetAllowMultiLine) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetAllowMultiLine");
static_assert(sizeof(BrickTextBoxWidget_SetAllowMultiLine) == 0x000001, "Wrong size on BrickTextBoxWidget_SetAllowMultiLine");
static_assert(offsetof(BrickTextBoxWidget_SetAllowMultiLine, bInAllowMultiLine) == 0x000000, "Member 'BrickTextBoxWidget_SetAllowMultiLine::bInAllowMultiLine' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetBrushStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetBrushStyle final
{
public:
	EBrickUIBrushStyle                            InBrushStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetBrushStyle) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetBrushStyle");
static_assert(sizeof(BrickTextBoxWidget_SetBrushStyle) == 0x000001, "Wrong size on BrickTextBoxWidget_SetBrushStyle");
static_assert(offsetof(BrickTextBoxWidget_SetBrushStyle, InBrushStyle) == 0x000000, "Member 'BrickTextBoxWidget_SetBrushStyle::InBrushStyle' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetColorStyle) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetColorStyle");
static_assert(sizeof(BrickTextBoxWidget_SetColorStyle) == 0x000001, "Wrong size on BrickTextBoxWidget_SetColorStyle");
static_assert(offsetof(BrickTextBoxWidget_SetColorStyle, InColorStyle) == 0x000000, "Member 'BrickTextBoxWidget_SetColorStyle::InColorStyle' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetCustomFocus
// 0x0002 (0x0002 - 0x0000)
struct BrickTextBoxWidget_SetCustomFocus final
{
public:
	bool                                          bNewUseCustomFocus;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewFocused;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetCustomFocus) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetCustomFocus");
static_assert(sizeof(BrickTextBoxWidget_SetCustomFocus) == 0x000002, "Wrong size on BrickTextBoxWidget_SetCustomFocus");
static_assert(offsetof(BrickTextBoxWidget_SetCustomFocus, bNewUseCustomFocus) == 0x000000, "Member 'BrickTextBoxWidget_SetCustomFocus::bNewUseCustomFocus' has a wrong offset!");
static_assert(offsetof(BrickTextBoxWidget_SetCustomFocus, bNewFocused) == 0x000001, "Member 'BrickTextBoxWidget_SetCustomFocus::bNewFocused' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct BrickTextBoxWidget_SetHintText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetHintText) == 0x000008, "Wrong alignment on BrickTextBoxWidget_SetHintText");
static_assert(sizeof(BrickTextBoxWidget_SetHintText) == 0x000018, "Wrong size on BrickTextBoxWidget_SetHintText");
static_assert(offsetof(BrickTextBoxWidget_SetHintText, InText) == 0x000000, "Member 'BrickTextBoxWidget_SetHintText::InText' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetIsMarquee
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetIsMarquee final
{
public:
	bool                                          bNewMarquee;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetIsMarquee) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetIsMarquee");
static_assert(sizeof(BrickTextBoxWidget_SetIsMarquee) == 0x000001, "Wrong size on BrickTextBoxWidget_SetIsMarquee");
static_assert(offsetof(BrickTextBoxWidget_SetIsMarquee, bNewMarquee) == 0x000000, "Member 'BrickTextBoxWidget_SetIsMarquee::bNewMarquee' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetIsPassword
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetIsPassword final
{
public:
	bool                                          bNewIsPassword;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetIsPassword) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetIsPassword");
static_assert(sizeof(BrickTextBoxWidget_SetIsPassword) == 0x000001, "Wrong size on BrickTextBoxWidget_SetIsPassword");
static_assert(offsetof(BrickTextBoxWidget_SetIsPassword, bNewIsPassword) == 0x000000, "Member 'BrickTextBoxWidget_SetIsPassword::bNewIsPassword' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetIsReadOnly final
{
public:
	bool                                          bNewReadOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetIsReadOnly) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetIsReadOnly");
static_assert(sizeof(BrickTextBoxWidget_SetIsReadOnly) == 0x000001, "Wrong size on BrickTextBoxWidget_SetIsReadOnly");
static_assert(offsetof(BrickTextBoxWidget_SetIsReadOnly, bNewReadOnly) == 0x000000, "Member 'BrickTextBoxWidget_SetIsReadOnly::bNewReadOnly' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetJustification final
{
public:
	ETextJustify                                  NewJustification;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetJustification) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetJustification");
static_assert(sizeof(BrickTextBoxWidget_SetJustification) == 0x000001, "Wrong size on BrickTextBoxWidget_SetJustification");
static_assert(offsetof(BrickTextBoxWidget_SetJustification, NewJustification) == 0x000000, "Member 'BrickTextBoxWidget_SetJustification::NewJustification' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetMaxTextLength
// 0x0004 (0x0004 - 0x0000)
struct BrickTextBoxWidget_SetMaxTextLength final
{
public:
	int32                                         InMaxLength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetMaxTextLength) == 0x000004, "Wrong alignment on BrickTextBoxWidget_SetMaxTextLength");
static_assert(sizeof(BrickTextBoxWidget_SetMaxTextLength) == 0x000004, "Wrong size on BrickTextBoxWidget_SetMaxTextLength");
static_assert(offsetof(BrickTextBoxWidget_SetMaxTextLength, InMaxLength) == 0x000000, "Member 'BrickTextBoxWidget_SetMaxTextLength::InMaxLength' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetPaddingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetPaddingStyle final
{
public:
	EBrickUIPaddingStyle                          InPaddingStyle;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetPaddingStyle) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetPaddingStyle");
static_assert(sizeof(BrickTextBoxWidget_SetPaddingStyle) == 0x000001, "Wrong size on BrickTextBoxWidget_SetPaddingStyle");
static_assert(offsetof(BrickTextBoxWidget_SetPaddingStyle, InPaddingStyle) == 0x000000, "Member 'BrickTextBoxWidget_SetPaddingStyle::InPaddingStyle' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetPasswordVisible
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetPasswordVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetPasswordVisible) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetPasswordVisible");
static_assert(sizeof(BrickTextBoxWidget_SetPasswordVisible) == 0x000001, "Wrong size on BrickTextBoxWidget_SetPasswordVisible");
static_assert(offsetof(BrickTextBoxWidget_SetPasswordVisible, bNewVisible) == 0x000000, "Member 'BrickTextBoxWidget_SetPasswordVisible::bNewVisible' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetText
// 0x0020 (0x0020 - 0x0000)
struct BrickTextBoxWidget_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bValidateText;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BrickTextBoxWidget_SetText) == 0x000008, "Wrong alignment on BrickTextBoxWidget_SetText");
static_assert(sizeof(BrickTextBoxWidget_SetText) == 0x000020, "Wrong size on BrickTextBoxWidget_SetText");
static_assert(offsetof(BrickTextBoxWidget_SetText, InText) == 0x000000, "Member 'BrickTextBoxWidget_SetText::InText' has a wrong offset!");
static_assert(offsetof(BrickTextBoxWidget_SetText, bValidateText) == 0x000018, "Member 'BrickTextBoxWidget_SetText::bValidateText' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.SetTextStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_SetTextStyle final
{
public:
	EBrickUITextStyle                             InTextStyle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_SetTextStyle) == 0x000001, "Wrong alignment on BrickTextBoxWidget_SetTextStyle");
static_assert(sizeof(BrickTextBoxWidget_SetTextStyle) == 0x000001, "Wrong size on BrickTextBoxWidget_SetTextStyle");
static_assert(offsetof(BrickTextBoxWidget_SetTextStyle, InTextStyle) == 0x000000, "Member 'BrickTextBoxWidget_SetTextStyle::InTextStyle' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.StartTyping
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_StartTyping final
{
public:
	bool                                          bSelectAllText;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_StartTyping) == 0x000001, "Wrong alignment on BrickTextBoxWidget_StartTyping");
static_assert(sizeof(BrickTextBoxWidget_StartTyping) == 0x000001, "Wrong size on BrickTextBoxWidget_StartTyping");
static_assert(offsetof(BrickTextBoxWidget_StartTyping, bSelectAllText) == 0x000000, "Member 'BrickTextBoxWidget_StartTyping::bSelectAllText' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.UpdateIsPassword
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_UpdateIsPassword final
{
public:
	bool                                          bNewIsPassword;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_UpdateIsPassword) == 0x000001, "Wrong alignment on BrickTextBoxWidget_UpdateIsPassword");
static_assert(sizeof(BrickTextBoxWidget_UpdateIsPassword) == 0x000001, "Wrong size on BrickTextBoxWidget_UpdateIsPassword");
static_assert(offsetof(BrickTextBoxWidget_UpdateIsPassword, bNewIsPassword) == 0x000000, "Member 'BrickTextBoxWidget_UpdateIsPassword::bNewIsPassword' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.UpdatePasswordVisible
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_UpdatePasswordVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_UpdatePasswordVisible) == 0x000001, "Wrong alignment on BrickTextBoxWidget_UpdatePasswordVisible");
static_assert(sizeof(BrickTextBoxWidget_UpdatePasswordVisible) == 0x000001, "Wrong size on BrickTextBoxWidget_UpdatePasswordVisible");
static_assert(offsetof(BrickTextBoxWidget_UpdatePasswordVisible, bNewVisible) == 0x000000, "Member 'BrickTextBoxWidget_UpdatePasswordVisible::bNewVisible' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.GetText
// 0x0018 (0x0018 - 0x0000)
struct BrickTextBoxWidget_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_GetText) == 0x000008, "Wrong alignment on BrickTextBoxWidget_GetText");
static_assert(sizeof(BrickTextBoxWidget_GetText) == 0x000018, "Wrong size on BrickTextBoxWidget_GetText");
static_assert(offsetof(BrickTextBoxWidget_GetText, ReturnValue) == 0x000000, "Member 'BrickTextBoxWidget_GetText::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.IsMarquee
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_IsMarquee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_IsMarquee) == 0x000001, "Wrong alignment on BrickTextBoxWidget_IsMarquee");
static_assert(sizeof(BrickTextBoxWidget_IsMarquee) == 0x000001, "Wrong size on BrickTextBoxWidget_IsMarquee");
static_assert(offsetof(BrickTextBoxWidget_IsMarquee, ReturnValue) == 0x000000, "Member 'BrickTextBoxWidget_IsMarquee::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.IsPasswordVisible
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_IsPasswordVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_IsPasswordVisible) == 0x000001, "Wrong alignment on BrickTextBoxWidget_IsPasswordVisible");
static_assert(sizeof(BrickTextBoxWidget_IsPasswordVisible) == 0x000001, "Wrong size on BrickTextBoxWidget_IsPasswordVisible");
static_assert(offsetof(BrickTextBoxWidget_IsPasswordVisible, ReturnValue) == 0x000000, "Member 'BrickTextBoxWidget_IsPasswordVisible::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.IsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_IsReadOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_IsReadOnly) == 0x000001, "Wrong alignment on BrickTextBoxWidget_IsReadOnly");
static_assert(sizeof(BrickTextBoxWidget_IsReadOnly) == 0x000001, "Wrong size on BrickTextBoxWidget_IsReadOnly");
static_assert(offsetof(BrickTextBoxWidget_IsReadOnly, ReturnValue) == 0x000000, "Member 'BrickTextBoxWidget_IsReadOnly::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickTextBoxWidget.IsTyping
// 0x0001 (0x0001 - 0x0000)
struct BrickTextBoxWidget_IsTyping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickTextBoxWidget_IsTyping) == 0x000001, "Wrong alignment on BrickTextBoxWidget_IsTyping");
static_assert(sizeof(BrickTextBoxWidget_IsTyping) == 0x000001, "Wrong size on BrickTextBoxWidget_IsTyping");
static_assert(offsetof(BrickTextBoxWidget_IsTyping, ReturnValue) == 0x000000, "Member 'BrickTextBoxWidget_IsTyping::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.FormatRichTextStyle
// 0x0038 (0x0038 - 0x0000)
struct BrickUIStyle_FormatRichTextStyle final
{
public:
	EBrickUITextStyle                             Style;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InText;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_FormatRichTextStyle) == 0x000008, "Wrong alignment on BrickUIStyle_FormatRichTextStyle");
static_assert(sizeof(BrickUIStyle_FormatRichTextStyle) == 0x000038, "Wrong size on BrickUIStyle_FormatRichTextStyle");
static_assert(offsetof(BrickUIStyle_FormatRichTextStyle, Style) == 0x000000, "Member 'BrickUIStyle_FormatRichTextStyle::Style' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_FormatRichTextStyle, InText) == 0x000008, "Member 'BrickUIStyle_FormatRichTextStyle::InText' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_FormatRichTextStyle, ReturnValue) == 0x000020, "Member 'BrickUIStyle_FormatRichTextStyle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetTeamAttitudeColorStyle
// 0x0002 (0x0002 - 0x0000)
struct BrickUIStyle_GetTeamAttitudeColorStyle final
{
public:
	ETeamAttitude                                 TeamAttitude;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetTeamAttitudeColorStyle) == 0x000001, "Wrong alignment on BrickUIStyle_GetTeamAttitudeColorStyle");
static_assert(sizeof(BrickUIStyle_GetTeamAttitudeColorStyle) == 0x000002, "Wrong size on BrickUIStyle_GetTeamAttitudeColorStyle");
static_assert(offsetof(BrickUIStyle_GetTeamAttitudeColorStyle, TeamAttitude) == 0x000000, "Member 'BrickUIStyle_GetTeamAttitudeColorStyle::TeamAttitude' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetTeamAttitudeColorStyle, ReturnValue) == 0x000001, "Member 'BrickUIStyle_GetTeamAttitudeColorStyle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetTeamAttitudeTextStyle
// 0x0002 (0x0002 - 0x0000)
struct BrickUIStyle_GetTeamAttitudeTextStyle final
{
public:
	ETeamAttitude                                 TeamAttitude;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUITextStyle                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetTeamAttitudeTextStyle) == 0x000001, "Wrong alignment on BrickUIStyle_GetTeamAttitudeTextStyle");
static_assert(sizeof(BrickUIStyle_GetTeamAttitudeTextStyle) == 0x000002, "Wrong size on BrickUIStyle_GetTeamAttitudeTextStyle");
static_assert(offsetof(BrickUIStyle_GetTeamAttitudeTextStyle, TeamAttitude) == 0x000000, "Member 'BrickUIStyle_GetTeamAttitudeTextStyle::TeamAttitude' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetTeamAttitudeTextStyle, ReturnValue) == 0x000001, "Member 'BrickUIStyle_GetTeamAttitudeTextStyle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetUIStyle
// 0x0010 (0x0010 - 0x0000)
struct BrickUIStyle_GetUIStyle final
{
public:
	TDelegate<void(const class UBrickUIStyle* Style)> Delegate;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetUIStyle) == 0x000004, "Wrong alignment on BrickUIStyle_GetUIStyle");
static_assert(sizeof(BrickUIStyle_GetUIStyle) == 0x000010, "Wrong size on BrickUIStyle_GetUIStyle");
static_assert(offsetof(BrickUIStyle_GetUIStyle, Delegate) == 0x000000, "Member 'BrickUIStyle_GetUIStyle::Delegate' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.InvertTeamAttitudeColorStyle
// 0x0002 (0x0002 - 0x0000)
struct BrickUIStyle_InvertTeamAttitudeColorStyle final
{
public:
	EBrickUIColorStyle                            ColorStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_InvertTeamAttitudeColorStyle) == 0x000001, "Wrong alignment on BrickUIStyle_InvertTeamAttitudeColorStyle");
static_assert(sizeof(BrickUIStyle_InvertTeamAttitudeColorStyle) == 0x000002, "Wrong size on BrickUIStyle_InvertTeamAttitudeColorStyle");
static_assert(offsetof(BrickUIStyle_InvertTeamAttitudeColorStyle, ColorStyle) == 0x000000, "Member 'BrickUIStyle_InvertTeamAttitudeColorStyle::ColorStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_InvertTeamAttitudeColorStyle, ReturnValue) == 0x000001, "Member 'BrickUIStyle_InvertTeamAttitudeColorStyle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SwitchButtonStyleState
// 0x0002 (0x0002 - 0x0000)
struct BrickUIStyle_SwitchButtonStyleState final
{
public:
	EBrickUIStyleState                            StyleState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SwitchButtonStyleState) == 0x000001, "Wrong alignment on BrickUIStyle_SwitchButtonStyleState");
static_assert(sizeof(BrickUIStyle_SwitchButtonStyleState) == 0x000002, "Wrong size on BrickUIStyle_SwitchButtonStyleState");
static_assert(offsetof(BrickUIStyle_SwitchButtonStyleState, StyleState) == 0x000000, "Member 'BrickUIStyle_SwitchButtonStyleState::StyleState' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SwitchButtonStyleState, ReturnValue) == 0x000001, "Member 'BrickUIStyle_SwitchButtonStyleState::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.UnbindUIStyle
// 0x0008 (0x0008 - 0x0000)
struct BrickUIStyle_UnbindUIStyle final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_UnbindUIStyle) == 0x000008, "Wrong alignment on BrickUIStyle_UnbindUIStyle");
static_assert(sizeof(BrickUIStyle_UnbindUIStyle) == 0x000008, "Wrong size on BrickUIStyle_UnbindUIStyle");
static_assert(offsetof(BrickUIStyle_UnbindUIStyle, Object) == 0x000000, "Member 'BrickUIStyle_UnbindUIStyle::Object' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SetBrush
// 0x0090 (0x0090 - 0x0000)
struct BrickUIStyle_SetBrush final
{
public:
	EBrickUIBrushStyle                            BrushStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            StyleState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            InBrush;                                           // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SetBrush) == 0x000008, "Wrong alignment on BrickUIStyle_SetBrush");
static_assert(sizeof(BrickUIStyle_SetBrush) == 0x000090, "Wrong size on BrickUIStyle_SetBrush");
static_assert(offsetof(BrickUIStyle_SetBrush, BrushStyle) == 0x000000, "Member 'BrickUIStyle_SetBrush::BrushStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetBrush, StyleState) == 0x000001, "Member 'BrickUIStyle_SetBrush::StyleState' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetBrush, InBrush) == 0x000008, "Member 'BrickUIStyle_SetBrush::InBrush' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SetColor
// 0x0014 (0x0014 - 0x0000)
struct BrickUIStyle_SetColor final
{
public:
	EBrickUIColorStyle                            ColorStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            StyleState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InColor;                                           // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SetColor) == 0x000004, "Wrong alignment on BrickUIStyle_SetColor");
static_assert(sizeof(BrickUIStyle_SetColor) == 0x000014, "Wrong size on BrickUIStyle_SetColor");
static_assert(offsetof(BrickUIStyle_SetColor, ColorStyle) == 0x000000, "Member 'BrickUIStyle_SetColor::ColorStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetColor, StyleState) == 0x000001, "Member 'BrickUIStyle_SetColor::StyleState' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetColor, InColor) == 0x000004, "Member 'BrickUIStyle_SetColor::InColor' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SetIconAtlas
// 0x0018 (0x0018 - 0x0000)
struct BrickUIStyle_SetIconAtlas final
{
public:
	EBrickUIIconAtlas                             InIconAtlas;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickUIIconAtlas                      InAtlas;                                           // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SetIconAtlas) == 0x000008, "Wrong alignment on BrickUIStyle_SetIconAtlas");
static_assert(sizeof(BrickUIStyle_SetIconAtlas) == 0x000018, "Wrong size on BrickUIStyle_SetIconAtlas");
static_assert(offsetof(BrickUIStyle_SetIconAtlas, InIconAtlas) == 0x000000, "Member 'BrickUIStyle_SetIconAtlas::InIconAtlas' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetIconAtlas, InAtlas) == 0x000008, "Member 'BrickUIStyle_SetIconAtlas::InAtlas' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SetPaddingStyle
// 0x0014 (0x0014 - 0x0000)
struct BrickUIStyle_SetPaddingStyle final
{
public:
	EBrickUIPaddingStyle                          PaddingStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                InPadding;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SetPaddingStyle) == 0x000004, "Wrong alignment on BrickUIStyle_SetPaddingStyle");
static_assert(sizeof(BrickUIStyle_SetPaddingStyle) == 0x000014, "Wrong size on BrickUIStyle_SetPaddingStyle");
static_assert(offsetof(BrickUIStyle_SetPaddingStyle, PaddingStyle) == 0x000000, "Member 'BrickUIStyle_SetPaddingStyle::PaddingStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetPaddingStyle, InPadding) == 0x000004, "Member 'BrickUIStyle_SetPaddingStyle::InPadding' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SetSpacingStyle
// 0x0008 (0x0008 - 0x0000)
struct BrickUIStyle_SetSpacingStyle final
{
public:
	EBrickUISpacingStyle                          SpacingStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSpacing;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SetSpacingStyle) == 0x000004, "Wrong alignment on BrickUIStyle_SetSpacingStyle");
static_assert(sizeof(BrickUIStyle_SetSpacingStyle) == 0x000008, "Wrong size on BrickUIStyle_SetSpacingStyle");
static_assert(offsetof(BrickUIStyle_SetSpacingStyle, SpacingStyle) == 0x000000, "Member 'BrickUIStyle_SetSpacingStyle::SpacingStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetSpacingStyle, InSpacing) == 0x000004, "Member 'BrickUIStyle_SetSpacingStyle::InSpacing' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.SetTextStyle
// 0x0278 (0x0278 - 0x0000)
struct BrickUIStyle_SetTextStyle final
{
public:
	EBrickUITextStyle                             TextStyle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        InTextStyle;                                       // 0x0008(0x0270)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_SetTextStyle) == 0x000008, "Wrong alignment on BrickUIStyle_SetTextStyle");
static_assert(sizeof(BrickUIStyle_SetTextStyle) == 0x000278, "Wrong size on BrickUIStyle_SetTextStyle");
static_assert(offsetof(BrickUIStyle_SetTextStyle, TextStyle) == 0x000000, "Member 'BrickUIStyle_SetTextStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_SetTextStyle, InTextStyle) == 0x000008, "Member 'BrickUIStyle_SetTextStyle::InTextStyle' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetBrush
// 0x0118 (0x0118 - 0x0000)
struct BrickUIStyle_GetBrush final
{
public:
	EBrickUIBrushStyle                            BrushStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            StyleState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Fallback;                                          // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0090(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetBrush) == 0x000008, "Wrong alignment on BrickUIStyle_GetBrush");
static_assert(sizeof(BrickUIStyle_GetBrush) == 0x000118, "Wrong size on BrickUIStyle_GetBrush");
static_assert(offsetof(BrickUIStyle_GetBrush, BrushStyle) == 0x000000, "Member 'BrickUIStyle_GetBrush::BrushStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetBrush, StyleState) == 0x000001, "Member 'BrickUIStyle_GetBrush::StyleState' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetBrush, Fallback) == 0x000008, "Member 'BrickUIStyle_GetBrush::Fallback' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetBrush, ReturnValue) == 0x000090, "Member 'BrickUIStyle_GetBrush::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetColor
// 0x0024 (0x0024 - 0x0000)
struct BrickUIStyle_GetColor final
{
public:
	EBrickUIColorStyle                            ColorStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            StyleState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Fallback;                                          // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetColor) == 0x000004, "Wrong alignment on BrickUIStyle_GetColor");
static_assert(sizeof(BrickUIStyle_GetColor) == 0x000024, "Wrong size on BrickUIStyle_GetColor");
static_assert(offsetof(BrickUIStyle_GetColor, ColorStyle) == 0x000000, "Member 'BrickUIStyle_GetColor::ColorStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetColor, StyleState) == 0x000001, "Member 'BrickUIStyle_GetColor::StyleState' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetColor, Fallback) == 0x000004, "Member 'BrickUIStyle_GetColor::Fallback' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetColor, ReturnValue) == 0x000014, "Member 'BrickUIStyle_GetColor::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetPadding
// 0x0024 (0x0024 - 0x0000)
struct BrickUIStyle_GetPadding final
{
public:
	EBrickUIPaddingStyle                          PaddingStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Fallback;                                          // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x0014(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetPadding) == 0x000004, "Wrong alignment on BrickUIStyle_GetPadding");
static_assert(sizeof(BrickUIStyle_GetPadding) == 0x000024, "Wrong size on BrickUIStyle_GetPadding");
static_assert(offsetof(BrickUIStyle_GetPadding, PaddingStyle) == 0x000000, "Member 'BrickUIStyle_GetPadding::PaddingStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetPadding, Fallback) == 0x000004, "Member 'BrickUIStyle_GetPadding::Fallback' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetPadding, ReturnValue) == 0x000014, "Member 'BrickUIStyle_GetPadding::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetSpacing
// 0x000C (0x000C - 0x0000)
struct BrickUIStyle_GetSpacing final
{
public:
	EBrickUISpacingStyle                          SpacingStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fallback;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetSpacing) == 0x000004, "Wrong alignment on BrickUIStyle_GetSpacing");
static_assert(sizeof(BrickUIStyle_GetSpacing) == 0x00000C, "Wrong size on BrickUIStyle_GetSpacing");
static_assert(offsetof(BrickUIStyle_GetSpacing, SpacingStyle) == 0x000000, "Member 'BrickUIStyle_GetSpacing::SpacingStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetSpacing, Fallback) == 0x000004, "Member 'BrickUIStyle_GetSpacing::Fallback' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetSpacing, ReturnValue) == 0x000008, "Member 'BrickUIStyle_GetSpacing::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUIStyle.GetTextStyle
// 0x04E8 (0x04E8 - 0x0000)
struct BrickUIStyle_GetTextStyle final
{
public:
	EBrickUITextStyle                             TextStyle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        Fallback;                                          // 0x0008(0x0270)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        ReturnValue;                                       // 0x0278(0x0270)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUIStyle_GetTextStyle) == 0x000008, "Wrong alignment on BrickUIStyle_GetTextStyle");
static_assert(sizeof(BrickUIStyle_GetTextStyle) == 0x0004E8, "Wrong size on BrickUIStyle_GetTextStyle");
static_assert(offsetof(BrickUIStyle_GetTextStyle, TextStyle) == 0x000000, "Member 'BrickUIStyle_GetTextStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetTextStyle, Fallback) == 0x000008, "Member 'BrickUIStyle_GetTextStyle::Fallback' has a wrong offset!");
static_assert(offsetof(BrickUIStyle_GetTextStyle, ReturnValue) == 0x000278, "Member 'BrickUIStyle_GetTextStyle::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUserSettings.GetUserSettings
// 0x0008 (0x0008 - 0x0000)
struct BrickUserSettings_GetUserSettings final
{
public:
	class UBrickUserSettings*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserSettings_GetUserSettings) == 0x000008, "Wrong alignment on BrickUserSettings_GetUserSettings");
static_assert(sizeof(BrickUserSettings_GetUserSettings) == 0x000008, "Wrong size on BrickUserSettings_GetUserSettings");
static_assert(offsetof(BrickUserSettings_GetUserSettings, ReturnValue) == 0x000000, "Member 'BrickUserSettings_GetUserSettings::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUserSettings.SetBrickUnitsDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct BrickUserSettings_SetBrickUnitsDisplayMode final
{
public:
	EBrickUnitsDisplayMode                        NewMode;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserSettings_SetBrickUnitsDisplayMode) == 0x000001, "Wrong alignment on BrickUserSettings_SetBrickUnitsDisplayMode");
static_assert(sizeof(BrickUserSettings_SetBrickUnitsDisplayMode) == 0x000001, "Wrong size on BrickUserSettings_SetBrickUnitsDisplayMode");
static_assert(offsetof(BrickUserSettings_SetBrickUnitsDisplayMode, NewMode) == 0x000000, "Member 'BrickUserSettings_SetBrickUnitsDisplayMode::NewMode' has a wrong offset!");

// Function BrickRigs.BrickUserSettings.SetColorDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct BrickUserSettings_SetColorDisplayMode final
{
public:
	EColorDisplayMode                             NewMode;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserSettings_SetColorDisplayMode) == 0x000001, "Wrong alignment on BrickUserSettings_SetColorDisplayMode");
static_assert(sizeof(BrickUserSettings_SetColorDisplayMode) == 0x000001, "Wrong size on BrickUserSettings_SetColorDisplayMode");
static_assert(offsetof(BrickUserSettings_SetColorDisplayMode, NewMode) == 0x000000, "Member 'BrickUserSettings_SetColorDisplayMode::NewMode' has a wrong offset!");

// Function BrickRigs.BrickUserSettings.GetBrickUnitsDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct BrickUserSettings_GetBrickUnitsDisplayMode final
{
public:
	EBrickUnitsDisplayMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserSettings_GetBrickUnitsDisplayMode) == 0x000001, "Wrong alignment on BrickUserSettings_GetBrickUnitsDisplayMode");
static_assert(sizeof(BrickUserSettings_GetBrickUnitsDisplayMode) == 0x000001, "Wrong size on BrickUserSettings_GetBrickUnitsDisplayMode");
static_assert(offsetof(BrickUserSettings_GetBrickUnitsDisplayMode, ReturnValue) == 0x000000, "Member 'BrickUserSettings_GetBrickUnitsDisplayMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickUserSettings.GetColorDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct BrickUserSettings_GetColorDisplayMode final
{
public:
	EColorDisplayMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickUserSettings_GetColorDisplayMode) == 0x000001, "Wrong alignment on BrickUserSettings_GetColorDisplayMode");
static_assert(sizeof(BrickUserSettings_GetColorDisplayMode) == 0x000001, "Wrong size on BrickUserSettings_GetColorDisplayMode");
static_assert(offsetof(BrickUserSettings_GetColorDisplayMode, ReturnValue) == 0x000000, "Member 'BrickUserSettings_GetColorDisplayMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickVerticalBox.SetSlotSpacingStyle
// 0x0001 (0x0001 - 0x0000)
struct BrickVerticalBox_SetSlotSpacingStyle final
{
public:
	EBrickUISpacingStyle                          NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickVerticalBox_SetSlotSpacingStyle) == 0x000001, "Wrong alignment on BrickVerticalBox_SetSlotSpacingStyle");
static_assert(sizeof(BrickVerticalBox_SetSlotSpacingStyle) == 0x000001, "Wrong size on BrickVerticalBox_SetSlotSpacingStyle");
static_assert(offsetof(BrickVerticalBox_SetSlotSpacingStyle, NewStyle) == 0x000000, "Member 'BrickVerticalBox_SetSlotSpacingStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.BrickWorldSettings.Get
// 0x0010 (0x0010 - 0x0000)
struct BrickWorldSettings_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickWorldSettings*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickWorldSettings_Get) == 0x000008, "Wrong alignment on BrickWorldSettings_Get");
static_assert(sizeof(BrickWorldSettings_Get) == 0x000010, "Wrong size on BrickWorldSettings_Get");
static_assert(offsetof(BrickWorldSettings_Get, WorldContextObject) == 0x000000, "Member 'BrickWorldSettings_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BrickWorldSettings_Get, ReturnValue) == 0x000008, "Member 'BrickWorldSettings_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.BrickWorldSettings.AddHeatSeekingTarget
// 0x0008 (0x0008 - 0x0000)
struct BrickWorldSettings_AddHeatSeekingTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickWorldSettings_AddHeatSeekingTarget) == 0x000008, "Wrong alignment on BrickWorldSettings_AddHeatSeekingTarget");
static_assert(sizeof(BrickWorldSettings_AddHeatSeekingTarget) == 0x000008, "Wrong size on BrickWorldSettings_AddHeatSeekingTarget");
static_assert(offsetof(BrickWorldSettings_AddHeatSeekingTarget, Target) == 0x000000, "Member 'BrickWorldSettings_AddHeatSeekingTarget::Target' has a wrong offset!");

// Function BrickRigs.BrickWorldSettings.RemoveHeatSeekingTarget
// 0x0008 (0x0008 - 0x0000)
struct BrickWorldSettings_RemoveHeatSeekingTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BrickWorldSettings_RemoveHeatSeekingTarget) == 0x000008, "Wrong alignment on BrickWorldSettings_RemoveHeatSeekingTarget");
static_assert(sizeof(BrickWorldSettings_RemoveHeatSeekingTarget) == 0x000008, "Wrong size on BrickWorldSettings_RemoveHeatSeekingTarget");
static_assert(offsetof(BrickWorldSettings_RemoveHeatSeekingTarget, Target) == 0x000000, "Member 'BrickWorldSettings_RemoveHeatSeekingTarget::Target' has a wrong offset!");

// Function BrickRigs.CharacterInputComponent.WalkForward
// 0x0004 (0x0004 - 0x0000)
struct CharacterInputComponent_WalkForward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInputComponent_WalkForward) == 0x000004, "Wrong alignment on CharacterInputComponent_WalkForward");
static_assert(sizeof(CharacterInputComponent_WalkForward) == 0x000004, "Wrong size on CharacterInputComponent_WalkForward");
static_assert(offsetof(CharacterInputComponent_WalkForward, Val) == 0x000000, "Member 'CharacterInputComponent_WalkForward::Val' has a wrong offset!");

// Function BrickRigs.CharacterInputComponent.WalkRight
// 0x0004 (0x0004 - 0x0000)
struct CharacterInputComponent_WalkRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInputComponent_WalkRight) == 0x000004, "Wrong alignment on CharacterInputComponent_WalkRight");
static_assert(sizeof(CharacterInputComponent_WalkRight) == 0x000004, "Wrong size on CharacterInputComponent_WalkRight");
static_assert(offsetof(CharacterInputComponent_WalkRight, Val) == 0x000000, "Member 'CharacterInputComponent_WalkRight::Val' has a wrong offset!");

// Function BrickRigs.WorldSetupActor.Get
// 0x0010 (0x0010 - 0x0000)
struct WorldSetupActor_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWorldSetupActor*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSetupActor_Get) == 0x000008, "Wrong alignment on WorldSetupActor_Get");
static_assert(sizeof(WorldSetupActor_Get) == 0x000010, "Wrong size on WorldSetupActor_Get");
static_assert(offsetof(WorldSetupActor_Get, WorldContextObject) == 0x000000, "Member 'WorldSetupActor_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WorldSetupActor_Get, ReturnValue) == 0x000008, "Member 'WorldSetupActor_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.ChatMessageInputComponent.GetKickPlayerEnabled
// 0x0001 (0x0001 - 0x0000)
struct ChatMessageInputComponent_GetKickPlayerEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatMessageInputComponent_GetKickPlayerEnabled) == 0x000001, "Wrong alignment on ChatMessageInputComponent_GetKickPlayerEnabled");
static_assert(sizeof(ChatMessageInputComponent_GetKickPlayerEnabled) == 0x000001, "Wrong size on ChatMessageInputComponent_GetKickPlayerEnabled");
static_assert(offsetof(ChatMessageInputComponent_GetKickPlayerEnabled, ReturnValue) == 0x000000, "Member 'ChatMessageInputComponent_GetKickPlayerEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.ChatMessageWidget.UpdateColorStyle
// 0x0001 (0x0001 - 0x0000)
struct ChatMessageWidget_UpdateColorStyle final
{
public:
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatMessageWidget_UpdateColorStyle) == 0x000001, "Wrong alignment on ChatMessageWidget_UpdateColorStyle");
static_assert(sizeof(ChatMessageWidget_UpdateColorStyle) == 0x000001, "Wrong size on ChatMessageWidget_UpdateColorStyle");
static_assert(offsetof(ChatMessageWidget_UpdateColorStyle, NewColorStyle) == 0x000000, "Member 'ChatMessageWidget_UpdateColorStyle::NewColorStyle' has a wrong offset!");

// Function BrickRigs.ChatMessageWidget.UpdateMessageText
// 0x0018 (0x0018 - 0x0000)
struct ChatMessageWidget_UpdateMessageText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatMessageWidget_UpdateMessageText) == 0x000008, "Wrong alignment on ChatMessageWidget_UpdateMessageText");
static_assert(sizeof(ChatMessageWidget_UpdateMessageText) == 0x000018, "Wrong size on ChatMessageWidget_UpdateMessageText");
static_assert(offsetof(ChatMessageWidget_UpdateMessageText, NewText) == 0x000000, "Member 'ChatMessageWidget_UpdateMessageText::NewText' has a wrong offset!");

// Function BrickRigs.ColorPropertyWidget.SetColorPropertyValue
// 0x0008 (0x0008 - 0x0000)
struct ColorPropertyWidget_SetColorPropertyValue final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ColorPropertyWidget_SetColorPropertyValue) == 0x000004, "Wrong alignment on ColorPropertyWidget_SetColorPropertyValue");
static_assert(sizeof(ColorPropertyWidget_SetColorPropertyValue) == 0x000008, "Wrong size on ColorPropertyWidget_SetColorPropertyValue");
static_assert(offsetof(ColorPropertyWidget_SetColorPropertyValue, Color) == 0x000000, "Member 'ColorPropertyWidget_SetColorPropertyValue::Color' has a wrong offset!");
static_assert(offsetof(ColorPropertyWidget_SetColorPropertyValue, EventType) == 0x000004, "Member 'ColorPropertyWidget_SetColorPropertyValue::EventType' has a wrong offset!");

// Function BrickRigs.ColorPropertyWidget.UpdateColorPropertyValue
// 0x0008 (0x0008 - 0x0000)
struct ColorPropertyWidget_UpdateColorPropertyValue final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValueChanged;                                     // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ColorPropertyWidget_UpdateColorPropertyValue) == 0x000004, "Wrong alignment on ColorPropertyWidget_UpdateColorPropertyValue");
static_assert(sizeof(ColorPropertyWidget_UpdateColorPropertyValue) == 0x000008, "Wrong size on ColorPropertyWidget_UpdateColorPropertyValue");
static_assert(offsetof(ColorPropertyWidget_UpdateColorPropertyValue, NewColor) == 0x000000, "Member 'ColorPropertyWidget_UpdateColorPropertyValue::NewColor' has a wrong offset!");
static_assert(offsetof(ColorPropertyWidget_UpdateColorPropertyValue, bValueChanged) == 0x000004, "Member 'ColorPropertyWidget_UpdateColorPropertyValue::bValueChanged' has a wrong offset!");

// Function BrickRigs.ColorPropertyWidget.HasAlphaChannel
// 0x0001 (0x0001 - 0x0000)
struct ColorPropertyWidget_HasAlphaChannel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorPropertyWidget_HasAlphaChannel) == 0x000001, "Wrong alignment on ColorPropertyWidget_HasAlphaChannel");
static_assert(sizeof(ColorPropertyWidget_HasAlphaChannel) == 0x000001, "Wrong size on ColorPropertyWidget_HasAlphaChannel");
static_assert(offsetof(ColorPropertyWidget_HasAlphaChannel, ReturnValue) == 0x000000, "Member 'ColorPropertyWidget_HasAlphaChannel::ReturnValue' has a wrong offset!");

// Function BrickRigs.ColorWheelWidget.SetColor
// 0x0010 (0x0010 - 0x0000)
struct ColorWheelWidget_SetColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorWheelWidget_SetColor) == 0x000004, "Wrong alignment on ColorWheelWidget_SetColor");
static_assert(sizeof(ColorWheelWidget_SetColor) == 0x000010, "Wrong size on ColorWheelWidget_SetColor");
static_assert(offsetof(ColorWheelWidget_SetColor, NewColor) == 0x000000, "Member 'ColorWheelWidget_SetColor::NewColor' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_OnInputMethodChanged final
{
public:
	EInputMethod                                  NewInputMethod;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_OnInputMethodChanged) == 0x000001, "Wrong alignment on ControlHintWidget_OnInputMethodChanged");
static_assert(sizeof(ControlHintWidget_OnInputMethodChanged) == 0x000001, "Wrong size on ControlHintWidget_OnInputMethodChanged");
static_assert(offsetof(ControlHintWidget_OnInputMethodChanged, NewInputMethod) == 0x000000, "Member 'ControlHintWidget_OnInputMethodChanged::NewInputMethod' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetAction
// 0x000C (0x000C - 0x0000)
struct ControlHintWidget_SetAction final
{
public:
	class FName                                   InActionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionTriggerType                       InTriggerType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlHintWidget_SetAction) == 0x000004, "Wrong alignment on ControlHintWidget_SetAction");
static_assert(sizeof(ControlHintWidget_SetAction) == 0x00000C, "Wrong size on ControlHintWidget_SetAction");
static_assert(offsetof(ControlHintWidget_SetAction, InActionName) == 0x000000, "Member 'ControlHintWidget_SetAction::InActionName' has a wrong offset!");
static_assert(offsetof(ControlHintWidget_SetAction, InTriggerType) == 0x000008, "Member 'ControlHintWidget_SetAction::InTriggerType' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetColorStyle) == 0x000001, "Wrong alignment on ControlHintWidget_SetColorStyle");
static_assert(sizeof(ControlHintWidget_SetColorStyle) == 0x000001, "Wrong size on ControlHintWidget_SetColorStyle");
static_assert(offsetof(ControlHintWidget_SetColorStyle, NewStyle) == 0x000000, "Member 'ControlHintWidget_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetDisplayInfo
// 0x0028 (0x0028 - 0x0000)
struct ControlHintWidget_SetDisplayInfo final
{
public:
	struct FDisplayInfo                           InDisplayInfo;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetDisplayInfo) == 0x000008, "Wrong alignment on ControlHintWidget_SetDisplayInfo");
static_assert(sizeof(ControlHintWidget_SetDisplayInfo) == 0x000028, "Wrong size on ControlHintWidget_SetDisplayInfo");
static_assert(offsetof(ControlHintWidget_SetDisplayInfo, InDisplayInfo) == 0x000000, "Member 'ControlHintWidget_SetDisplayInfo::InDisplayInfo' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetDisplayInfoMode
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_SetDisplayInfoMode final
{
public:
	EControlHintDisplayInfoMode                   NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetDisplayInfoMode) == 0x000001, "Wrong alignment on ControlHintWidget_SetDisplayInfoMode");
static_assert(sizeof(ControlHintWidget_SetDisplayInfoMode) == 0x000001, "Wrong size on ControlHintWidget_SetDisplayInfoMode");
static_assert(offsetof(ControlHintWidget_SetDisplayInfoMode, NewMode) == 0x000000, "Member 'ControlHintWidget_SetDisplayInfoMode::NewMode' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetInputChordScale
// 0x0004 (0x0004 - 0x0000)
struct ControlHintWidget_SetInputChordScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetInputChordScale) == 0x000004, "Wrong alignment on ControlHintWidget_SetInputChordScale");
static_assert(sizeof(ControlHintWidget_SetInputChordScale) == 0x000004, "Wrong size on ControlHintWidget_SetInputChordScale");
static_assert(offsetof(ControlHintWidget_SetInputChordScale, InScale) == 0x000000, "Member 'ControlHintWidget_SetInputChordScale::InScale' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetShowInputChord
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_SetShowInputChord final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetShowInputChord) == 0x000001, "Wrong alignment on ControlHintWidget_SetShowInputChord");
static_assert(sizeof(ControlHintWidget_SetShowInputChord) == 0x000001, "Wrong size on ControlHintWidget_SetShowInputChord");
static_assert(offsetof(ControlHintWidget_SetShowInputChord, bShow) == 0x000000, "Member 'ControlHintWidget_SetShowInputChord::bShow' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetShowUnboundKey
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_SetShowUnboundKey final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetShowUnboundKey) == 0x000001, "Wrong alignment on ControlHintWidget_SetShowUnboundKey");
static_assert(sizeof(ControlHintWidget_SetShowUnboundKey) == 0x000001, "Wrong size on ControlHintWidget_SetShowUnboundKey");
static_assert(offsetof(ControlHintWidget_SetShowUnboundKey, bShow) == 0x000000, "Member 'ControlHintWidget_SetShowUnboundKey::bShow' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetStyleState) == 0x000001, "Wrong alignment on ControlHintWidget_SetStyleState");
static_assert(sizeof(ControlHintWidget_SetStyleState) == 0x000001, "Wrong size on ControlHintWidget_SetStyleState");
static_assert(offsetof(ControlHintWidget_SetStyleState, NewState) == 0x000000, "Member 'ControlHintWidget_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.SetTextStyle
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_SetTextStyle final
{
public:
	EBrickUITextStyle                             NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_SetTextStyle) == 0x000001, "Wrong alignment on ControlHintWidget_SetTextStyle");
static_assert(sizeof(ControlHintWidget_SetTextStyle) == 0x000001, "Wrong size on ControlHintWidget_SetTextStyle");
static_assert(offsetof(ControlHintWidget_SetTextStyle, NewStyle) == 0x000000, "Member 'ControlHintWidget_SetTextStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateDisplayInfo
// 0x0028 (0x0028 - 0x0000)
struct ControlHintWidget_UpdateDisplayInfo final
{
public:
	struct FDisplayInfo                           NewDisplayInfo;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateDisplayInfo) == 0x000008, "Wrong alignment on ControlHintWidget_UpdateDisplayInfo");
static_assert(sizeof(ControlHintWidget_UpdateDisplayInfo) == 0x000028, "Wrong size on ControlHintWidget_UpdateDisplayInfo");
static_assert(offsetof(ControlHintWidget_UpdateDisplayInfo, NewDisplayInfo) == 0x000000, "Member 'ControlHintWidget_UpdateDisplayInfo::NewDisplayInfo' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateHoldProgress
// 0x0004 (0x0004 - 0x0000)
struct ControlHintWidget_UpdateHoldProgress final
{
public:
	float                                         InHoldProgress;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateHoldProgress) == 0x000004, "Wrong alignment on ControlHintWidget_UpdateHoldProgress");
static_assert(sizeof(ControlHintWidget_UpdateHoldProgress) == 0x000004, "Wrong size on ControlHintWidget_UpdateHoldProgress");
static_assert(offsetof(ControlHintWidget_UpdateHoldProgress, InHoldProgress) == 0x000000, "Member 'ControlHintWidget_UpdateHoldProgress::InHoldProgress' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_UpdateIconVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateIconVisibility) == 0x000001, "Wrong alignment on ControlHintWidget_UpdateIconVisibility");
static_assert(sizeof(ControlHintWidget_UpdateIconVisibility) == 0x000001, "Wrong size on ControlHintWidget_UpdateIconVisibility");
static_assert(offsetof(ControlHintWidget_UpdateIconVisibility, bNewVisible) == 0x000000, "Member 'ControlHintWidget_UpdateIconVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateInputChordStyleState
// 0x0002 (0x0002 - 0x0000)
struct ControlHintWidget_UpdateInputChordStyleState final
{
public:
	EBrickUIStyleState                            InStyleState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsHoldAction;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateInputChordStyleState) == 0x000001, "Wrong alignment on ControlHintWidget_UpdateInputChordStyleState");
static_assert(sizeof(ControlHintWidget_UpdateInputChordStyleState) == 0x000002, "Wrong size on ControlHintWidget_UpdateInputChordStyleState");
static_assert(offsetof(ControlHintWidget_UpdateInputChordStyleState, InStyleState) == 0x000000, "Member 'ControlHintWidget_UpdateInputChordStyleState::InStyleState' has a wrong offset!");
static_assert(offsetof(ControlHintWidget_UpdateInputChordStyleState, bInIsHoldAction) == 0x000001, "Member 'ControlHintWidget_UpdateInputChordStyleState::bInIsHoldAction' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateInputChordVisibility
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_UpdateInputChordVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateInputChordVisibility) == 0x000001, "Wrong alignment on ControlHintWidget_UpdateInputChordVisibility");
static_assert(sizeof(ControlHintWidget_UpdateInputChordVisibility) == 0x000001, "Wrong size on ControlHintWidget_UpdateInputChordVisibility");
static_assert(offsetof(ControlHintWidget_UpdateInputChordVisibility, bNewVisible) == 0x000000, "Member 'ControlHintWidget_UpdateInputChordVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateIsHoldAction
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_UpdateIsHoldAction final
{
public:
	bool                                          bIsHoldAction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateIsHoldAction) == 0x000001, "Wrong alignment on ControlHintWidget_UpdateIsHoldAction");
static_assert(sizeof(ControlHintWidget_UpdateIsHoldAction) == 0x000001, "Wrong size on ControlHintWidget_UpdateIsHoldAction");
static_assert(offsetof(ControlHintWidget_UpdateIsHoldAction, bIsHoldAction) == 0x000000, "Member 'ControlHintWidget_UpdateIsHoldAction::bIsHoldAction' has a wrong offset!");

// Function BrickRigs.ControlHintWidget.UpdateTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct ControlHintWidget_UpdateTextVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlHintWidget_UpdateTextVisibility) == 0x000001, "Wrong alignment on ControlHintWidget_UpdateTextVisibility");
static_assert(sizeof(ControlHintWidget_UpdateTextVisibility) == 0x000001, "Wrong size on ControlHintWidget_UpdateTextVisibility");
static_assert(offsetof(ControlHintWidget_UpdateTextVisibility, bNewVisible) == 0x000000, "Member 'ControlHintWidget_UpdateTextVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.CrosshairWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CrosshairWidget_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrosshairWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on CrosshairWidget_OnHUDVisibilityChanged");
static_assert(sizeof(CrosshairWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on CrosshairWidget_OnHUDVisibilityChanged");
static_assert(offsetof(CrosshairWidget_OnHUDVisibilityChanged, NewVisibility) == 0x000000, "Member 'CrosshairWidget_OnHUDVisibilityChanged::NewVisibility' has a wrong offset!");

// Function BrickRigs.CrosshairWidget.PlayHitAnimation
// 0x000C (0x000C - 0x0000)
struct CrosshairWidget_PlayHitAnimation final
{
public:
	struct FClientDamageInfo                      DamageInfo;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrosshairWidget_PlayHitAnimation) == 0x000004, "Wrong alignment on CrosshairWidget_PlayHitAnimation");
static_assert(sizeof(CrosshairWidget_PlayHitAnimation) == 0x00000C, "Wrong size on CrosshairWidget_PlayHitAnimation");
static_assert(offsetof(CrosshairWidget_PlayHitAnimation, DamageInfo) == 0x000000, "Member 'CrosshairWidget_PlayHitAnimation::DamageInfo' has a wrong offset!");

// Function BrickRigs.CrosshairWidget.UpdateIsAttachingWinch
// 0x0001 (0x0001 - 0x0000)
struct CrosshairWidget_UpdateIsAttachingWinch final
{
public:
	bool                                          bNewAttaching;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrosshairWidget_UpdateIsAttachingWinch) == 0x000001, "Wrong alignment on CrosshairWidget_UpdateIsAttachingWinch");
static_assert(sizeof(CrosshairWidget_UpdateIsAttachingWinch) == 0x000001, "Wrong size on CrosshairWidget_UpdateIsAttachingWinch");
static_assert(offsetof(CrosshairWidget_UpdateIsAttachingWinch, bNewAttaching) == 0x000000, "Member 'CrosshairWidget_UpdateIsAttachingWinch::bNewAttaching' has a wrong offset!");

// Function BrickRigs.CrosshairWidget.UpdateWinchAttachment
// 0x0002 (0x0002 - 0x0000)
struct CrosshairWidget_UpdateWinchAttachment final
{
public:
	bool                                          bBlockingHit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithinRange;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrosshairWidget_UpdateWinchAttachment) == 0x000001, "Wrong alignment on CrosshairWidget_UpdateWinchAttachment");
static_assert(sizeof(CrosshairWidget_UpdateWinchAttachment) == 0x000002, "Wrong size on CrosshairWidget_UpdateWinchAttachment");
static_assert(offsetof(CrosshairWidget_UpdateWinchAttachment, bBlockingHit) == 0x000000, "Member 'CrosshairWidget_UpdateWinchAttachment::bBlockingHit' has a wrong offset!");
static_assert(offsetof(CrosshairWidget_UpdateWinchAttachment, bWithinRange) == 0x000001, "Member 'CrosshairWidget_UpdateWinchAttachment::bWithinRange' has a wrong offset!");

// Function BrickRigs.DashboardIconWidget.UpdateIconImage
// 0x0008 (0x0008 - 0x0000)
struct DashboardIconWidget_UpdateIconImage final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIconIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DashboardIconWidget_UpdateIconImage) == 0x000004, "Wrong alignment on DashboardIconWidget_UpdateIconImage");
static_assert(sizeof(DashboardIconWidget_UpdateIconImage) == 0x000008, "Wrong size on DashboardIconWidget_UpdateIconImage");
static_assert(offsetof(DashboardIconWidget_UpdateIconImage, bInVisible) == 0x000000, "Member 'DashboardIconWidget_UpdateIconImage::bInVisible' has a wrong offset!");
static_assert(offsetof(DashboardIconWidget_UpdateIconImage, InColorStyle) == 0x000001, "Member 'DashboardIconWidget_UpdateIconImage::InColorStyle' has a wrong offset!");
static_assert(offsetof(DashboardIconWidget_UpdateIconImage, InIconIndex) == 0x000004, "Member 'DashboardIconWidget_UpdateIconImage::InIconIndex' has a wrong offset!");

// Function BrickRigs.DashboardWidget.AddIconWidget
// 0x0010 (0x0010 - 0x0000)
struct DashboardWidget_AddIconWidget final
{
public:
	class UDashboardIconWidget*                   Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DashboardWidget_AddIconWidget) == 0x000008, "Wrong alignment on DashboardWidget_AddIconWidget");
static_assert(sizeof(DashboardWidget_AddIconWidget) == 0x000010, "Wrong size on DashboardWidget_AddIconWidget");
static_assert(offsetof(DashboardWidget_AddIconWidget, Widget) == 0x000000, "Member 'DashboardWidget_AddIconWidget::Widget' has a wrong offset!");
static_assert(offsetof(DashboardWidget_AddIconWidget, Index_0) == 0x000008, "Member 'DashboardWidget_AddIconWidget::Index_0' has a wrong offset!");

// Function BrickRigs.DashboardWidget.AddSliderWidget
// 0x0008 (0x0008 - 0x0000)
struct DashboardWidget_AddSliderWidget final
{
public:
	class UDashboardSliderWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DashboardWidget_AddSliderWidget) == 0x000008, "Wrong alignment on DashboardWidget_AddSliderWidget");
static_assert(sizeof(DashboardWidget_AddSliderWidget) == 0x000008, "Wrong size on DashboardWidget_AddSliderWidget");
static_assert(offsetof(DashboardWidget_AddSliderWidget, Widget) == 0x000000, "Member 'DashboardWidget_AddSliderWidget::Widget' has a wrong offset!");

// Function BrickRigs.DashboardWidget.UpdateSliderWidgetSlot
// 0x0010 (0x0010 - 0x0000)
struct DashboardWidget_UpdateSliderWidgetSlot final
{
public:
	class UDashboardSliderWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSliders;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DashboardWidget_UpdateSliderWidgetSlot) == 0x000008, "Wrong alignment on DashboardWidget_UpdateSliderWidgetSlot");
static_assert(sizeof(DashboardWidget_UpdateSliderWidgetSlot) == 0x000010, "Wrong size on DashboardWidget_UpdateSliderWidgetSlot");
static_assert(offsetof(DashboardWidget_UpdateSliderWidgetSlot, Widget) == 0x000000, "Member 'DashboardWidget_UpdateSliderWidgetSlot::Widget' has a wrong offset!");
static_assert(offsetof(DashboardWidget_UpdateSliderWidgetSlot, Index_0) == 0x000008, "Member 'DashboardWidget_UpdateSliderWidgetSlot::Index_0' has a wrong offset!");
static_assert(offsetof(DashboardWidget_UpdateSliderWidgetSlot, NumSliders) == 0x00000C, "Member 'DashboardWidget_UpdateSliderWidgetSlot::NumSliders' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.Brake
// 0x0004 (0x0004 - 0x0000)
struct VehicleInputComponent_Brake final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_Brake) == 0x000004, "Wrong alignment on VehicleInputComponent_Brake");
static_assert(sizeof(VehicleInputComponent_Brake) == 0x000004, "Wrong size on VehicleInputComponent_Brake");
static_assert(offsetof(VehicleInputComponent_Brake, Val) == 0x000000, "Member 'VehicleInputComponent_Brake::Val' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.Pitch
// 0x0004 (0x0004 - 0x0000)
struct VehicleInputComponent_Pitch final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_Pitch) == 0x000004, "Wrong alignment on VehicleInputComponent_Pitch");
static_assert(sizeof(VehicleInputComponent_Pitch) == 0x000004, "Wrong size on VehicleInputComponent_Pitch");
static_assert(offsetof(VehicleInputComponent_Pitch, Val) == 0x000000, "Member 'VehicleInputComponent_Pitch::Val' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.Steering
// 0x0004 (0x0004 - 0x0000)
struct VehicleInputComponent_Steering final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_Steering) == 0x000004, "Wrong alignment on VehicleInputComponent_Steering");
static_assert(sizeof(VehicleInputComponent_Steering) == 0x000004, "Wrong size on VehicleInputComponent_Steering");
static_assert(offsetof(VehicleInputComponent_Steering, Val) == 0x000000, "Member 'VehicleInputComponent_Steering::Val' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.Throttle
// 0x0004 (0x0004 - 0x0000)
struct VehicleInputComponent_Throttle final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_Throttle) == 0x000004, "Wrong alignment on VehicleInputComponent_Throttle");
static_assert(sizeof(VehicleInputComponent_Throttle) == 0x000004, "Wrong size on VehicleInputComponent_Throttle");
static_assert(offsetof(VehicleInputComponent_Throttle, Val) == 0x000000, "Member 'VehicleInputComponent_Throttle::Val' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.ViewPitch
// 0x0004 (0x0004 - 0x0000)
struct VehicleInputComponent_ViewPitch final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_ViewPitch) == 0x000004, "Wrong alignment on VehicleInputComponent_ViewPitch");
static_assert(sizeof(VehicleInputComponent_ViewPitch) == 0x000004, "Wrong size on VehicleInputComponent_ViewPitch");
static_assert(offsetof(VehicleInputComponent_ViewPitch, Val) == 0x000000, "Member 'VehicleInputComponent_ViewPitch::Val' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.ViewYaw
// 0x0004 (0x0004 - 0x0000)
struct VehicleInputComponent_ViewYaw final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_ViewYaw) == 0x000004, "Wrong alignment on VehicleInputComponent_ViewYaw");
static_assert(sizeof(VehicleInputComponent_ViewYaw) == 0x000004, "Wrong size on VehicleInputComponent_ViewYaw");
static_assert(offsetof(VehicleInputComponent_ViewYaw, Val) == 0x000000, "Member 'VehicleInputComponent_ViewYaw::Val' has a wrong offset!");

// Function BrickRigs.VehicleInputComponent.GetCycleCameraModeValueText
// 0x0018 (0x0018 - 0x0000)
struct VehicleInputComponent_GetCycleCameraModeValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleInputComponent_GetCycleCameraModeValueText) == 0x000008, "Wrong alignment on VehicleInputComponent_GetCycleCameraModeValueText");
static_assert(sizeof(VehicleInputComponent_GetCycleCameraModeValueText) == 0x000018, "Wrong size on VehicleInputComponent_GetCycleCameraModeValueText");
static_assert(offsetof(VehicleInputComponent_GetCycleCameraModeValueText, ReturnValue) == 0x000000, "Member 'VehicleInputComponent_GetCycleCameraModeValueText::ReturnValue' has a wrong offset!");

// Function BrickRigs.DriverInputComponent.GetCycleTransmissionModeValueText
// 0x0018 (0x0018 - 0x0000)
struct DriverInputComponent_GetCycleTransmissionModeValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DriverInputComponent_GetCycleTransmissionModeValueText) == 0x000008, "Wrong alignment on DriverInputComponent_GetCycleTransmissionModeValueText");
static_assert(sizeof(DriverInputComponent_GetCycleTransmissionModeValueText) == 0x000018, "Wrong size on DriverInputComponent_GetCycleTransmissionModeValueText");
static_assert(offsetof(DriverInputComponent_GetCycleTransmissionModeValueText, ReturnValue) == 0x000000, "Member 'DriverInputComponent_GetCycleTransmissionModeValueText::ReturnValue' has a wrong offset!");

// Function BrickRigs.DriverInputComponent.GetToggleAutoCounterSteeringValueText
// 0x0018 (0x0018 - 0x0000)
struct DriverInputComponent_GetToggleAutoCounterSteeringValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DriverInputComponent_GetToggleAutoCounterSteeringValueText) == 0x000008, "Wrong alignment on DriverInputComponent_GetToggleAutoCounterSteeringValueText");
static_assert(sizeof(DriverInputComponent_GetToggleAutoCounterSteeringValueText) == 0x000018, "Wrong size on DriverInputComponent_GetToggleAutoCounterSteeringValueText");
static_assert(offsetof(DriverInputComponent_GetToggleAutoCounterSteeringValueText, ReturnValue) == 0x000000, "Member 'DriverInputComponent_GetToggleAutoCounterSteeringValueText::ReturnValue' has a wrong offset!");

// Function BrickRigs.EditorInputComponent.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct EditorInputComponent_MoveForward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInputComponent_MoveForward) == 0x000004, "Wrong alignment on EditorInputComponent_MoveForward");
static_assert(sizeof(EditorInputComponent_MoveForward) == 0x000004, "Wrong size on EditorInputComponent_MoveForward");
static_assert(offsetof(EditorInputComponent_MoveForward, Val) == 0x000000, "Member 'EditorInputComponent_MoveForward::Val' has a wrong offset!");

// Function BrickRigs.EditorInputComponent.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct EditorInputComponent_MoveRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInputComponent_MoveRight) == 0x000004, "Wrong alignment on EditorInputComponent_MoveRight");
static_assert(sizeof(EditorInputComponent_MoveRight) == 0x000004, "Wrong size on EditorInputComponent_MoveRight");
static_assert(offsetof(EditorInputComponent_MoveRight, Val) == 0x000000, "Member 'EditorInputComponent_MoveRight::Val' has a wrong offset!");

// Function BrickRigs.EditorInputComponent.MoveUp
// 0x0004 (0x0004 - 0x0000)
struct EditorInputComponent_MoveUp final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInputComponent_MoveUp) == 0x000004, "Wrong alignment on EditorInputComponent_MoveUp");
static_assert(sizeof(EditorInputComponent_MoveUp) == 0x000004, "Wrong size on EditorInputComponent_MoveUp");
static_assert(offsetof(EditorInputComponent_MoveUp, Val) == 0x000000, "Member 'EditorInputComponent_MoveUp::Val' has a wrong offset!");

// Function BrickRigs.EnumPropertyWidget.InitializeItem
// 0x0148 (0x0148 - 0x0000)
struct EnumPropertyWidget_InitializeItem final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               OutParams;                                         // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumPropertyWidget_InitializeItem) == 0x000008, "Wrong alignment on EnumPropertyWidget_InitializeItem");
static_assert(sizeof(EnumPropertyWidget_InitializeItem) == 0x000148, "Wrong size on EnumPropertyWidget_InitializeItem");
static_assert(offsetof(EnumPropertyWidget_InitializeItem, Item) == 0x000000, "Member 'EnumPropertyWidget_InitializeItem::Item' has a wrong offset!");
static_assert(offsetof(EnumPropertyWidget_InitializeItem, OutParams) == 0x000008, "Member 'EnumPropertyWidget_InitializeItem::OutParams' has a wrong offset!");

// Function BrickRigs.EnumPropertyWidget.OnItemSelected
// 0x0008 (0x0008 - 0x0000)
struct EnumPropertyWidget_OnItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnumPropertyWidget_OnItemSelected) == 0x000004, "Wrong alignment on EnumPropertyWidget_OnItemSelected");
static_assert(sizeof(EnumPropertyWidget_OnItemSelected) == 0x000008, "Wrong size on EnumPropertyWidget_OnItemSelected");
static_assert(offsetof(EnumPropertyWidget_OnItemSelected, Item) == 0x000000, "Member 'EnumPropertyWidget_OnItemSelected::Item' has a wrong offset!");
static_assert(offsetof(EnumPropertyWidget_OnItemSelected, EventType) == 0x000004, "Member 'EnumPropertyWidget_OnItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.FadingPanelWidget.FadeIn
// 0x0001 (0x0001 - 0x0000)
struct FadingPanelWidget_FadeIn final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadingPanelWidget_FadeIn) == 0x000001, "Wrong alignment on FadingPanelWidget_FadeIn");
static_assert(sizeof(FadingPanelWidget_FadeIn) == 0x000001, "Wrong size on FadingPanelWidget_FadeIn");
static_assert(offsetof(FadingPanelWidget_FadeIn, bImmediate) == 0x000000, "Member 'FadingPanelWidget_FadeIn::bImmediate' has a wrong offset!");

// Function BrickRigs.FadingPanelWidget.FadeOut
// 0x0001 (0x0001 - 0x0000)
struct FadingPanelWidget_FadeOut final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadingPanelWidget_FadeOut) == 0x000001, "Wrong alignment on FadingPanelWidget_FadeOut");
static_assert(sizeof(FadingPanelWidget_FadeOut) == 0x000001, "Wrong size on FadingPanelWidget_FadeOut");
static_assert(offsetof(FadingPanelWidget_FadeOut, bImmediate) == 0x000000, "Member 'FadingPanelWidget_FadeOut::bImmediate' has a wrong offset!");

// Function BrickRigs.FadingPanelWidget.UpdateFadeAnimation
// 0x0004 (0x0004 - 0x0000)
struct FadingPanelWidget_UpdateFadeAnimation final
{
public:
	float                                         FadeAmount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadingPanelWidget_UpdateFadeAnimation) == 0x000004, "Wrong alignment on FadingPanelWidget_UpdateFadeAnimation");
static_assert(sizeof(FadingPanelWidget_UpdateFadeAnimation) == 0x000004, "Wrong size on FadingPanelWidget_UpdateFadeAnimation");
static_assert(offsetof(FadingPanelWidget_UpdateFadeAnimation, FadeAmount) == 0x000000, "Member 'FadingPanelWidget_UpdateFadeAnimation::FadeAmount' has a wrong offset!");

// Function BrickRigs.FadingPanelWidget.IsFadedIn
// 0x0001 (0x0001 - 0x0000)
struct FadingPanelWidget_IsFadedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadingPanelWidget_IsFadedIn) == 0x000001, "Wrong alignment on FadingPanelWidget_IsFadedIn");
static_assert(sizeof(FadingPanelWidget_IsFadedIn) == 0x000001, "Wrong size on FadingPanelWidget_IsFadedIn");
static_assert(offsetof(FadingPanelWidget_IsFadedIn, ReturnValue) == 0x000000, "Member 'FadingPanelWidget_IsFadedIn::ReturnValue' has a wrong offset!");

// Function BrickRigs.FadingPanelWidget.IsFadingIn
// 0x0001 (0x0001 - 0x0000)
struct FadingPanelWidget_IsFadingIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadingPanelWidget_IsFadingIn) == 0x000001, "Wrong alignment on FadingPanelWidget_IsFadingIn");
static_assert(sizeof(FadingPanelWidget_IsFadingIn) == 0x000001, "Wrong size on FadingPanelWidget_IsFadingIn");
static_assert(offsetof(FadingPanelWidget_IsFadingIn, ReturnValue) == 0x000000, "Member 'FadingPanelWidget_IsFadingIn::ReturnValue' has a wrong offset!");

// Function BrickRigs.FadingPanelWidget.IsFadingOut
// 0x0001 (0x0001 - 0x0000)
struct FadingPanelWidget_IsFadingOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadingPanelWidget_IsFadingOut) == 0x000001, "Wrong alignment on FadingPanelWidget_IsFadingOut");
static_assert(sizeof(FadingPanelWidget_IsFadingOut) == 0x000001, "Wrong size on FadingPanelWidget_IsFadingOut");
static_assert(offsetof(FadingPanelWidget_IsFadingOut, ReturnValue) == 0x000000, "Member 'FadingPanelWidget_IsFadingOut::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.EjectShell
// 0x0001 (0x0001 - 0x0000)
struct Firearm_EjectShell final
{
public:
	bool                                          bFromManualReload;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_EjectShell) == 0x000001, "Wrong alignment on Firearm_EjectShell");
static_assert(sizeof(Firearm_EjectShell) == 0x000001, "Wrong size on Firearm_EjectShell");
static_assert(offsetof(Firearm_EjectShell, bFromManualReload) == 0x000000, "Member 'Firearm_EjectShell::bFromManualReload' has a wrong offset!");

// Function BrickRigs.Firearm.SetFireMode
// 0x0001 (0x0001 - 0x0000)
struct Firearm_SetFireMode final
{
public:
	EFireMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_SetFireMode) == 0x000001, "Wrong alignment on Firearm_SetFireMode");
static_assert(sizeof(Firearm_SetFireMode) == 0x000001, "Wrong size on Firearm_SetFireMode");
static_assert(offsetof(Firearm_SetFireMode, NewMode) == 0x000000, "Member 'Firearm_SetFireMode::NewMode' has a wrong offset!");

// Function BrickRigs.Firearm.CanCock
// 0x0001 (0x0001 - 0x0000)
struct Firearm_CanCock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_CanCock) == 0x000001, "Wrong alignment on Firearm_CanCock");
static_assert(sizeof(Firearm_CanCock) == 0x000001, "Wrong size on Firearm_CanCock");
static_assert(offsetof(Firearm_CanCock, ReturnValue) == 0x000000, "Member 'Firearm_CanCock::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.CanReload
// 0x0001 (0x0001 - 0x0000)
struct Firearm_CanReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_CanReload) == 0x000001, "Wrong alignment on Firearm_CanReload");
static_assert(sizeof(Firearm_CanReload) == 0x000001, "Wrong size on Firearm_CanReload");
static_assert(offsetof(Firearm_CanReload, ReturnValue) == 0x000000, "Member 'Firearm_CanReload::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetBarrel
// 0x0008 (0x0008 - 0x0000)
struct Firearm_GetBarrel final
{
public:
	class ABarrelAttachment*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetBarrel) == 0x000008, "Wrong alignment on Firearm_GetBarrel");
static_assert(sizeof(Firearm_GetBarrel) == 0x000008, "Wrong size on Firearm_GetBarrel");
static_assert(offsetof(Firearm_GetBarrel, ReturnValue) == 0x000000, "Member 'Firearm_GetBarrel::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetChamberState
// 0x0001 (0x0001 - 0x0000)
struct Firearm_GetChamberState final
{
public:
	EChamberState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetChamberState) == 0x000001, "Wrong alignment on Firearm_GetChamberState");
static_assert(sizeof(Firearm_GetChamberState) == 0x000001, "Wrong size on Firearm_GetChamberState");
static_assert(offsetof(Firearm_GetChamberState, ReturnValue) == 0x000000, "Member 'Firearm_GetChamberState::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetFireMode
// 0x0001 (0x0001 - 0x0000)
struct Firearm_GetFireMode final
{
public:
	EFireMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetFireMode) == 0x000001, "Wrong alignment on Firearm_GetFireMode");
static_assert(sizeof(Firearm_GetFireMode) == 0x000001, "Wrong size on Firearm_GetFireMode");
static_assert(offsetof(Firearm_GetFireMode, ReturnValue) == 0x000000, "Member 'Firearm_GetFireMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetMagazine
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetMagazine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetMagazine) == 0x000004, "Wrong alignment on Firearm_GetMagazine");
static_assert(sizeof(Firearm_GetMagazine) == 0x000004, "Wrong size on Firearm_GetMagazine");
static_assert(offsetof(Firearm_GetMagazine, ReturnValue) == 0x000000, "Member 'Firearm_GetMagazine::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetMagazineCapacity
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetMagazineCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetMagazineCapacity) == 0x000004, "Wrong alignment on Firearm_GetMagazineCapacity");
static_assert(sizeof(Firearm_GetMagazineCapacity) == 0x000004, "Wrong size on Firearm_GetMagazineCapacity");
static_assert(offsetof(Firearm_GetMagazineCapacity, ReturnValue) == 0x000000, "Member 'Firearm_GetMagazineCapacity::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetNumFireModes
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetNumFireModes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetNumFireModes) == 0x000004, "Wrong alignment on Firearm_GetNumFireModes");
static_assert(sizeof(Firearm_GetNumFireModes) == 0x000004, "Wrong size on Firearm_GetNumFireModes");
static_assert(offsetof(Firearm_GetNumFireModes, ReturnValue) == 0x000000, "Member 'Firearm_GetNumFireModes::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.GetSight
// 0x0008 (0x0008 - 0x0000)
struct Firearm_GetSight final
{
public:
	class ASightAttachment*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetSight) == 0x000008, "Wrong alignment on Firearm_GetSight");
static_assert(sizeof(Firearm_GetSight) == 0x000008, "Wrong size on Firearm_GetSight");
static_assert(offsetof(Firearm_GetSight, ReturnValue) == 0x000000, "Member 'Firearm_GetSight::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.HasFireMode
// 0x0002 (0x0002 - 0x0000)
struct Firearm_HasFireMode final
{
public:
	EFireMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_HasFireMode) == 0x000001, "Wrong alignment on Firearm_HasFireMode");
static_assert(sizeof(Firearm_HasFireMode) == 0x000002, "Wrong size on Firearm_HasFireMode");
static_assert(offsetof(Firearm_HasFireMode, NewMode) == 0x000000, "Member 'Firearm_HasFireMode::NewMode' has a wrong offset!");
static_assert(offsetof(Firearm_HasFireMode, ReturnValue) == 0x000001, "Member 'Firearm_HasFireMode::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.HasMagazine
// 0x0001 (0x0001 - 0x0000)
struct Firearm_HasMagazine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_HasMagazine) == 0x000001, "Wrong alignment on Firearm_HasMagazine");
static_assert(sizeof(Firearm_HasMagazine) == 0x000001, "Wrong size on Firearm_HasMagazine");
static_assert(offsetof(Firearm_HasMagazine, ReturnValue) == 0x000000, "Member 'Firearm_HasMagazine::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.HasToCock
// 0x0001 (0x0001 - 0x0000)
struct Firearm_HasToCock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_HasToCock) == 0x000001, "Wrong alignment on Firearm_HasToCock");
static_assert(sizeof(Firearm_HasToCock) == 0x000001, "Wrong size on Firearm_HasToCock");
static_assert(offsetof(Firearm_HasToCock, ReturnValue) == 0x000000, "Member 'Firearm_HasToCock::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.HasToReload
// 0x0001 (0x0001 - 0x0000)
struct Firearm_HasToReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_HasToReload) == 0x000001, "Wrong alignment on Firearm_HasToReload");
static_assert(sizeof(Firearm_HasToReload) == 0x000001, "Wrong size on Firearm_HasToReload");
static_assert(offsetof(Firearm_HasToReload, ReturnValue) == 0x000000, "Member 'Firearm_HasToReload::ReturnValue' has a wrong offset!");

// Function BrickRigs.Firearm.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct Firearm_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_IsFiring) == 0x000001, "Wrong alignment on Firearm_IsFiring");
static_assert(sizeof(Firearm_IsFiring) == 0x000001, "Wrong size on Firearm_IsFiring");
static_assert(offsetof(Firearm_IsFiring, ReturnValue) == 0x000000, "Member 'Firearm_IsFiring::ReturnValue' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct PingIndicatorWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_SetColorStyle) == 0x000001, "Wrong alignment on PingIndicatorWidget_SetColorStyle");
static_assert(sizeof(PingIndicatorWidget_SetColorStyle) == 0x000001, "Wrong size on PingIndicatorWidget_SetColorStyle");
static_assert(offsetof(PingIndicatorWidget_SetColorStyle, NewStyle) == 0x000000, "Member 'PingIndicatorWidget_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.SetMinDisplayPing
// 0x0004 (0x0004 - 0x0000)
struct PingIndicatorWidget_SetMinDisplayPing final
{
public:
	int32                                         InPing;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_SetMinDisplayPing) == 0x000004, "Wrong alignment on PingIndicatorWidget_SetMinDisplayPing");
static_assert(sizeof(PingIndicatorWidget_SetMinDisplayPing) == 0x000004, "Wrong size on PingIndicatorWidget_SetMinDisplayPing");
static_assert(offsetof(PingIndicatorWidget_SetMinDisplayPing, InPing) == 0x000000, "Member 'PingIndicatorWidget_SetMinDisplayPing::InPing' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.SetPing
// 0x0004 (0x0004 - 0x0000)
struct PingIndicatorWidget_SetPing final
{
public:
	int32                                         InPing;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_SetPing) == 0x000004, "Wrong alignment on PingIndicatorWidget_SetPing");
static_assert(sizeof(PingIndicatorWidget_SetPing) == 0x000004, "Wrong size on PingIndicatorWidget_SetPing");
static_assert(offsetof(PingIndicatorWidget_SetPing, InPing) == 0x000000, "Member 'PingIndicatorWidget_SetPing::InPing' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct PingIndicatorWidget_SetPlayerState final
{
public:
	class ABrickPlayerState*                      InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_SetPlayerState) == 0x000008, "Wrong alignment on PingIndicatorWidget_SetPlayerState");
static_assert(sizeof(PingIndicatorWidget_SetPlayerState) == 0x000008, "Wrong size on PingIndicatorWidget_SetPlayerState");
static_assert(offsetof(PingIndicatorWidget_SetPlayerState, InPlayerState) == 0x000000, "Member 'PingIndicatorWidget_SetPlayerState::InPlayerState' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct PingIndicatorWidget_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_SetStyleState) == 0x000001, "Wrong alignment on PingIndicatorWidget_SetStyleState");
static_assert(sizeof(PingIndicatorWidget_SetStyleState) == 0x000001, "Wrong size on PingIndicatorWidget_SetStyleState");
static_assert(offsetof(PingIndicatorWidget_SetStyleState, NewState) == 0x000000, "Member 'PingIndicatorWidget_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.SetTextStyle
// 0x0001 (0x0001 - 0x0000)
struct PingIndicatorWidget_SetTextStyle final
{
public:
	EBrickUITextStyle                             NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_SetTextStyle) == 0x000001, "Wrong alignment on PingIndicatorWidget_SetTextStyle");
static_assert(sizeof(PingIndicatorWidget_SetTextStyle) == 0x000001, "Wrong size on PingIndicatorWidget_SetTextStyle");
static_assert(offsetof(PingIndicatorWidget_SetTextStyle, NewStyle) == 0x000000, "Member 'PingIndicatorWidget_SetTextStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.PingIndicatorWidget.UpdatePing
// 0x0004 (0x0004 - 0x0000)
struct PingIndicatorWidget_UpdatePing final
{
public:
	int32                                         InPing;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIndicatorWidget_UpdatePing) == 0x000004, "Wrong alignment on PingIndicatorWidget_UpdatePing");
static_assert(sizeof(PingIndicatorWidget_UpdatePing) == 0x000004, "Wrong size on PingIndicatorWidget_UpdatePing");
static_assert(offsetof(PingIndicatorWidget_UpdatePing, InPing) == 0x000000, "Member 'PingIndicatorWidget_UpdatePing::InPing' has a wrong offset!");

// Function BrickRigs.FirearmComponent.OnRep_FirearmState
// 0x0006 (0x0006 - 0x0000)
struct FirearmComponent_OnRep_FirearmState final
{
public:
	struct FFirearmState                          PrevState;                                         // 0x0000(0x0006)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirearmComponent_OnRep_FirearmState) == 0x000002, "Wrong alignment on FirearmComponent_OnRep_FirearmState");
static_assert(sizeof(FirearmComponent_OnRep_FirearmState) == 0x000006, "Wrong size on FirearmComponent_OnRep_FirearmState");
static_assert(offsetof(FirearmComponent_OnRep_FirearmState, PrevState) == 0x000000, "Member 'FirearmComponent_OnRep_FirearmState::PrevState' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.AddPopupWidget
// 0x0008 (0x0008 - 0x0000)
struct PopupContainerWidget_AddPopupWidget final
{
public:
	class UPopupWidget*                           Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_AddPopupWidget) == 0x000008, "Wrong alignment on PopupContainerWidget_AddPopupWidget");
static_assert(sizeof(PopupContainerWidget_AddPopupWidget) == 0x000008, "Wrong size on PopupContainerWidget_AddPopupWidget");
static_assert(offsetof(PopupContainerWidget_AddPopupWidget, Widget) == 0x000000, "Member 'PopupContainerWidget_AddPopupWidget::Widget' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.CreateCancelButton
// 0x0008 (0x0008 - 0x0000)
struct PopupContainerWidget_CreateCancelButton final
{
public:
	class UMenuButtonWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_CreateCancelButton) == 0x000008, "Wrong alignment on PopupContainerWidget_CreateCancelButton");
static_assert(sizeof(PopupContainerWidget_CreateCancelButton) == 0x000008, "Wrong size on PopupContainerWidget_CreateCancelButton");
static_assert(offsetof(PopupContainerWidget_CreateCancelButton, ReturnValue) == 0x000000, "Member 'PopupContainerWidget_CreateCancelButton::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.CreateConfirmButton
// 0x0008 (0x0008 - 0x0000)
struct PopupContainerWidget_CreateConfirmButton final
{
public:
	class UMenuButtonWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_CreateConfirmButton) == 0x000008, "Wrong alignment on PopupContainerWidget_CreateConfirmButton");
static_assert(sizeof(PopupContainerWidget_CreateConfirmButton) == 0x000008, "Wrong size on PopupContainerWidget_CreateConfirmButton");
static_assert(offsetof(PopupContainerWidget_CreateConfirmButton, ReturnValue) == 0x000000, "Member 'PopupContainerWidget_CreateConfirmButton::ReturnValue' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.SetButtonPanelVisibility
// 0x0001 (0x0001 - 0x0000)
struct PopupContainerWidget_SetButtonPanelVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_SetButtonPanelVisibility) == 0x000001, "Wrong alignment on PopupContainerWidget_SetButtonPanelVisibility");
static_assert(sizeof(PopupContainerWidget_SetButtonPanelVisibility) == 0x000001, "Wrong size on PopupContainerWidget_SetButtonPanelVisibility");
static_assert(offsetof(PopupContainerWidget_SetButtonPanelVisibility, bNewVisible) == 0x000000, "Member 'PopupContainerWidget_SetButtonPanelVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct PopupContainerWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_SetColorStyle) == 0x000001, "Wrong alignment on PopupContainerWidget_SetColorStyle");
static_assert(sizeof(PopupContainerWidget_SetColorStyle) == 0x000001, "Wrong size on PopupContainerWidget_SetColorStyle");
static_assert(offsetof(PopupContainerWidget_SetColorStyle, InColorStyle) == 0x000000, "Member 'PopupContainerWidget_SetColorStyle::InColorStyle' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.UpdateButtonPanelVisibility
// 0x0001 (0x0001 - 0x0000)
struct PopupContainerWidget_UpdateButtonPanelVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_UpdateButtonPanelVisibility) == 0x000001, "Wrong alignment on PopupContainerWidget_UpdateButtonPanelVisibility");
static_assert(sizeof(PopupContainerWidget_UpdateButtonPanelVisibility) == 0x000001, "Wrong size on PopupContainerWidget_UpdateButtonPanelVisibility");
static_assert(offsetof(PopupContainerWidget_UpdateButtonPanelVisibility, bNewVisible) == 0x000000, "Member 'PopupContainerWidget_UpdateButtonPanelVisibility::bNewVisible' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.UpdateColorStyle
// 0x0001 (0x0001 - 0x0000)
struct PopupContainerWidget_UpdateColorStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_UpdateColorStyle) == 0x000001, "Wrong alignment on PopupContainerWidget_UpdateColorStyle");
static_assert(sizeof(PopupContainerWidget_UpdateColorStyle) == 0x000001, "Wrong size on PopupContainerWidget_UpdateColorStyle");
static_assert(offsetof(PopupContainerWidget_UpdateColorStyle, InColorStyle) == 0x000000, "Member 'PopupContainerWidget_UpdateColorStyle::InColorStyle' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.UpdateContentSlot
// 0x0002 (0x0002 - 0x0000)
struct PopupContainerWidget_UpdateContentSlot final
{
public:
	bool                                          bShowContent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPopupSizeRule                                SizeRule;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_UpdateContentSlot) == 0x000001, "Wrong alignment on PopupContainerWidget_UpdateContentSlot");
static_assert(sizeof(PopupContainerWidget_UpdateContentSlot) == 0x000002, "Wrong size on PopupContainerWidget_UpdateContentSlot");
static_assert(offsetof(PopupContainerWidget_UpdateContentSlot, bShowContent) == 0x000000, "Member 'PopupContainerWidget_UpdateContentSlot::bShowContent' has a wrong offset!");
static_assert(offsetof(PopupContainerWidget_UpdateContentSlot, SizeRule) == 0x000001, "Member 'PopupContainerWidget_UpdateContentSlot::SizeRule' has a wrong offset!");

// Function BrickRigs.PopupContainerWidget.UpdateTitleText
// 0x0018 (0x0018 - 0x0000)
struct PopupContainerWidget_UpdateTitleText final
{
public:
	class FText                                   NewTitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupContainerWidget_UpdateTitleText) == 0x000008, "Wrong alignment on PopupContainerWidget_UpdateTitleText");
static_assert(sizeof(PopupContainerWidget_UpdateTitleText) == 0x000018, "Wrong size on PopupContainerWidget_UpdateTitleText");
static_assert(offsetof(PopupContainerWidget_UpdateTitleText, NewTitle) == 0x000000, "Member 'PopupContainerWidget_UpdateTitleText::NewTitle' has a wrong offset!");

// Function BrickRigs.PlacableObjectWidget.UpdateIsFilterWidget
// 0x0001 (0x0001 - 0x0000)
struct PlacableObjectWidget_UpdateIsFilterWidget final
{
public:
	bool                                          bNewIsFilter;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlacableObjectWidget_UpdateIsFilterWidget) == 0x000001, "Wrong alignment on PlacableObjectWidget_UpdateIsFilterWidget");
static_assert(sizeof(PlacableObjectWidget_UpdateIsFilterWidget) == 0x000001, "Wrong size on PlacableObjectWidget_UpdateIsFilterWidget");
static_assert(offsetof(PlacableObjectWidget_UpdateIsFilterWidget, bNewIsFilter) == 0x000000, "Member 'PlacableObjectWidget_UpdateIsFilterWidget::bNewIsFilter' has a wrong offset!");

// Function BrickRigs.PlayersMenuWidget.UpdateCanKickPlayer
// 0x0001 (0x0001 - 0x0000)
struct PlayersMenuWidget_UpdateCanKickPlayer final
{
public:
	bool                                          bCanKick;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersMenuWidget_UpdateCanKickPlayer) == 0x000001, "Wrong alignment on PlayersMenuWidget_UpdateCanKickPlayer");
static_assert(sizeof(PlayersMenuWidget_UpdateCanKickPlayer) == 0x000001, "Wrong size on PlayersMenuWidget_UpdateCanKickPlayer");
static_assert(offsetof(PlayersMenuWidget_UpdateCanKickPlayer, bCanKick) == 0x000000, "Member 'PlayersMenuWidget_UpdateCanKickPlayer::bCanKick' has a wrong offset!");

// Function BrickRigs.PlayersMenuWidget.UpdateCanShowPlayerProfile
// 0x0001 (0x0001 - 0x0000)
struct PlayersMenuWidget_UpdateCanShowPlayerProfile final
{
public:
	bool                                          bCanShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersMenuWidget_UpdateCanShowPlayerProfile) == 0x000001, "Wrong alignment on PlayersMenuWidget_UpdateCanShowPlayerProfile");
static_assert(sizeof(PlayersMenuWidget_UpdateCanShowPlayerProfile) == 0x000001, "Wrong size on PlayersMenuWidget_UpdateCanShowPlayerProfile");
static_assert(offsetof(PlayersMenuWidget_UpdateCanShowPlayerProfile, bCanShow) == 0x000000, "Member 'PlayersMenuWidget_UpdateCanShowPlayerProfile::bCanShow' has a wrong offset!");

// Function BrickRigs.PropertyContainerInputComponent.GetCopyValueEnabled
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerInputComponent_GetCopyValueEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerInputComponent_GetCopyValueEnabled) == 0x000001, "Wrong alignment on PropertyContainerInputComponent_GetCopyValueEnabled");
static_assert(sizeof(PropertyContainerInputComponent_GetCopyValueEnabled) == 0x000001, "Wrong size on PropertyContainerInputComponent_GetCopyValueEnabled");
static_assert(offsetof(PropertyContainerInputComponent_GetCopyValueEnabled, ReturnValue) == 0x000000, "Member 'PropertyContainerInputComponent_GetCopyValueEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyContainerInputComponent.GetPasteValueEnabled
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerInputComponent_GetPasteValueEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerInputComponent_GetPasteValueEnabled) == 0x000001, "Wrong alignment on PropertyContainerInputComponent_GetPasteValueEnabled");
static_assert(sizeof(PropertyContainerInputComponent_GetPasteValueEnabled) == 0x000001, "Wrong size on PropertyContainerInputComponent_GetPasteValueEnabled");
static_assert(offsetof(PropertyContainerInputComponent_GetPasteValueEnabled, ReturnValue) == 0x000000, "Member 'PropertyContainerInputComponent_GetPasteValueEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyContainerInputComponent.GetPickValueEnabled
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerInputComponent_GetPickValueEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerInputComponent_GetPickValueEnabled) == 0x000001, "Wrong alignment on PropertyContainerInputComponent_GetPickValueEnabled");
static_assert(sizeof(PropertyContainerInputComponent_GetPickValueEnabled) == 0x000001, "Wrong size on PropertyContainerInputComponent_GetPickValueEnabled");
static_assert(offsetof(PropertyContainerInputComponent_GetPickValueEnabled, ReturnValue) == 0x000000, "Member 'PropertyContainerInputComponent_GetPickValueEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyContainerInputComponent.GetSelectByValueEnabled
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerInputComponent_GetSelectByValueEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerInputComponent_GetSelectByValueEnabled) == 0x000001, "Wrong alignment on PropertyContainerInputComponent_GetSelectByValueEnabled");
static_assert(sizeof(PropertyContainerInputComponent_GetSelectByValueEnabled) == 0x000001, "Wrong size on PropertyContainerInputComponent_GetSelectByValueEnabled");
static_assert(offsetof(PropertyContainerInputComponent_GetSelectByValueEnabled, ReturnValue) == 0x000000, "Member 'PropertyContainerInputComponent_GetSelectByValueEnabled::ReturnValue' has a wrong offset!");

// Function BrickRigs.FlashSequenceItemWidget.UpdateIsLit
// 0x0001 (0x0001 - 0x0000)
struct FlashSequenceItemWidget_UpdateIsLit final
{
public:
	bool                                          bNewLit;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlashSequenceItemWidget_UpdateIsLit) == 0x000001, "Wrong alignment on FlashSequenceItemWidget_UpdateIsLit");
static_assert(sizeof(FlashSequenceItemWidget_UpdateIsLit) == 0x000001, "Wrong size on FlashSequenceItemWidget_UpdateIsLit");
static_assert(offsetof(FlashSequenceItemWidget_UpdateIsLit, bNewLit) == 0x000000, "Member 'FlashSequenceItemWidget_UpdateIsLit::bNewLit' has a wrong offset!");

// Function BrickRigs.PlayerIconWidget.UpdatePlayerIcon
// 0x0004 (0x0004 - 0x0000)
struct PlayerIconWidget_UpdatePlayerIcon final
{
public:
	bool                                          bNewIsLocalPlayer;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsTeamLeader;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterStateOfHealth                       NewStateOfHealth;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCanBeDamaged;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerIconWidget_UpdatePlayerIcon) == 0x000001, "Wrong alignment on PlayerIconWidget_UpdatePlayerIcon");
static_assert(sizeof(PlayerIconWidget_UpdatePlayerIcon) == 0x000004, "Wrong size on PlayerIconWidget_UpdatePlayerIcon");
static_assert(offsetof(PlayerIconWidget_UpdatePlayerIcon, bNewIsLocalPlayer) == 0x000000, "Member 'PlayerIconWidget_UpdatePlayerIcon::bNewIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(PlayerIconWidget_UpdatePlayerIcon, bNewIsTeamLeader) == 0x000001, "Member 'PlayerIconWidget_UpdatePlayerIcon::bNewIsTeamLeader' has a wrong offset!");
static_assert(offsetof(PlayerIconWidget_UpdatePlayerIcon, NewStateOfHealth) == 0x000002, "Member 'PlayerIconWidget_UpdatePlayerIcon::NewStateOfHealth' has a wrong offset!");
static_assert(offsetof(PlayerIconWidget_UpdatePlayerIcon, bNewCanBeDamaged) == 0x000003, "Member 'PlayerIconWidget_UpdatePlayerIcon::bNewCanBeDamaged' has a wrong offset!");

// Function BrickRigs.PropertiesPanelWidget.AddCategoryWidget
// 0x0010 (0x0010 - 0x0000)
struct PropertiesPanelWidget_AddCategoryWidget final
{
public:
	class UPropertyCategoryWidget*                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PropertiesPanelWidget_AddCategoryWidget) == 0x000008, "Wrong alignment on PropertiesPanelWidget_AddCategoryWidget");
static_assert(sizeof(PropertiesPanelWidget_AddCategoryWidget) == 0x000010, "Wrong size on PropertiesPanelWidget_AddCategoryWidget");
static_assert(offsetof(PropertiesPanelWidget_AddCategoryWidget, Widget) == 0x000000, "Member 'PropertiesPanelWidget_AddCategoryWidget::Widget' has a wrong offset!");
static_assert(offsetof(PropertiesPanelWidget_AddCategoryWidget, Index_0) == 0x000008, "Member 'PropertiesPanelWidget_AddCategoryWidget::Index_0' has a wrong offset!");

// Function BrickRigs.PropertiesPanelWidget.AddProperties
// 0x0030 (0x0030 - 0x0000)
struct PropertiesPanelWidget_AddProperties final
{
public:
	TArray<class UObject*>                        InContainers;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBrickPropertyReflectionFilter         InFilter;                                          // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertiesPanelWidget_AddProperties) == 0x000008, "Wrong alignment on PropertiesPanelWidget_AddProperties");
static_assert(sizeof(PropertiesPanelWidget_AddProperties) == 0x000030, "Wrong size on PropertiesPanelWidget_AddProperties");
static_assert(offsetof(PropertiesPanelWidget_AddProperties, InContainers) == 0x000000, "Member 'PropertiesPanelWidget_AddProperties::InContainers' has a wrong offset!");
static_assert(offsetof(PropertiesPanelWidget_AddProperties, InFilter) == 0x000010, "Member 'PropertiesPanelWidget_AddProperties::InFilter' has a wrong offset!");

// Function BrickRigs.FluMathStatics.AxisToIndex
// 0x0008 (0x0008 - 0x0000)
struct FluMathStatics_AxisToIndex final
{
public:
	EAxis                                         Axis;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_AxisToIndex) == 0x000004, "Wrong alignment on FluMathStatics_AxisToIndex");
static_assert(sizeof(FluMathStatics_AxisToIndex) == 0x000008, "Wrong size on FluMathStatics_AxisToIndex");
static_assert(offsetof(FluMathStatics_AxisToIndex, Axis) == 0x000000, "Member 'FluMathStatics_AxisToIndex::Axis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_AxisToIndex, ReturnValue) == 0x000004, "Member 'FluMathStatics_AxisToIndex::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.BitmaskHasFlag
// 0x0008 (0x0008 - 0x0000)
struct FluMathStatics_BitmaskHasFlag final
{
public:
	int32                                         BitMask;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index_0;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluMathStatics_BitmaskHasFlag) == 0x000004, "Wrong alignment on FluMathStatics_BitmaskHasFlag");
static_assert(sizeof(FluMathStatics_BitmaskHasFlag) == 0x000008, "Wrong size on FluMathStatics_BitmaskHasFlag");
static_assert(offsetof(FluMathStatics_BitmaskHasFlag, BitMask) == 0x000000, "Member 'FluMathStatics_BitmaskHasFlag::BitMask' has a wrong offset!");
static_assert(offsetof(FluMathStatics_BitmaskHasFlag, Index_0) == 0x000004, "Member 'FluMathStatics_BitmaskHasFlag::Index_0' has a wrong offset!");
static_assert(offsetof(FluMathStatics_BitmaskHasFlag, ReturnValue) == 0x000005, "Member 'FluMathStatics_BitmaskHasFlag::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.BitmaskSetFlag
// 0x000C (0x000C - 0x0000)
struct FluMathStatics_BitmaskSetFlag final
{
public:
	int32                                         BitMask;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index_0;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlag;                                             // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_BitmaskSetFlag) == 0x000004, "Wrong alignment on FluMathStatics_BitmaskSetFlag");
static_assert(sizeof(FluMathStatics_BitmaskSetFlag) == 0x00000C, "Wrong size on FluMathStatics_BitmaskSetFlag");
static_assert(offsetof(FluMathStatics_BitmaskSetFlag, BitMask) == 0x000000, "Member 'FluMathStatics_BitmaskSetFlag::BitMask' has a wrong offset!");
static_assert(offsetof(FluMathStatics_BitmaskSetFlag, Index_0) == 0x000004, "Member 'FluMathStatics_BitmaskSetFlag::Index_0' has a wrong offset!");
static_assert(offsetof(FluMathStatics_BitmaskSetFlag, bFlag) == 0x000005, "Member 'FluMathStatics_BitmaskSetFlag::bFlag' has a wrong offset!");
static_assert(offsetof(FluMathStatics_BitmaskSetFlag, ReturnValue) == 0x000008, "Member 'FluMathStatics_BitmaskSetFlag::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.IndexToAxis
// 0x0008 (0x0008 - 0x0000)
struct FluMathStatics_IndexToAxis final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluMathStatics_IndexToAxis) == 0x000004, "Wrong alignment on FluMathStatics_IndexToAxis");
static_assert(sizeof(FluMathStatics_IndexToAxis) == 0x000008, "Wrong size on FluMathStatics_IndexToAxis");
static_assert(offsetof(FluMathStatics_IndexToAxis, Index_0) == 0x000000, "Member 'FluMathStatics_IndexToAxis::Index_0' has a wrong offset!");
static_assert(offsetof(FluMathStatics_IndexToAxis, ReturnValue) == 0x000004, "Member 'FluMathStatics_IndexToAxis::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.IntegrateEllipseArcLength
// 0x0014 (0x0014 - 0x0000)
struct FluMathStatics_IntegrateEllipseArcLength final
{
public:
	struct FVector2D                              Radius;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleRad;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_IntegrateEllipseArcLength) == 0x000004, "Wrong alignment on FluMathStatics_IntegrateEllipseArcLength");
static_assert(sizeof(FluMathStatics_IntegrateEllipseArcLength) == 0x000014, "Wrong size on FluMathStatics_IntegrateEllipseArcLength");
static_assert(offsetof(FluMathStatics_IntegrateEllipseArcLength, Radius) == 0x000000, "Member 'FluMathStatics_IntegrateEllipseArcLength::Radius' has a wrong offset!");
static_assert(offsetof(FluMathStatics_IntegrateEllipseArcLength, AngleRad) == 0x000008, "Member 'FluMathStatics_IntegrateEllipseArcLength::AngleRad' has a wrong offset!");
static_assert(offsetof(FluMathStatics_IntegrateEllipseArcLength, Steps) == 0x00000C, "Member 'FluMathStatics_IntegrateEllipseArcLength::Steps' has a wrong offset!");
static_assert(offsetof(FluMathStatics_IntegrateEllipseArcLength, ReturnValue) == 0x000010, "Member 'FluMathStatics_IntegrateEllipseArcLength::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.IsAxisSignedPositive
// 0x0002 (0x0002 - 0x0000)
struct FluMathStatics_IsAxisSignedPositive final
{
public:
	EFluAxisSigned                                Axis;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_IsAxisSignedPositive) == 0x000001, "Wrong alignment on FluMathStatics_IsAxisSignedPositive");
static_assert(sizeof(FluMathStatics_IsAxisSignedPositive) == 0x000002, "Wrong size on FluMathStatics_IsAxisSignedPositive");
static_assert(offsetof(FluMathStatics_IsAxisSignedPositive, Axis) == 0x000000, "Member 'FluMathStatics_IsAxisSignedPositive::Axis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_IsAxisSignedPositive, ReturnValue) == 0x000001, "Member 'FluMathStatics_IsAxisSignedPositive::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.MakeAxisSigned
// 0x0003 (0x0003 - 0x0000)
struct FluMathStatics_MakeAxisSigned final
{
public:
	EAxis                                         Axis;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositiveAxis;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluAxisSigned                                ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_MakeAxisSigned) == 0x000001, "Wrong alignment on FluMathStatics_MakeAxisSigned");
static_assert(sizeof(FluMathStatics_MakeAxisSigned) == 0x000003, "Wrong size on FluMathStatics_MakeAxisSigned");
static_assert(offsetof(FluMathStatics_MakeAxisSigned, Axis) == 0x000000, "Member 'FluMathStatics_MakeAxisSigned::Axis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_MakeAxisSigned, bPositiveAxis) == 0x000001, "Member 'FluMathStatics_MakeAxisSigned::bPositiveAxis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_MakeAxisSigned, ReturnValue) == 0x000002, "Member 'FluMathStatics_MakeAxisSigned::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.MakeBitmask
// 0x0008 (0x0008 - 0x0000)
struct FluMathStatics_MakeBitmask final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_MakeBitmask) == 0x000004, "Wrong alignment on FluMathStatics_MakeBitmask");
static_assert(sizeof(FluMathStatics_MakeBitmask) == 0x000008, "Wrong size on FluMathStatics_MakeBitmask");
static_assert(offsetof(FluMathStatics_MakeBitmask, Index_0) == 0x000000, "Member 'FluMathStatics_MakeBitmask::Index_0' has a wrong offset!");
static_assert(offsetof(FluMathStatics_MakeBitmask, ReturnValue) == 0x000004, "Member 'FluMathStatics_MakeBitmask::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.QuatToNiceRotator
// 0x0020 (0x0020 - 0x0000)
struct FluMathStatics_QuatToNiceRotator final
{
public:
	struct FQuat                                  Quat;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluMathStatics_QuatToNiceRotator) == 0x000010, "Wrong alignment on FluMathStatics_QuatToNiceRotator");
static_assert(sizeof(FluMathStatics_QuatToNiceRotator) == 0x000020, "Wrong size on FluMathStatics_QuatToNiceRotator");
static_assert(offsetof(FluMathStatics_QuatToNiceRotator, Quat) == 0x000000, "Member 'FluMathStatics_QuatToNiceRotator::Quat' has a wrong offset!");
static_assert(offsetof(FluMathStatics_QuatToNiceRotator, ReturnValue) == 0x000010, "Member 'FluMathStatics_QuatToNiceRotator::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.RemapAxisLockAxis
// 0x0003 (0x0003 - 0x0000)
struct FluMathStatics_RemapAxisLockAxis final
{
public:
	EFluAxisLock                                  AxisLock;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         Axis;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_RemapAxisLockAxis) == 0x000001, "Wrong alignment on FluMathStatics_RemapAxisLockAxis");
static_assert(sizeof(FluMathStatics_RemapAxisLockAxis) == 0x000003, "Wrong size on FluMathStatics_RemapAxisLockAxis");
static_assert(offsetof(FluMathStatics_RemapAxisLockAxis, AxisLock) == 0x000000, "Member 'FluMathStatics_RemapAxisLockAxis::AxisLock' has a wrong offset!");
static_assert(offsetof(FluMathStatics_RemapAxisLockAxis, Axis) == 0x000001, "Member 'FluMathStatics_RemapAxisLockAxis::Axis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_RemapAxisLockAxis, ReturnValue) == 0x000002, "Member 'FluMathStatics_RemapAxisLockAxis::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.RemapAxisLockIndex
// 0x000C (0x000C - 0x0000)
struct FluMathStatics_RemapAxisLockIndex final
{
public:
	EFluAxisLock                                  AxisLock;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AxisIndex;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_RemapAxisLockIndex) == 0x000004, "Wrong alignment on FluMathStatics_RemapAxisLockIndex");
static_assert(sizeof(FluMathStatics_RemapAxisLockIndex) == 0x00000C, "Wrong size on FluMathStatics_RemapAxisLockIndex");
static_assert(offsetof(FluMathStatics_RemapAxisLockIndex, AxisLock) == 0x000000, "Member 'FluMathStatics_RemapAxisLockIndex::AxisLock' has a wrong offset!");
static_assert(offsetof(FluMathStatics_RemapAxisLockIndex, AxisIndex) == 0x000004, "Member 'FluMathStatics_RemapAxisLockIndex::AxisIndex' has a wrong offset!");
static_assert(offsetof(FluMathStatics_RemapAxisLockIndex, ReturnValue) == 0x000008, "Member 'FluMathStatics_RemapAxisLockIndex::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.RotateVector2D90
// 0x0014 (0x0014 - 0x0000)
struct FluMathStatics_RotateVector2D90 final
{
public:
	struct FVector2D                              Vector;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFlips;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_RotateVector2D90) == 0x000004, "Wrong alignment on FluMathStatics_RotateVector2D90");
static_assert(sizeof(FluMathStatics_RotateVector2D90) == 0x000014, "Wrong size on FluMathStatics_RotateVector2D90");
static_assert(offsetof(FluMathStatics_RotateVector2D90, Vector) == 0x000000, "Member 'FluMathStatics_RotateVector2D90::Vector' has a wrong offset!");
static_assert(offsetof(FluMathStatics_RotateVector2D90, NumFlips) == 0x000008, "Member 'FluMathStatics_RotateVector2D90::NumFlips' has a wrong offset!");
static_assert(offsetof(FluMathStatics_RotateVector2D90, ReturnValue) == 0x00000C, "Member 'FluMathStatics_RotateVector2D90::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.SplitAxisSigned
// 0x0003 (0x0003 - 0x0000)
struct FluMathStatics_SplitAxisSigned final
{
public:
	EFluAxisSigned                                Axis;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         OutAxis;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutPositiveAxis;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_SplitAxisSigned) == 0x000001, "Wrong alignment on FluMathStatics_SplitAxisSigned");
static_assert(sizeof(FluMathStatics_SplitAxisSigned) == 0x000003, "Wrong size on FluMathStatics_SplitAxisSigned");
static_assert(offsetof(FluMathStatics_SplitAxisSigned, Axis) == 0x000000, "Member 'FluMathStatics_SplitAxisSigned::Axis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_SplitAxisSigned, OutAxis) == 0x000001, "Member 'FluMathStatics_SplitAxisSigned::OutAxis' has a wrong offset!");
static_assert(offsetof(FluMathStatics_SplitAxisSigned, bOutPositiveAxis) == 0x000002, "Member 'FluMathStatics_SplitAxisSigned::bOutPositiveAxis' has a wrong offset!");

// Function BrickRigs.FluMathStatics.Vector2DAngle2Deg
// 0x0014 (0x0014 - 0x0000)
struct FluMathStatics_Vector2DAngle2Deg final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_Vector2DAngle2Deg) == 0x000004, "Wrong alignment on FluMathStatics_Vector2DAngle2Deg");
static_assert(sizeof(FluMathStatics_Vector2DAngle2Deg) == 0x000014, "Wrong size on FluMathStatics_Vector2DAngle2Deg");
static_assert(offsetof(FluMathStatics_Vector2DAngle2Deg, A) == 0x000000, "Member 'FluMathStatics_Vector2DAngle2Deg::A' has a wrong offset!");
static_assert(offsetof(FluMathStatics_Vector2DAngle2Deg, B) == 0x000008, "Member 'FluMathStatics_Vector2DAngle2Deg::B' has a wrong offset!");
static_assert(offsetof(FluMathStatics_Vector2DAngle2Deg, ReturnValue) == 0x000010, "Member 'FluMathStatics_Vector2DAngle2Deg::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.Vector2DAngle2Rad
// 0x0014 (0x0014 - 0x0000)
struct FluMathStatics_Vector2DAngle2Rad final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_Vector2DAngle2Rad) == 0x000004, "Wrong alignment on FluMathStatics_Vector2DAngle2Rad");
static_assert(sizeof(FluMathStatics_Vector2DAngle2Rad) == 0x000014, "Wrong size on FluMathStatics_Vector2DAngle2Rad");
static_assert(offsetof(FluMathStatics_Vector2DAngle2Rad, A) == 0x000000, "Member 'FluMathStatics_Vector2DAngle2Rad::A' has a wrong offset!");
static_assert(offsetof(FluMathStatics_Vector2DAngle2Rad, B) == 0x000008, "Member 'FluMathStatics_Vector2DAngle2Rad::B' has a wrong offset!");
static_assert(offsetof(FluMathStatics_Vector2DAngle2Rad, ReturnValue) == 0x000010, "Member 'FluMathStatics_Vector2DAngle2Rad::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.Vector2DAngleDeg
// 0x000C (0x000C - 0x0000)
struct FluMathStatics_Vector2DAngleDeg final
{
public:
	struct FVector2D                              Vector;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_Vector2DAngleDeg) == 0x000004, "Wrong alignment on FluMathStatics_Vector2DAngleDeg");
static_assert(sizeof(FluMathStatics_Vector2DAngleDeg) == 0x00000C, "Wrong size on FluMathStatics_Vector2DAngleDeg");
static_assert(offsetof(FluMathStatics_Vector2DAngleDeg, Vector) == 0x000000, "Member 'FluMathStatics_Vector2DAngleDeg::Vector' has a wrong offset!");
static_assert(offsetof(FluMathStatics_Vector2DAngleDeg, ReturnValue) == 0x000008, "Member 'FluMathStatics_Vector2DAngleDeg::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.Vector2DAngleRad
// 0x000C (0x000C - 0x0000)
struct FluMathStatics_Vector2DAngleRad final
{
public:
	struct FVector2D                              Vector;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_Vector2DAngleRad) == 0x000004, "Wrong alignment on FluMathStatics_Vector2DAngleRad");
static_assert(sizeof(FluMathStatics_Vector2DAngleRad) == 0x00000C, "Wrong size on FluMathStatics_Vector2DAngleRad");
static_assert(offsetof(FluMathStatics_Vector2DAngleRad, Vector) == 0x000000, "Member 'FluMathStatics_Vector2DAngleRad::Vector' has a wrong offset!");
static_assert(offsetof(FluMathStatics_Vector2DAngleRad, ReturnValue) == 0x000008, "Member 'FluMathStatics_Vector2DAngleRad::ReturnValue' has a wrong offset!");

// Function BrickRigs.FluMathStatics.WrapIndex
// 0x000C (0x000C - 0x0000)
struct FluMathStatics_WrapIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluMathStatics_WrapIndex) == 0x000004, "Wrong alignment on FluMathStatics_WrapIndex");
static_assert(sizeof(FluMathStatics_WrapIndex) == 0x00000C, "Wrong size on FluMathStatics_WrapIndex");
static_assert(offsetof(FluMathStatics_WrapIndex, Index_0) == 0x000000, "Member 'FluMathStatics_WrapIndex::Index_0' has a wrong offset!");
static_assert(offsetof(FluMathStatics_WrapIndex, Num) == 0x000004, "Member 'FluMathStatics_WrapIndex::Num' has a wrong offset!");
static_assert(offsetof(FluMathStatics_WrapIndex, ReturnValue) == 0x000008, "Member 'FluMathStatics_WrapIndex::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyListInterface.AddPropertyContainerWidget
// 0x0008 (0x0008 - 0x0000)
struct PropertyListInterface_AddPropertyContainerWidget final
{
public:
	class UPropertyContainerWidget*               Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyListInterface_AddPropertyContainerWidget) == 0x000008, "Wrong alignment on PropertyListInterface_AddPropertyContainerWidget");
static_assert(sizeof(PropertyListInterface_AddPropertyContainerWidget) == 0x000008, "Wrong size on PropertyListInterface_AddPropertyContainerWidget");
static_assert(offsetof(PropertyListInterface_AddPropertyContainerWidget, Widget) == 0x000000, "Member 'PropertyListInterface_AddPropertyContainerWidget::Widget' has a wrong offset!");

// Function BrickRigs.PropertyListInterface.UpdatePropertyContainerWidgetSlot
// 0x0010 (0x0010 - 0x0000)
struct PropertyListInterface_UpdatePropertyContainerWidgetSlot final
{
public:
	class UPropertyContainerWidget*               Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPerRow;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyListInterface_UpdatePropertyContainerWidgetSlot) == 0x000008, "Wrong alignment on PropertyListInterface_UpdatePropertyContainerWidgetSlot");
static_assert(sizeof(PropertyListInterface_UpdatePropertyContainerWidgetSlot) == 0x000010, "Wrong size on PropertyListInterface_UpdatePropertyContainerWidgetSlot");
static_assert(offsetof(PropertyListInterface_UpdatePropertyContainerWidgetSlot, Widget) == 0x000000, "Member 'PropertyListInterface_UpdatePropertyContainerWidgetSlot::Widget' has a wrong offset!");
static_assert(offsetof(PropertyListInterface_UpdatePropertyContainerWidgetSlot, Index_0) == 0x000008, "Member 'PropertyListInterface_UpdatePropertyContainerWidgetSlot::Index_0' has a wrong offset!");
static_assert(offsetof(PropertyListInterface_UpdatePropertyContainerWidgetSlot, NumPerRow) == 0x00000C, "Member 'PropertyListInterface_UpdatePropertyContainerWidgetSlot::NumPerRow' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.Get
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameOverlayWidget*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_Get) == 0x000008, "Wrong alignment on GameOverlayWidget_Get");
static_assert(sizeof(GameOverlayWidget_Get) == 0x000010, "Wrong size on GameOverlayWidget_Get");
static_assert(offsetof(GameOverlayWidget_Get, WorldContextObject) == 0x000000, "Member 'GameOverlayWidget_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_Get, ReturnValue) == 0x000008, "Member 'GameOverlayWidget_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.AddChatWidget
// 0x0008 (0x0008 - 0x0000)
struct GameOverlayWidget_AddChatWidget final
{
public:
	class UChatWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_AddChatWidget) == 0x000008, "Wrong alignment on GameOverlayWidget_AddChatWidget");
static_assert(sizeof(GameOverlayWidget_AddChatWidget) == 0x000008, "Wrong size on GameOverlayWidget_AddChatWidget");
static_assert(offsetof(GameOverlayWidget_AddChatWidget, Widget) == 0x000000, "Member 'GameOverlayWidget_AddChatWidget::Widget' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.AddHUDNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_AddHUDNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_AddHUDNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_AddHUDNotification");
static_assert(sizeof(GameOverlayWidget_AddHUDNotification) == 0x000010, "Wrong size on GameOverlayWidget_AddHUDNotification");
static_assert(offsetof(GameOverlayWidget_AddHUDNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_AddHUDNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_AddHUDNotification, Index_0) == 0x000008, "Member 'GameOverlayWidget_AddHUDNotification::Index_0' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.AddInputHelpWidget
// 0x0008 (0x0008 - 0x0000)
struct GameOverlayWidget_AddInputHelpWidget final
{
public:
	class UInputHelpWidget*                       Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_AddInputHelpWidget) == 0x000008, "Wrong alignment on GameOverlayWidget_AddInputHelpWidget");
static_assert(sizeof(GameOverlayWidget_AddInputHelpWidget) == 0x000008, "Wrong size on GameOverlayWidget_AddInputHelpWidget");
static_assert(offsetof(GameOverlayWidget_AddInputHelpWidget, Widget) == 0x000000, "Member 'GameOverlayWidget_AddInputHelpWidget::Widget' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.AddMatchStateWidget
// 0x0008 (0x0008 - 0x0000)
struct GameOverlayWidget_AddMatchStateWidget final
{
public:
	class UMatchStateWidget*                      Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_AddMatchStateWidget) == 0x000008, "Wrong alignment on GameOverlayWidget_AddMatchStateWidget");
static_assert(sizeof(GameOverlayWidget_AddMatchStateWidget) == 0x000008, "Wrong size on GameOverlayWidget_AddMatchStateWidget");
static_assert(offsetof(GameOverlayWidget_AddMatchStateWidget, Widget) == 0x000000, "Member 'GameOverlayWidget_AddMatchStateWidget::Widget' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.AddMatchTimerWidget
// 0x0008 (0x0008 - 0x0000)
struct GameOverlayWidget_AddMatchTimerWidget final
{
public:
	class UMatchTimerWidget*                      Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_AddMatchTimerWidget) == 0x000008, "Wrong alignment on GameOverlayWidget_AddMatchTimerWidget");
static_assert(sizeof(GameOverlayWidget_AddMatchTimerWidget) == 0x000008, "Wrong size on GameOverlayWidget_AddMatchTimerWidget");
static_assert(offsetof(GameOverlayWidget_AddMatchTimerWidget, Widget) == 0x000000, "Member 'GameOverlayWidget_AddMatchTimerWidget::Widget' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.AddTeamScoreWidget
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_AddTeamScoreWidget final
{
public:
	class UTeamScoreWidget*                       Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 TeamAttitude;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_AddTeamScoreWidget) == 0x000008, "Wrong alignment on GameOverlayWidget_AddTeamScoreWidget");
static_assert(sizeof(GameOverlayWidget_AddTeamScoreWidget) == 0x000010, "Wrong size on GameOverlayWidget_AddTeamScoreWidget");
static_assert(offsetof(GameOverlayWidget_AddTeamScoreWidget, Widget) == 0x000000, "Member 'GameOverlayWidget_AddTeamScoreWidget::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_AddTeamScoreWidget, TeamAttitude) == 0x000008, "Member 'GameOverlayWidget_AddTeamScoreWidget::TeamAttitude' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.CreateHUDNotification
// 0x0018 (0x0018 - 0x0000)
struct GameOverlayWidget_CreateHUDNotification final
{
public:
	class FName                                   Context;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFadeOut;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUDNotificationWidget*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_CreateHUDNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_CreateHUDNotification");
static_assert(sizeof(GameOverlayWidget_CreateHUDNotification) == 0x000018, "Wrong size on GameOverlayWidget_CreateHUDNotification");
static_assert(offsetof(GameOverlayWidget_CreateHUDNotification, Context) == 0x000000, "Member 'GameOverlayWidget_CreateHUDNotification::Context' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_CreateHUDNotification, bShouldFadeOut) == 0x000008, "Member 'GameOverlayWidget_CreateHUDNotification::bShouldFadeOut' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_CreateHUDNotification, ReturnValue) == 0x000010, "Member 'GameOverlayWidget_CreateHUDNotification::ReturnValue' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.OnCameraModeChanged
// 0x0001 (0x0001 - 0x0000)
struct GameOverlayWidget_OnCameraModeChanged final
{
public:
	ECameraMode                                   NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_OnCameraModeChanged) == 0x000001, "Wrong alignment on GameOverlayWidget_OnCameraModeChanged");
static_assert(sizeof(GameOverlayWidget_OnCameraModeChanged) == 0x000001, "Wrong size on GameOverlayWidget_OnCameraModeChanged");
static_assert(offsetof(GameOverlayWidget_OnCameraModeChanged, NewMode) == 0x000000, "Member 'GameOverlayWidget_OnCameraModeChanged::NewMode' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct GameOverlayWidget_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on GameOverlayWidget_OnHUDVisibilityChanged");
static_assert(sizeof(GameOverlayWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on GameOverlayWidget_OnHUDVisibilityChanged");
static_assert(offsetof(GameOverlayWidget_OnHUDVisibilityChanged, NewVisibility) == 0x000000, "Member 'GameOverlayWidget_OnHUDVisibilityChanged::NewVisibility' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.ToggleInputHelpOpen
// 0x0002 (0x0002 - 0x0000)
struct GameOverlayWidget_ToggleInputHelpOpen final
{
public:
	bool                                          bUpdateFocus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_ToggleInputHelpOpen) == 0x000001, "Wrong alignment on GameOverlayWidget_ToggleInputHelpOpen");
static_assert(sizeof(GameOverlayWidget_ToggleInputHelpOpen) == 0x000002, "Wrong size on GameOverlayWidget_ToggleInputHelpOpen");
static_assert(offsetof(GameOverlayWidget_ToggleInputHelpOpen, bUpdateFocus) == 0x000000, "Member 'GameOverlayWidget_ToggleInputHelpOpen::bUpdateFocus' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_ToggleInputHelpOpen, ReturnValue) == 0x000001, "Member 'GameOverlayWidget_ToggleInputHelpOpen::ReturnValue' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateCameraModeNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateCameraModeNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraMode                                   NewMode;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateCameraModeNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateCameraModeNotification");
static_assert(sizeof(GameOverlayWidget_UpdateCameraModeNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateCameraModeNotification");
static_assert(offsetof(GameOverlayWidget_UpdateCameraModeNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateCameraModeNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateCameraModeNotification, NewMode) == 0x000008, "Member 'GameOverlayWidget_UpdateCameraModeNotification::NewMode' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateCameraSpeedNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateCameraSpeedNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSpeedRatio;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxSpeed;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_UpdateCameraSpeedNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateCameraSpeedNotification");
static_assert(sizeof(GameOverlayWidget_UpdateCameraSpeedNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateCameraSpeedNotification");
static_assert(offsetof(GameOverlayWidget_UpdateCameraSpeedNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateCameraSpeedNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateCameraSpeedNotification, NewSpeedRatio) == 0x000008, "Member 'GameOverlayWidget_UpdateCameraSpeedNotification::NewSpeedRatio' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateCameraSpeedNotification, NewMaxSpeed) == 0x00000C, "Member 'GameOverlayWidget_UpdateCameraSpeedNotification::NewMaxSpeed' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateCameraZoomNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateCameraZoomNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewZoomRatio;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateCameraZoomNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateCameraZoomNotification");
static_assert(sizeof(GameOverlayWidget_UpdateCameraZoomNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateCameraZoomNotification");
static_assert(offsetof(GameOverlayWidget_UpdateCameraZoomNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateCameraZoomNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateCameraZoomNotification, NewZoomRatio) == 0x000008, "Member 'GameOverlayWidget_UpdateCameraZoomNotification::NewZoomRatio' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateFreeCamNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateFreeCamNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInFreeCam;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFreeCamMode                                  InFreeCamMode;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFixedCam;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateFreeCamNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateFreeCamNotification");
static_assert(sizeof(GameOverlayWidget_UpdateFreeCamNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateFreeCamNotification");
static_assert(offsetof(GameOverlayWidget_UpdateFreeCamNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateFreeCamNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateFreeCamNotification, bIsInFreeCam) == 0x000008, "Member 'GameOverlayWidget_UpdateFreeCamNotification::bIsInFreeCam' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateFreeCamNotification, InFreeCamMode) == 0x000009, "Member 'GameOverlayWidget_UpdateFreeCamNotification::InFreeCamMode' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateFreeCamNotification, bIsFixedCam) == 0x00000A, "Member 'GameOverlayWidget_UpdateFreeCamNotification::bIsFixedCam' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateHUDVisibilityNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateHUDVisibilityNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHUDVisibility                                NewVisibility;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateHUDVisibilityNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateHUDVisibilityNotification");
static_assert(sizeof(GameOverlayWidget_UpdateHUDVisibilityNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateHUDVisibilityNotification");
static_assert(offsetof(GameOverlayWidget_UpdateHUDVisibilityNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateHUDVisibilityNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateHUDVisibilityNotification, NewVisibility) == 0x000008, "Member 'GameOverlayWidget_UpdateHUDVisibilityNotification::NewVisibility' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateMoneyNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateMoneyNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAmount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountAdded;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_UpdateMoneyNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateMoneyNotification");
static_assert(sizeof(GameOverlayWidget_UpdateMoneyNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateMoneyNotification");
static_assert(offsetof(GameOverlayWidget_UpdateMoneyNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateMoneyNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateMoneyNotification, NewAmount) == 0x000008, "Member 'GameOverlayWidget_UpdateMoneyNotification::NewAmount' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateMoneyNotification, AmountAdded) == 0x00000C, "Member 'GameOverlayWidget_UpdateMoneyNotification::AmountAdded' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateProjectileCameraNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateProjectileCameraNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewEnabled;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateProjectileCameraNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateProjectileCameraNotification");
static_assert(sizeof(GameOverlayWidget_UpdateProjectileCameraNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateProjectileCameraNotification");
static_assert(offsetof(GameOverlayWidget_UpdateProjectileCameraNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateProjectileCameraNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateProjectileCameraNotification, bNewEnabled) == 0x000008, "Member 'GameOverlayWidget_UpdateProjectileCameraNotification::bNewEnabled' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateRespawnDelayNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateRespawnDelayNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Remaining;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateRespawnDelayNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateRespawnDelayNotification");
static_assert(sizeof(GameOverlayWidget_UpdateRespawnDelayNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateRespawnDelayNotification");
static_assert(offsetof(GameOverlayWidget_UpdateRespawnDelayNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateRespawnDelayNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateRespawnDelayNotification, Remaining) == 0x000008, "Member 'GameOverlayWidget_UpdateRespawnDelayNotification::Remaining' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateRestartFailedNotification
// 0x0020 (0x0020 - 0x0000)
struct GameOverlayWidget_UpdateRestartFailedNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_UpdateRestartFailedNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateRestartFailedNotification");
static_assert(sizeof(GameOverlayWidget_UpdateRestartFailedNotification) == 0x000020, "Wrong size on GameOverlayWidget_UpdateRestartFailedNotification");
static_assert(offsetof(GameOverlayWidget_UpdateRestartFailedNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateRestartFailedNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateRestartFailedNotification, Message) == 0x000008, "Member 'GameOverlayWidget_UpdateRestartFailedNotification::Message' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateSaveNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateSaveNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoSave;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateSaveNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateSaveNotification");
static_assert(sizeof(GameOverlayWidget_UpdateSaveNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateSaveNotification");
static_assert(offsetof(GameOverlayWidget_UpdateSaveNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateSaveNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateSaveNotification, bSuccess) == 0x000008, "Member 'GameOverlayWidget_UpdateSaveNotification::bSuccess' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateSaveNotification, bIsAutoSave) == 0x000009, "Member 'GameOverlayWidget_UpdateSaveNotification::bIsAutoSave' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateSlomoNotification
// 0x0010 (0x0010 - 0x0000)
struct GameOverlayWidget_UpdateSlomoNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlomoSpeed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertSpeed;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlomoEnabled;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPaused;                                         // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateSlomoNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateSlomoNotification");
static_assert(sizeof(GameOverlayWidget_UpdateSlomoNotification) == 0x000010, "Wrong size on GameOverlayWidget_UpdateSlomoNotification");
static_assert(offsetof(GameOverlayWidget_UpdateSlomoNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateSlomoNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateSlomoNotification, SlomoSpeed) == 0x000008, "Member 'GameOverlayWidget_UpdateSlomoNotification::SlomoSpeed' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateSlomoNotification, bInvertSpeed) == 0x00000C, "Member 'GameOverlayWidget_UpdateSlomoNotification::bInvertSpeed' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateSlomoNotification, bSlomoEnabled) == 0x00000D, "Member 'GameOverlayWidget_UpdateSlomoNotification::bSlomoEnabled' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateSlomoNotification, bIsPaused) == 0x00000E, "Member 'GameOverlayWidget_UpdateSlomoNotification::bIsPaused' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateThumbnailNotification
// 0x0008 (0x0008 - 0x0000)
struct GameOverlayWidget_UpdateThumbnailNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_UpdateThumbnailNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateThumbnailNotification");
static_assert(sizeof(GameOverlayWidget_UpdateThumbnailNotification) == 0x000008, "Wrong size on GameOverlayWidget_UpdateThumbnailNotification");
static_assert(offsetof(GameOverlayWidget_UpdateThumbnailNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateThumbnailNotification::Widget' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateVehicleCameraNotification
// 0x0020 (0x0020 - 0x0000)
struct GameOverlayWidget_UpdateVehicleCameraNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CameraDisplayName;                                 // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_UpdateVehicleCameraNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateVehicleCameraNotification");
static_assert(sizeof(GameOverlayWidget_UpdateVehicleCameraNotification) == 0x000020, "Wrong size on GameOverlayWidget_UpdateVehicleCameraNotification");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleCameraNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateVehicleCameraNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleCameraNotification, CameraDisplayName) == 0x000008, "Member 'GameOverlayWidget_UpdateVehicleCameraNotification::CameraDisplayName' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateVehicleConstructionNotification
// 0x0028 (0x0028 - 0x0000)
struct GameOverlayWidget_UpdateVehicleConstructionNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   VehicleDisplayName;                                // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateVehicleConstructionNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateVehicleConstructionNotification");
static_assert(sizeof(GameOverlayWidget_UpdateVehicleConstructionNotification) == 0x000028, "Wrong size on GameOverlayWidget_UpdateVehicleConstructionNotification");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleConstructionNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateVehicleConstructionNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleConstructionNotification, VehicleDisplayName) == 0x000008, "Member 'GameOverlayWidget_UpdateVehicleConstructionNotification::VehicleDisplayName' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleConstructionNotification, Progress) == 0x000020, "Member 'GameOverlayWidget_UpdateVehicleConstructionNotification::Progress' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateVehicleDownloadNotification
// 0x0028 (0x0028 - 0x0000)
struct GameOverlayWidget_UpdateVehicleDownloadNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   VehicleDisplayName;                                // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOverlayWidget_UpdateVehicleDownloadNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateVehicleDownloadNotification");
static_assert(sizeof(GameOverlayWidget_UpdateVehicleDownloadNotification) == 0x000028, "Wrong size on GameOverlayWidget_UpdateVehicleDownloadNotification");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleDownloadNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateVehicleDownloadNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleDownloadNotification, VehicleDisplayName) == 0x000008, "Member 'GameOverlayWidget_UpdateVehicleDownloadNotification::VehicleDisplayName' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleDownloadNotification, Progress) == 0x000020, "Member 'GameOverlayWidget_UpdateVehicleDownloadNotification::Progress' has a wrong offset!");

// Function BrickRigs.GameOverlayWidget.UpdateVehicleSeatNotification
// 0x0020 (0x0020 - 0x0000)
struct GameOverlayWidget_UpdateVehicleSeatNotification final
{
public:
	class UHUDNotificationWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SeatDisplayName;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOverlayWidget_UpdateVehicleSeatNotification) == 0x000008, "Wrong alignment on GameOverlayWidget_UpdateVehicleSeatNotification");
static_assert(sizeof(GameOverlayWidget_UpdateVehicleSeatNotification) == 0x000020, "Wrong size on GameOverlayWidget_UpdateVehicleSeatNotification");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleSeatNotification, Widget) == 0x000000, "Member 'GameOverlayWidget_UpdateVehicleSeatNotification::Widget' has a wrong offset!");
static_assert(offsetof(GameOverlayWidget_UpdateVehicleSeatNotification, SeatDisplayName) == 0x000008, "Member 'GameOverlayWidget_UpdateVehicleSeatNotification::SeatDisplayName' has a wrong offset!");

// Function BrickRigs.Garage.Interact_EnterEditor
// 0x0008 (0x0008 - 0x0000)
struct Garage_Interact_EnterEditor final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Garage_Interact_EnterEditor) == 0x000008, "Wrong alignment on Garage_Interact_EnterEditor");
static_assert(sizeof(Garage_Interact_EnterEditor) == 0x000008, "Wrong size on Garage_Interact_EnterEditor");
static_assert(offsetof(Garage_Interact_EnterEditor, PC) == 0x000000, "Member 'Garage_Interact_EnterEditor::PC' has a wrong offset!");

// Function BrickRigs.Garage.Interact_Inventory
// 0x0008 (0x0008 - 0x0000)
struct Garage_Interact_Inventory final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Garage_Interact_Inventory) == 0x000008, "Wrong alignment on Garage_Interact_Inventory");
static_assert(sizeof(Garage_Interact_Inventory) == 0x000008, "Wrong size on Garage_Interact_Inventory");
static_assert(offsetof(Garage_Interact_Inventory, PC) == 0x000000, "Member 'Garage_Interact_Inventory::PC' has a wrong offset!");

// Function BrickRigs.Garage.Interact_SpawnVehicle
// 0x0008 (0x0008 - 0x0000)
struct Garage_Interact_SpawnVehicle final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Garage_Interact_SpawnVehicle) == 0x000008, "Wrong alignment on Garage_Interact_SpawnVehicle");
static_assert(sizeof(Garage_Interact_SpawnVehicle) == 0x000008, "Wrong size on Garage_Interact_SpawnVehicle");
static_assert(offsetof(Garage_Interact_SpawnVehicle, PC) == 0x000000, "Member 'Garage_Interact_SpawnVehicle::PC' has a wrong offset!");

// Function BrickRigs.GenericPropertyWidget.OnTextChanged
// 0x0020 (0x0020 - 0x0000)
struct GenericPropertyWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GenericPropertyWidget_OnTextChanged) == 0x000008, "Wrong alignment on GenericPropertyWidget_OnTextChanged");
static_assert(sizeof(GenericPropertyWidget_OnTextChanged) == 0x000020, "Wrong size on GenericPropertyWidget_OnTextChanged");
static_assert(offsetof(GenericPropertyWidget_OnTextChanged, Text) == 0x000000, "Member 'GenericPropertyWidget_OnTextChanged::Text' has a wrong offset!");
static_assert(offsetof(GenericPropertyWidget_OnTextChanged, EventType) == 0x000018, "Member 'GenericPropertyWidget_OnTextChanged::EventType' has a wrong offset!");

// Function BrickRigs.ReuploadPopupWidget.GetOriginalAuthorName
// 0x0020 (0x0020 - 0x0000)
struct ReuploadPopupWidget_GetOriginalAuthorName final
{
public:
	class FText                                   OutName;                                           // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReuploadPopupWidget_GetOriginalAuthorName) == 0x000008, "Wrong alignment on ReuploadPopupWidget_GetOriginalAuthorName");
static_assert(sizeof(ReuploadPopupWidget_GetOriginalAuthorName) == 0x000020, "Wrong size on ReuploadPopupWidget_GetOriginalAuthorName");
static_assert(offsetof(ReuploadPopupWidget_GetOriginalAuthorName, OutName) == 0x000000, "Member 'ReuploadPopupWidget_GetOriginalAuthorName::OutName' has a wrong offset!");
static_assert(offsetof(ReuploadPopupWidget_GetOriginalAuthorName, ReturnValue) == 0x000018, "Member 'ReuploadPopupWidget_GetOriginalAuthorName::ReturnValue' has a wrong offset!");

// Function BrickRigs.RestrictedAreaWidget.UpdateTimerRemaining
// 0x0004 (0x0004 - 0x0000)
struct RestrictedAreaWidget_UpdateTimerRemaining final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RestrictedAreaWidget_UpdateTimerRemaining) == 0x000004, "Wrong alignment on RestrictedAreaWidget_UpdateTimerRemaining");
static_assert(sizeof(RestrictedAreaWidget_UpdateTimerRemaining) == 0x000004, "Wrong size on RestrictedAreaWidget_UpdateTimerRemaining");
static_assert(offsetof(RestrictedAreaWidget_UpdateTimerRemaining, TimeRemaining) == 0x000000, "Member 'RestrictedAreaWidget_UpdateTimerRemaining::TimeRemaining' has a wrong offset!");

// Function BrickRigs.HealthBarWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct HealthBarWidget_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthBarWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on HealthBarWidget_OnHUDVisibilityChanged");
static_assert(sizeof(HealthBarWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on HealthBarWidget_OnHUDVisibilityChanged");
static_assert(offsetof(HealthBarWidget_OnHUDVisibilityChanged, NewVisibility) == 0x000000, "Member 'HealthBarWidget_OnHUDVisibilityChanged::NewVisibility' has a wrong offset!");

// Function BrickRigs.HealthBarWidget.UpdateCanBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct HealthBarWidget_UpdateCanBeDamaged final
{
public:
	bool                                          bNewCanBeDamaged;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthBarWidget_UpdateCanBeDamaged) == 0x000001, "Wrong alignment on HealthBarWidget_UpdateCanBeDamaged");
static_assert(sizeof(HealthBarWidget_UpdateCanBeDamaged) == 0x000001, "Wrong size on HealthBarWidget_UpdateCanBeDamaged");
static_assert(offsetof(HealthBarWidget_UpdateCanBeDamaged, bNewCanBeDamaged) == 0x000000, "Member 'HealthBarWidget_UpdateCanBeDamaged::bNewCanBeDamaged' has a wrong offset!");

// Function BrickRigs.HealthBarWidget.UpdateHealingState
// 0x0001 (0x0001 - 0x0000)
struct HealthBarWidget_UpdateHealingState final
{
public:
	ECharacterHealingState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthBarWidget_UpdateHealingState) == 0x000001, "Wrong alignment on HealthBarWidget_UpdateHealingState");
static_assert(sizeof(HealthBarWidget_UpdateHealingState) == 0x000001, "Wrong size on HealthBarWidget_UpdateHealingState");
static_assert(offsetof(HealthBarWidget_UpdateHealingState, NewState) == 0x000000, "Member 'HealthBarWidget_UpdateHealingState::NewState' has a wrong offset!");

// Function BrickRigs.HealthBarWidget.UpdateHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthBarWidget_UpdateHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthBarWidget_UpdateHealth) == 0x000004, "Wrong alignment on HealthBarWidget_UpdateHealth");
static_assert(sizeof(HealthBarWidget_UpdateHealth) == 0x000004, "Wrong size on HealthBarWidget_UpdateHealth");
static_assert(offsetof(HealthBarWidget_UpdateHealth, NewHealth) == 0x000000, "Member 'HealthBarWidget_UpdateHealth::NewHealth' has a wrong offset!");

// Function BrickRigs.ScoreboardPlayerWidget.UpdateButtonStyle
// 0x0003 (0x0003 - 0x0000)
struct ScoreboardPlayerWidget_UpdateButtonStyle final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 TeamAttitude;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardPlayerWidget_UpdateButtonStyle) == 0x000001, "Wrong alignment on ScoreboardPlayerWidget_UpdateButtonStyle");
static_assert(sizeof(ScoreboardPlayerWidget_UpdateButtonStyle) == 0x000003, "Wrong size on ScoreboardPlayerWidget_UpdateButtonStyle");
static_assert(offsetof(ScoreboardPlayerWidget_UpdateButtonStyle, bNewSelected) == 0x000000, "Member 'ScoreboardPlayerWidget_UpdateButtonStyle::bNewSelected' has a wrong offset!");
static_assert(offsetof(ScoreboardPlayerWidget_UpdateButtonStyle, bIsLocalPlayer) == 0x000001, "Member 'ScoreboardPlayerWidget_UpdateButtonStyle::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(ScoreboardPlayerWidget_UpdateButtonStyle, TeamAttitude) == 0x000002, "Member 'ScoreboardPlayerWidget_UpdateButtonStyle::TeamAttitude' has a wrong offset!");

// Function BrickRigs.ScoreboardPlayerWidget.UpdateIsAdmin
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardPlayerWidget_UpdateIsAdmin final
{
public:
	bool                                          bIsAdmin;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardPlayerWidget_UpdateIsAdmin) == 0x000001, "Wrong alignment on ScoreboardPlayerWidget_UpdateIsAdmin");
static_assert(sizeof(ScoreboardPlayerWidget_UpdateIsAdmin) == 0x000001, "Wrong size on ScoreboardPlayerWidget_UpdateIsAdmin");
static_assert(offsetof(ScoreboardPlayerWidget_UpdateIsAdmin, bIsAdmin) == 0x000000, "Member 'ScoreboardPlayerWidget_UpdateIsAdmin::bIsAdmin' has a wrong offset!");

// Function BrickRigs.ScoreboardPlayerWidget.UpdateIsAlive
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardPlayerWidget_UpdateIsAlive final
{
public:
	bool                                          bIsAlive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardPlayerWidget_UpdateIsAlive) == 0x000001, "Wrong alignment on ScoreboardPlayerWidget_UpdateIsAlive");
static_assert(sizeof(ScoreboardPlayerWidget_UpdateIsAlive) == 0x000001, "Wrong size on ScoreboardPlayerWidget_UpdateIsAlive");
static_assert(offsetof(ScoreboardPlayerWidget_UpdateIsAlive, bIsAlive) == 0x000000, "Member 'ScoreboardPlayerWidget_UpdateIsAlive::bIsAlive' has a wrong offset!");

// Function BrickRigs.HostGamePageWidget.UpdatePlayButton
// 0x0002 (0x0002 - 0x0000)
struct HostGamePageWidget_UpdatePlayButton final
{
public:
	bool                                          bCanPlay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnline;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HostGamePageWidget_UpdatePlayButton) == 0x000001, "Wrong alignment on HostGamePageWidget_UpdatePlayButton");
static_assert(sizeof(HostGamePageWidget_UpdatePlayButton) == 0x000002, "Wrong size on HostGamePageWidget_UpdatePlayButton");
static_assert(offsetof(HostGamePageWidget_UpdatePlayButton, bCanPlay) == 0x000000, "Member 'HostGamePageWidget_UpdatePlayButton::bCanPlay' has a wrong offset!");
static_assert(offsetof(HostGamePageWidget_UpdatePlayButton, bIsOnline) == 0x000001, "Member 'HostGamePageWidget_UpdatePlayButton::bIsOnline' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.MakeAxisInteractionOption
// 0x0080 (0x0080 - 0x0000)
struct HUDIconComponent_MakeAxisInteractionOption final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABrickPlayerController* InPC, float Val)> OnInteractionAxis;                // 0x001C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractionOption                     ReturnValue;                                       // 0x0030(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_MakeAxisInteractionOption) == 0x000008, "Wrong alignment on HUDIconComponent_MakeAxisInteractionOption");
static_assert(sizeof(HUDIconComponent_MakeAxisInteractionOption) == 0x000080, "Wrong size on HUDIconComponent_MakeAxisInteractionOption");
static_assert(offsetof(HUDIconComponent_MakeAxisInteractionOption, DisplayText) == 0x000000, "Member 'HUDIconComponent_MakeAxisInteractionOption::DisplayText' has a wrong offset!");
static_assert(offsetof(HUDIconComponent_MakeAxisInteractionOption, bIsEnabled) == 0x000018, "Member 'HUDIconComponent_MakeAxisInteractionOption::bIsEnabled' has a wrong offset!");
static_assert(offsetof(HUDIconComponent_MakeAxisInteractionOption, OnInteractionAxis) == 0x00001C, "Member 'HUDIconComponent_MakeAxisInteractionOption::OnInteractionAxis' has a wrong offset!");
static_assert(offsetof(HUDIconComponent_MakeAxisInteractionOption, ReturnValue) == 0x000030, "Member 'HUDIconComponent_MakeAxisInteractionOption::ReturnValue' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.MakeInteractionOption
// 0x0080 (0x0080 - 0x0000)
struct HUDIconComponent_MakeInteractionOption final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABrickPlayerController* InPC)> OnInteraction;                               // 0x001C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractionOption                     ReturnValue;                                       // 0x0030(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_MakeInteractionOption) == 0x000008, "Wrong alignment on HUDIconComponent_MakeInteractionOption");
static_assert(sizeof(HUDIconComponent_MakeInteractionOption) == 0x000080, "Wrong size on HUDIconComponent_MakeInteractionOption");
static_assert(offsetof(HUDIconComponent_MakeInteractionOption, DisplayText) == 0x000000, "Member 'HUDIconComponent_MakeInteractionOption::DisplayText' has a wrong offset!");
static_assert(offsetof(HUDIconComponent_MakeInteractionOption, bIsEnabled) == 0x000018, "Member 'HUDIconComponent_MakeInteractionOption::bIsEnabled' has a wrong offset!");
static_assert(offsetof(HUDIconComponent_MakeInteractionOption, OnInteraction) == 0x00001C, "Member 'HUDIconComponent_MakeInteractionOption::OnInteraction' has a wrong offset!");
static_assert(offsetof(HUDIconComponent_MakeInteractionOption, ReturnValue) == 0x000030, "Member 'HUDIconComponent_MakeInteractionOption::ReturnValue' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.Interact_PlaceMarker
// 0x0008 (0x0008 - 0x0000)
struct HUDIconComponent_Interact_PlaceMarker final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_Interact_PlaceMarker) == 0x000008, "Wrong alignment on HUDIconComponent_Interact_PlaceMarker");
static_assert(sizeof(HUDIconComponent_Interact_PlaceMarker) == 0x000008, "Wrong size on HUDIconComponent_Interact_PlaceMarker");
static_assert(offsetof(HUDIconComponent_Interact_PlaceMarker, PC) == 0x000000, "Member 'HUDIconComponent_Interact_PlaceMarker::PC' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.Interact_Spawn
// 0x0008 (0x0008 - 0x0000)
struct HUDIconComponent_Interact_Spawn final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_Interact_Spawn) == 0x000008, "Wrong alignment on HUDIconComponent_Interact_Spawn");
static_assert(sizeof(HUDIconComponent_Interact_Spawn) == 0x000008, "Wrong size on HUDIconComponent_Interact_Spawn");
static_assert(offsetof(HUDIconComponent_Interact_Spawn, PC) == 0x000000, "Member 'HUDIconComponent_Interact_Spawn::PC' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.SetGetInteractionOptionsDelegate
// 0x0010 (0x0010 - 0x0000)
struct HUDIconComponent_SetGetInteractionOptionsDelegate final
{
public:
	TDelegate<void(class ABrickPlayerController* PC, struct FInteractionOptions* OutOptions)> Delegate; // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_SetGetInteractionOptionsDelegate) == 0x000004, "Wrong alignment on HUDIconComponent_SetGetInteractionOptionsDelegate");
static_assert(sizeof(HUDIconComponent_SetGetInteractionOptionsDelegate) == 0x000010, "Wrong size on HUDIconComponent_SetGetInteractionOptionsDelegate");
static_assert(offsetof(HUDIconComponent_SetGetInteractionOptionsDelegate, Delegate) == 0x000000, "Member 'HUDIconComponent_SetGetInteractionOptionsDelegate::Delegate' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.SetGetMaxDrawDistDelegate
// 0x0010 (0x0010 - 0x0000)
struct HUDIconComponent_SetGetMaxDrawDistDelegate final
{
public:
	TDelegate<void(class ABrickPlayerController* PC)> Delegate;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_SetGetMaxDrawDistDelegate) == 0x000004, "Wrong alignment on HUDIconComponent_SetGetMaxDrawDistDelegate");
static_assert(sizeof(HUDIconComponent_SetGetMaxDrawDistDelegate) == 0x000010, "Wrong size on HUDIconComponent_SetGetMaxDrawDistDelegate");
static_assert(offsetof(HUDIconComponent_SetGetMaxDrawDistDelegate, Delegate) == 0x000000, "Member 'HUDIconComponent_SetGetMaxDrawDistDelegate::Delegate' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.SetIconLocation
// 0x000C (0x000C - 0x0000)
struct HUDIconComponent_SetIconLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_SetIconLocation) == 0x000004, "Wrong alignment on HUDIconComponent_SetIconLocation");
static_assert(sizeof(HUDIconComponent_SetIconLocation) == 0x00000C, "Wrong size on HUDIconComponent_SetIconLocation");
static_assert(offsetof(HUDIconComponent_SetIconLocation, NewLocation) == 0x000000, "Member 'HUDIconComponent_SetIconLocation::NewLocation' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.SetIconLocationDelegate
// 0x0010 (0x0010 - 0x0000)
struct HUDIconComponent_SetIconLocationDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_SetIconLocationDelegate) == 0x000004, "Wrong alignment on HUDIconComponent_SetIconLocationDelegate");
static_assert(sizeof(HUDIconComponent_SetIconLocationDelegate) == 0x000010, "Wrong size on HUDIconComponent_SetIconLocationDelegate");
static_assert(offsetof(HUDIconComponent_SetIconLocationDelegate, Delegate) == 0x000000, "Member 'HUDIconComponent_SetIconLocationDelegate::Delegate' has a wrong offset!");

// Function BrickRigs.HUDIconComponent.SetShouldIconBeVisibleDelegate
// 0x0010 (0x0010 - 0x0000)
struct HUDIconComponent_SetShouldIconBeVisibleDelegate final
{
public:
	TDelegate<void(class ABrickPlayerController* PC, const struct FHUDIconContext& Context)> Delegate; // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconComponent_SetShouldIconBeVisibleDelegate) == 0x000004, "Wrong alignment on HUDIconComponent_SetShouldIconBeVisibleDelegate");
static_assert(sizeof(HUDIconComponent_SetShouldIconBeVisibleDelegate) == 0x000010, "Wrong size on HUDIconComponent_SetShouldIconBeVisibleDelegate");
static_assert(offsetof(HUDIconComponent_SetShouldIconBeVisibleDelegate, Delegate) == 0x000000, "Member 'HUDIconComponent_SetShouldIconBeVisibleDelegate::Delegate' has a wrong offset!");

// Function BrickRigs.HUDIconContainerWidget.AddCrosshairWidgets
// 0x0010 (0x0010 - 0x0000)
struct HUDIconContainerWidget_AddCrosshairWidgets final
{
public:
	TArray<class UMapCrosshairWidget*>            Widgets;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconContainerWidget_AddCrosshairWidgets) == 0x000008, "Wrong alignment on HUDIconContainerWidget_AddCrosshairWidgets");
static_assert(sizeof(HUDIconContainerWidget_AddCrosshairWidgets) == 0x000010, "Wrong size on HUDIconContainerWidget_AddCrosshairWidgets");
static_assert(offsetof(HUDIconContainerWidget_AddCrosshairWidgets, Widgets) == 0x000000, "Member 'HUDIconContainerWidget_AddCrosshairWidgets::Widgets' has a wrong offset!");

// Function BrickRigs.HUDIconContainerWidget.AddIconWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDIconContainerWidget_AddIconWidget final
{
public:
	class UHUDIconWidget*                         Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconContainerWidget_AddIconWidget) == 0x000008, "Wrong alignment on HUDIconContainerWidget_AddIconWidget");
static_assert(sizeof(HUDIconContainerWidget_AddIconWidget) == 0x000008, "Wrong size on HUDIconContainerWidget_AddIconWidget");
static_assert(offsetof(HUDIconContainerWidget_AddIconWidget, Widget) == 0x000000, "Member 'HUDIconContainerWidget_AddIconWidget::Widget' has a wrong offset!");

// Function BrickRigs.HUDIconContainerWidget.AddInteractionWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDIconContainerWidget_AddInteractionWidget final
{
public:
	class UInteractionWidget*                     Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconContainerWidget_AddInteractionWidget) == 0x000008, "Wrong alignment on HUDIconContainerWidget_AddInteractionWidget");
static_assert(sizeof(HUDIconContainerWidget_AddInteractionWidget) == 0x000008, "Wrong size on HUDIconContainerWidget_AddInteractionWidget");
static_assert(offsetof(HUDIconContainerWidget_AddInteractionWidget, Widget) == 0x000000, "Member 'HUDIconContainerWidget_AddInteractionWidget::Widget' has a wrong offset!");

// Function BrickRigs.HUDIconContainerWidget.OnUpdateButtonContentStyle
// 0x0002 (0x0002 - 0x0000)
struct HUDIconContainerWidget_OnUpdateButtonContentStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            InContentStyleState;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconContainerWidget_OnUpdateButtonContentStyle) == 0x000001, "Wrong alignment on HUDIconContainerWidget_OnUpdateButtonContentStyle");
static_assert(sizeof(HUDIconContainerWidget_OnUpdateButtonContentStyle) == 0x000002, "Wrong size on HUDIconContainerWidget_OnUpdateButtonContentStyle");
static_assert(offsetof(HUDIconContainerWidget_OnUpdateButtonContentStyle, InColorStyle) == 0x000000, "Member 'HUDIconContainerWidget_OnUpdateButtonContentStyle::InColorStyle' has a wrong offset!");
static_assert(offsetof(HUDIconContainerWidget_OnUpdateButtonContentStyle, InContentStyleState) == 0x000001, "Member 'HUDIconContainerWidget_OnUpdateButtonContentStyle::InContentStyleState' has a wrong offset!");

// Function BrickRigs.HUDIconContainerWidget.UpdateContainerStyle
// 0x0003 (0x0003 - 0x0000)
struct HUDIconContainerWidget_UpdateContainerStyle final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCanSpawn;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDIconContainerWidget_UpdateContainerStyle) == 0x000001, "Wrong alignment on HUDIconContainerWidget_UpdateContainerStyle");
static_assert(sizeof(HUDIconContainerWidget_UpdateContainerStyle) == 0x000003, "Wrong size on HUDIconContainerWidget_UpdateContainerStyle");
static_assert(offsetof(HUDIconContainerWidget_UpdateContainerStyle, bNewSelected) == 0x000000, "Member 'HUDIconContainerWidget_UpdateContainerStyle::bNewSelected' has a wrong offset!");
static_assert(offsetof(HUDIconContainerWidget_UpdateContainerStyle, bNewCanSpawn) == 0x000001, "Member 'HUDIconContainerWidget_UpdateContainerStyle::bNewCanSpawn' has a wrong offset!");
static_assert(offsetof(HUDIconContainerWidget_UpdateContainerStyle, NewColorStyle) == 0x000002, "Member 'HUDIconContainerWidget_UpdateContainerStyle::NewColorStyle' has a wrong offset!");

// Function BrickRigs.HUDNotificationWidget.InitializeNotification
// 0x0028 (0x0028 - 0x0000)
struct HUDNotificationWidget_InitializeNotification final
{
public:
	struct FBrickUIIconSlot                       InIconSlot;                                        // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDNotificationWidget_InitializeNotification) == 0x000008, "Wrong alignment on HUDNotificationWidget_InitializeNotification");
static_assert(sizeof(HUDNotificationWidget_InitializeNotification) == 0x000028, "Wrong size on HUDNotificationWidget_InitializeNotification");
static_assert(offsetof(HUDNotificationWidget_InitializeNotification, InIconSlot) == 0x000000, "Member 'HUDNotificationWidget_InitializeNotification::InIconSlot' has a wrong offset!");
static_assert(offsetof(HUDNotificationWidget_InitializeNotification, InText) == 0x000008, "Member 'HUDNotificationWidget_InitializeNotification::InText' has a wrong offset!");
static_assert(offsetof(HUDNotificationWidget_InitializeNotification, InColorStyle) == 0x000020, "Member 'HUDNotificationWidget_InitializeNotification::InColorStyle' has a wrong offset!");

// Function BrickRigs.HUDNotificationWidget.UpdateIsThumbnailNotification
// 0x0001 (0x0001 - 0x0000)
struct HUDNotificationWidget_UpdateIsThumbnailNotification final
{
public:
	bool                                          bNewIsThumbnail;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDNotificationWidget_UpdateIsThumbnailNotification) == 0x000001, "Wrong alignment on HUDNotificationWidget_UpdateIsThumbnailNotification");
static_assert(sizeof(HUDNotificationWidget_UpdateIsThumbnailNotification) == 0x000001, "Wrong size on HUDNotificationWidget_UpdateIsThumbnailNotification");
static_assert(offsetof(HUDNotificationWidget_UpdateIsThumbnailNotification, bNewIsThumbnail) == 0x000000, "Member 'HUDNotificationWidget_UpdateIsThumbnailNotification::bNewIsThumbnail' has a wrong offset!");

// Function BrickRigs.HUDWidgetInterface.AddGameOverlayWidget
// 0x0010 (0x0010 - 0x0000)
struct HUDWidgetInterface_AddGameOverlayWidget final
{
public:
	class UGameOverlayWidget*                     Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDWidgetInterface_AddGameOverlayWidget) == 0x000008, "Wrong alignment on HUDWidgetInterface_AddGameOverlayWidget");
static_assert(sizeof(HUDWidgetInterface_AddGameOverlayWidget) == 0x000010, "Wrong size on HUDWidgetInterface_AddGameOverlayWidget");
static_assert(offsetof(HUDWidgetInterface_AddGameOverlayWidget, Widget) == 0x000000, "Member 'HUDWidgetInterface_AddGameOverlayWidget::Widget' has a wrong offset!");
static_assert(offsetof(HUDWidgetInterface_AddGameOverlayWidget, ReturnValue) == 0x000008, "Member 'HUDWidgetInterface_AddGameOverlayWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.ScoreboardTeamWidget.UpdateCanEverJoinTeam
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardTeamWidget_UpdateCanEverJoinTeam final
{
public:
	bool                                          bCanJoin;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardTeamWidget_UpdateCanEverJoinTeam) == 0x000001, "Wrong alignment on ScoreboardTeamWidget_UpdateCanEverJoinTeam");
static_assert(sizeof(ScoreboardTeamWidget_UpdateCanEverJoinTeam) == 0x000001, "Wrong size on ScoreboardTeamWidget_UpdateCanEverJoinTeam");
static_assert(offsetof(ScoreboardTeamWidget_UpdateCanEverJoinTeam, bCanJoin) == 0x000000, "Member 'ScoreboardTeamWidget_UpdateCanEverJoinTeam::bCanJoin' has a wrong offset!");

// Function BrickRigs.ScoreboardTeamWidget.UpdateCanJoinTeam
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardTeamWidget_UpdateCanJoinTeam final
{
public:
	bool                                          bCanJoin;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardTeamWidget_UpdateCanJoinTeam) == 0x000001, "Wrong alignment on ScoreboardTeamWidget_UpdateCanJoinTeam");
static_assert(sizeof(ScoreboardTeamWidget_UpdateCanJoinTeam) == 0x000001, "Wrong size on ScoreboardTeamWidget_UpdateCanJoinTeam");
static_assert(offsetof(ScoreboardTeamWidget_UpdateCanJoinTeam, bCanJoin) == 0x000000, "Member 'ScoreboardTeamWidget_UpdateCanJoinTeam::bCanJoin' has a wrong offset!");

// Function BrickRigs.ScoreboardTeamWidget.UpdateTeamAttitude
// 0x0002 (0x0002 - 0x0000)
struct ScoreboardTeamWidget_UpdateTeamAttitude final
{
public:
	bool                                          bIsOwnTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 NewAttitude;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardTeamWidget_UpdateTeamAttitude) == 0x000001, "Wrong alignment on ScoreboardTeamWidget_UpdateTeamAttitude");
static_assert(sizeof(ScoreboardTeamWidget_UpdateTeamAttitude) == 0x000002, "Wrong size on ScoreboardTeamWidget_UpdateTeamAttitude");
static_assert(offsetof(ScoreboardTeamWidget_UpdateTeamAttitude, bIsOwnTeam) == 0x000000, "Member 'ScoreboardTeamWidget_UpdateTeamAttitude::bIsOwnTeam' has a wrong offset!");
static_assert(offsetof(ScoreboardTeamWidget_UpdateTeamAttitude, NewAttitude) == 0x000001, "Member 'ScoreboardTeamWidget_UpdateTeamAttitude::NewAttitude' has a wrong offset!");

// Function BrickRigs.ServerBrowserWidget.OnListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct ServerBrowserWidget_OnListEntrySelected final
{
public:
	class UPagedListEntryWidget*                  Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoubleClick;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ServerBrowserWidget_OnListEntrySelected) == 0x000008, "Wrong alignment on ServerBrowserWidget_OnListEntrySelected");
static_assert(sizeof(ServerBrowserWidget_OnListEntrySelected) == 0x000010, "Wrong size on ServerBrowserWidget_OnListEntrySelected");
static_assert(offsetof(ServerBrowserWidget_OnListEntrySelected, Widget) == 0x000000, "Member 'ServerBrowserWidget_OnListEntrySelected::Widget' has a wrong offset!");
static_assert(offsetof(ServerBrowserWidget_OnListEntrySelected, bDoubleClick) == 0x000008, "Member 'ServerBrowserWidget_OnListEntrySelected::bDoubleClick' has a wrong offset!");

// Function BrickRigs.ServerBrowserWidget.OnLoadListPage
// 0x0004 (0x0004 - 0x0000)
struct ServerBrowserWidget_OnLoadListPage final
{
public:
	int32                                         NewPage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowserWidget_OnLoadListPage) == 0x000004, "Wrong alignment on ServerBrowserWidget_OnLoadListPage");
static_assert(sizeof(ServerBrowserWidget_OnLoadListPage) == 0x000004, "Wrong size on ServerBrowserWidget_OnLoadListPage");
static_assert(offsetof(ServerBrowserWidget_OnLoadListPage, NewPage) == 0x000000, "Member 'ServerBrowserWidget_OnLoadListPage::NewPage' has a wrong offset!");

// Function BrickRigs.ServerBrowserWidget.UpdateCanJoin
// 0x0001 (0x0001 - 0x0000)
struct ServerBrowserWidget_UpdateCanJoin final
{
public:
	bool                                          bCanJoin;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowserWidget_UpdateCanJoin) == 0x000001, "Wrong alignment on ServerBrowserWidget_UpdateCanJoin");
static_assert(sizeof(ServerBrowserWidget_UpdateCanJoin) == 0x000001, "Wrong size on ServerBrowserWidget_UpdateCanJoin");
static_assert(offsetof(ServerBrowserWidget_UpdateCanJoin, bCanJoin) == 0x000000, "Member 'ServerBrowserWidget_UpdateCanJoin::bCanJoin' has a wrong offset!");

// Function BrickRigs.ServerBrowserWidget.UpdateCanRefresh
// 0x0001 (0x0001 - 0x0000)
struct ServerBrowserWidget_UpdateCanRefresh final
{
public:
	bool                                          bCanRefresh;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerBrowserWidget_UpdateCanRefresh) == 0x000001, "Wrong alignment on ServerBrowserWidget_UpdateCanRefresh");
static_assert(sizeof(ServerBrowserWidget_UpdateCanRefresh) == 0x000001, "Wrong size on ServerBrowserWidget_UpdateCanRefresh");
static_assert(offsetof(ServerBrowserWidget_UpdateCanRefresh, bCanRefresh) == 0x000000, "Member 'ServerBrowserWidget_UpdateCanRefresh::bCanRefresh' has a wrong offset!");

// Function BrickRigs.InputActionCategoryWidget.InitializeCategory
// 0x0018 (0x0018 - 0x0000)
struct InputActionCategoryWidget_InitializeCategory final
{
public:
	class FText                                   InCategoryName;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionCategoryWidget_InitializeCategory) == 0x000008, "Wrong alignment on InputActionCategoryWidget_InitializeCategory");
static_assert(sizeof(InputActionCategoryWidget_InitializeCategory) == 0x000018, "Wrong size on InputActionCategoryWidget_InitializeCategory");
static_assert(offsetof(InputActionCategoryWidget_InitializeCategory, InCategoryName) == 0x000000, "Member 'InputActionCategoryWidget_InitializeCategory::InCategoryName' has a wrong offset!");

// Function BrickRigs.InputActionCategoryWidget.UpdateInputActionListMode
// 0x0001 (0x0001 - 0x0000)
struct InputActionCategoryWidget_UpdateInputActionListMode final
{
public:
	EInputActionListMode                          NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionCategoryWidget_UpdateInputActionListMode) == 0x000001, "Wrong alignment on InputActionCategoryWidget_UpdateInputActionListMode");
static_assert(sizeof(InputActionCategoryWidget_UpdateInputActionListMode) == 0x000001, "Wrong size on InputActionCategoryWidget_UpdateInputActionListMode");
static_assert(offsetof(InputActionCategoryWidget_UpdateInputActionListMode, NewMode) == 0x000000, "Member 'InputActionCategoryWidget_UpdateInputActionListMode::NewMode' has a wrong offset!");

// Function BrickRigs.InputActionCategoryWidget.UpdateIsSelected
// 0x0001 (0x0001 - 0x0000)
struct InputActionCategoryWidget_UpdateIsSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionCategoryWidget_UpdateIsSelected) == 0x000001, "Wrong alignment on InputActionCategoryWidget_UpdateIsSelected");
static_assert(sizeof(InputActionCategoryWidget_UpdateIsSelected) == 0x000001, "Wrong size on InputActionCategoryWidget_UpdateIsSelected");
static_assert(offsetof(InputActionCategoryWidget_UpdateIsSelected, bNewSelected) == 0x000000, "Member 'InputActionCategoryWidget_UpdateIsSelected::bNewSelected' has a wrong offset!");

// Function BrickRigs.InputActionCategoryWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct InputActionCategoryWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionCategoryWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on InputActionCategoryWidget_GetWidgetToFocus");
static_assert(sizeof(InputActionCategoryWidget_GetWidgetToFocus) == 0x000008, "Wrong size on InputActionCategoryWidget_GetWidgetToFocus");
static_assert(offsetof(InputActionCategoryWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'InputActionCategoryWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.InputActionListWidget.AddActionWidget
// 0x0010 (0x0010 - 0x0000)
struct InputActionListWidget_AddActionWidget final
{
public:
	class UInputActionWidget*                     Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputActionListWidget_AddActionWidget) == 0x000008, "Wrong alignment on InputActionListWidget_AddActionWidget");
static_assert(sizeof(InputActionListWidget_AddActionWidget) == 0x000010, "Wrong size on InputActionListWidget_AddActionWidget");
static_assert(offsetof(InputActionListWidget_AddActionWidget, Widget) == 0x000000, "Member 'InputActionListWidget_AddActionWidget::Widget' has a wrong offset!");
static_assert(offsetof(InputActionListWidget_AddActionWidget, ActionIndex) == 0x000008, "Member 'InputActionListWidget_AddActionWidget::ActionIndex' has a wrong offset!");

// Function BrickRigs.InputActionListWidget.AddCategoryWidget
// 0x0010 (0x0010 - 0x0000)
struct InputActionListWidget_AddCategoryWidget final
{
public:
	class UInputActionCategoryWidget*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputActionListWidget_AddCategoryWidget) == 0x000008, "Wrong alignment on InputActionListWidget_AddCategoryWidget");
static_assert(sizeof(InputActionListWidget_AddCategoryWidget) == 0x000010, "Wrong size on InputActionListWidget_AddCategoryWidget");
static_assert(offsetof(InputActionListWidget_AddCategoryWidget, Widget) == 0x000000, "Member 'InputActionListWidget_AddCategoryWidget::Widget' has a wrong offset!");
static_assert(offsetof(InputActionListWidget_AddCategoryWidget, CategoryIndex) == 0x000008, "Member 'InputActionListWidget_AddCategoryWidget::CategoryIndex' has a wrong offset!");

// Function BrickRigs.InputActionListWidget.UpdateInputActionListMode
// 0x0001 (0x0001 - 0x0000)
struct InputActionListWidget_UpdateInputActionListMode final
{
public:
	EInputActionListMode                          NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionListWidget_UpdateInputActionListMode) == 0x000001, "Wrong alignment on InputActionListWidget_UpdateInputActionListMode");
static_assert(sizeof(InputActionListWidget_UpdateInputActionListMode) == 0x000001, "Wrong size on InputActionListWidget_UpdateInputActionListMode");
static_assert(offsetof(InputActionListWidget_UpdateInputActionListMode, NewMode) == 0x000000, "Member 'InputActionListWidget_UpdateInputActionListMode::NewMode' has a wrong offset!");

// Function BrickRigs.InputActionListWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct InputActionListWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionListWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on InputActionListWidget_GetWidgetToFocus");
static_assert(sizeof(InputActionListWidget_GetWidgetToFocus) == 0x000008, "Wrong size on InputActionListWidget_GetWidgetToFocus");
static_assert(offsetof(InputActionListWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'InputActionListWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.InputActionWidget.UpdateCanActionBeRebound
// 0x0001 (0x0001 - 0x0000)
struct InputActionWidget_UpdateCanActionBeRebound final
{
public:
	bool                                          bInCanBeRebound;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_UpdateCanActionBeRebound) == 0x000001, "Wrong alignment on InputActionWidget_UpdateCanActionBeRebound");
static_assert(sizeof(InputActionWidget_UpdateCanActionBeRebound) == 0x000001, "Wrong size on InputActionWidget_UpdateCanActionBeRebound");
static_assert(offsetof(InputActionWidget_UpdateCanActionBeRebound, bInCanBeRebound) == 0x000000, "Member 'InputActionWidget_UpdateCanActionBeRebound::bInCanBeRebound' has a wrong offset!");

// Function BrickRigs.InputActionWidget.UpdateDisplayInfo
// 0x0028 (0x0028 - 0x0000)
struct InputActionWidget_UpdateDisplayInfo final
{
public:
	struct FDisplayInfo                           InDisplayInfo;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_UpdateDisplayInfo) == 0x000008, "Wrong alignment on InputActionWidget_UpdateDisplayInfo");
static_assert(sizeof(InputActionWidget_UpdateDisplayInfo) == 0x000028, "Wrong size on InputActionWidget_UpdateDisplayInfo");
static_assert(offsetof(InputActionWidget_UpdateDisplayInfo, InDisplayInfo) == 0x000000, "Member 'InputActionWidget_UpdateDisplayInfo::InDisplayInfo' has a wrong offset!");

// Function BrickRigs.InputActionWidget.UpdateInputActionListMode
// 0x0001 (0x0001 - 0x0000)
struct InputActionWidget_UpdateInputActionListMode final
{
public:
	EInputActionListMode                          NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_UpdateInputActionListMode) == 0x000001, "Wrong alignment on InputActionWidget_UpdateInputActionListMode");
static_assert(sizeof(InputActionWidget_UpdateInputActionListMode) == 0x000001, "Wrong size on InputActionWidget_UpdateInputActionListMode");
static_assert(offsetof(InputActionWidget_UpdateInputActionListMode, NewMode) == 0x000000, "Member 'InputActionWidget_UpdateInputActionListMode::NewMode' has a wrong offset!");

// Function BrickRigs.InputActionWidget.UpdateIsActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct InputActionWidget_UpdateIsActionEnabled final
{
public:
	bool                                          bInCanBeExecuted;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_UpdateIsActionEnabled) == 0x000001, "Wrong alignment on InputActionWidget_UpdateIsActionEnabled");
static_assert(sizeof(InputActionWidget_UpdateIsActionEnabled) == 0x000001, "Wrong size on InputActionWidget_UpdateIsActionEnabled");
static_assert(offsetof(InputActionWidget_UpdateIsActionEnabled, bInCanBeExecuted) == 0x000000, "Member 'InputActionWidget_UpdateIsActionEnabled::bInCanBeExecuted' has a wrong offset!");

// Function BrickRigs.InputActionWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct InputActionWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on InputActionWidget_GetWidgetToFocus");
static_assert(sizeof(InputActionWidget_GetWidgetToFocus) == 0x000008, "Wrong size on InputActionWidget_GetWidgetToFocus");
static_assert(offsetof(InputActionWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'InputActionWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.InputChordWidget.AddKeyWidget
// 0x0008 (0x0008 - 0x0000)
struct InputChordWidget_AddKeyWidget final
{
public:
	class UInputKeyWidget*                        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputChordWidget_AddKeyWidget) == 0x000008, "Wrong alignment on InputChordWidget_AddKeyWidget");
static_assert(sizeof(InputChordWidget_AddKeyWidget) == 0x000008, "Wrong size on InputChordWidget_AddKeyWidget");
static_assert(offsetof(InputChordWidget_AddKeyWidget, Widget) == 0x000000, "Member 'InputChordWidget_AddKeyWidget::Widget' has a wrong offset!");

// Function BrickRigs.InputChordWidget.AddSpacerWidget
// 0x0008 (0x0008 - 0x0000)
struct InputChordWidget_AddSpacerWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputChordWidget_AddSpacerWidget) == 0x000008, "Wrong alignment on InputChordWidget_AddSpacerWidget");
static_assert(sizeof(InputChordWidget_AddSpacerWidget) == 0x000008, "Wrong size on InputChordWidget_AddSpacerWidget");
static_assert(offsetof(InputChordWidget_AddSpacerWidget, Widget) == 0x000000, "Member 'InputChordWidget_AddSpacerWidget::Widget' has a wrong offset!");

// Function BrickRigs.InputChordWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct InputChordWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputChordWidget_SetColorStyle) == 0x000001, "Wrong alignment on InputChordWidget_SetColorStyle");
static_assert(sizeof(InputChordWidget_SetColorStyle) == 0x000001, "Wrong size on InputChordWidget_SetColorStyle");
static_assert(offsetof(InputChordWidget_SetColorStyle, NewStyle) == 0x000000, "Member 'InputChordWidget_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.InputChordWidget.SetInputChord
// 0x0028 (0x0028 - 0x0000)
struct InputChordWidget_SetInputChord final
{
public:
	struct FInputChord                            InInputChord;                                      // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAsGamepadKey;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputChordWidget_SetInputChord) == 0x000008, "Wrong alignment on InputChordWidget_SetInputChord");
static_assert(sizeof(InputChordWidget_SetInputChord) == 0x000028, "Wrong size on InputChordWidget_SetInputChord");
static_assert(offsetof(InputChordWidget_SetInputChord, InInputChord) == 0x000000, "Member 'InputChordWidget_SetInputChord::InInputChord' has a wrong offset!");
static_assert(offsetof(InputChordWidget_SetInputChord, bShowAsGamepadKey) == 0x000020, "Member 'InputChordWidget_SetInputChord::bShowAsGamepadKey' has a wrong offset!");

// Function BrickRigs.InputChordWidget.SetShowUnboundKey
// 0x0001 (0x0001 - 0x0000)
struct InputChordWidget_SetShowUnboundKey final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputChordWidget_SetShowUnboundKey) == 0x000001, "Wrong alignment on InputChordWidget_SetShowUnboundKey");
static_assert(sizeof(InputChordWidget_SetShowUnboundKey) == 0x000001, "Wrong size on InputChordWidget_SetShowUnboundKey");
static_assert(offsetof(InputChordWidget_SetShowUnboundKey, bShow) == 0x000000, "Member 'InputChordWidget_SetShowUnboundKey::bShow' has a wrong offset!");

// Function BrickRigs.InputChordWidget.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct InputChordWidget_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputChordWidget_SetStyleState) == 0x000001, "Wrong alignment on InputChordWidget_SetStyleState");
static_assert(sizeof(InputChordWidget_SetStyleState) == 0x000001, "Wrong size on InputChordWidget_SetStyleState");
static_assert(offsetof(InputChordWidget_SetStyleState, NewState) == 0x000000, "Member 'InputChordWidget_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.InputChordWidget.UpdateSpacerColorStyleAndStyleState
// 0x0010 (0x0010 - 0x0000)
struct InputChordWidget_UpdateSpacerColorStyleAndStyleState final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIColorStyle                            NewColorStyle;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrickUIStyleState                            NewStyleState;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputChordWidget_UpdateSpacerColorStyleAndStyleState) == 0x000008, "Wrong alignment on InputChordWidget_UpdateSpacerColorStyleAndStyleState");
static_assert(sizeof(InputChordWidget_UpdateSpacerColorStyleAndStyleState) == 0x000010, "Wrong size on InputChordWidget_UpdateSpacerColorStyleAndStyleState");
static_assert(offsetof(InputChordWidget_UpdateSpacerColorStyleAndStyleState, Widget) == 0x000000, "Member 'InputChordWidget_UpdateSpacerColorStyleAndStyleState::Widget' has a wrong offset!");
static_assert(offsetof(InputChordWidget_UpdateSpacerColorStyleAndStyleState, NewColorStyle) == 0x000008, "Member 'InputChordWidget_UpdateSpacerColorStyleAndStyleState::NewColorStyle' has a wrong offset!");
static_assert(offsetof(InputChordWidget_UpdateSpacerColorStyleAndStyleState, NewStyleState) == 0x000009, "Member 'InputChordWidget_UpdateSpacerColorStyleAndStyleState::NewStyleState' has a wrong offset!");

// Function BrickRigs.InputHelpWidget.GetGameOverlay
// 0x0008 (0x0008 - 0x0000)
struct InputHelpWidget_GetGameOverlay final
{
public:
	class UGameOverlayWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputHelpWidget_GetGameOverlay) == 0x000008, "Wrong alignment on InputHelpWidget_GetGameOverlay");
static_assert(sizeof(InputHelpWidget_GetGameOverlay) == 0x000008, "Wrong size on InputHelpWidget_GetGameOverlay");
static_assert(offsetof(InputHelpWidget_GetGameOverlay, ReturnValue) == 0x000000, "Member 'InputHelpWidget_GetGameOverlay::ReturnValue' has a wrong offset!");

// Function BrickRigs.InputHelpWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct InputHelpWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputHelpWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on InputHelpWidget_GetWidgetToFocus");
static_assert(sizeof(InputHelpWidget_GetWidgetToFocus) == 0x000008, "Wrong size on InputHelpWidget_GetWidgetToFocus");
static_assert(offsetof(InputHelpWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'InputHelpWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.SpectatorInputComponent.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct SpectatorInputComponent_MoveForward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorInputComponent_MoveForward) == 0x000004, "Wrong alignment on SpectatorInputComponent_MoveForward");
static_assert(sizeof(SpectatorInputComponent_MoveForward) == 0x000004, "Wrong size on SpectatorInputComponent_MoveForward");
static_assert(offsetof(SpectatorInputComponent_MoveForward, Val) == 0x000000, "Member 'SpectatorInputComponent_MoveForward::Val' has a wrong offset!");

// Function BrickRigs.SpectatorInputComponent.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct SpectatorInputComponent_MoveRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorInputComponent_MoveRight) == 0x000004, "Wrong alignment on SpectatorInputComponent_MoveRight");
static_assert(sizeof(SpectatorInputComponent_MoveRight) == 0x000004, "Wrong size on SpectatorInputComponent_MoveRight");
static_assert(offsetof(SpectatorInputComponent_MoveRight, Val) == 0x000000, "Member 'SpectatorInputComponent_MoveRight::Val' has a wrong offset!");

// Function BrickRigs.SpectatorInputComponent.MoveUp
// 0x0004 (0x0004 - 0x0000)
struct SpectatorInputComponent_MoveUp final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorInputComponent_MoveUp) == 0x000004, "Wrong alignment on SpectatorInputComponent_MoveUp");
static_assert(sizeof(SpectatorInputComponent_MoveUp) == 0x000004, "Wrong size on SpectatorInputComponent_MoveUp");
static_assert(offsetof(SpectatorInputComponent_MoveUp, Val) == 0x000000, "Member 'SpectatorInputComponent_MoveUp::Val' has a wrong offset!");

// Function BrickRigs.SpectatorInputComponent.RotatePawnCW
// 0x0004 (0x0004 - 0x0000)
struct SpectatorInputComponent_RotatePawnCW final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorInputComponent_RotatePawnCW) == 0x000004, "Wrong alignment on SpectatorInputComponent_RotatePawnCW");
static_assert(sizeof(SpectatorInputComponent_RotatePawnCW) == 0x000004, "Wrong size on SpectatorInputComponent_RotatePawnCW");
static_assert(offsetof(SpectatorInputComponent_RotatePawnCW, Val) == 0x000000, "Member 'SpectatorInputComponent_RotatePawnCW::Val' has a wrong offset!");

// Function BrickRigs.InputKeyWidget.SetKey
// 0x0020 (0x0020 - 0x0000)
struct InputKeyWidget_SetKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUsedAsModifier;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputKeyWidget_SetKey) == 0x000008, "Wrong alignment on InputKeyWidget_SetKey");
static_assert(sizeof(InputKeyWidget_SetKey) == 0x000020, "Wrong size on InputKeyWidget_SetKey");
static_assert(offsetof(InputKeyWidget_SetKey, InKey) == 0x000000, "Member 'InputKeyWidget_SetKey::InKey' has a wrong offset!");
static_assert(offsetof(InputKeyWidget_SetKey, bInUsedAsModifier) == 0x000018, "Member 'InputKeyWidget_SetKey::bInUsedAsModifier' has a wrong offset!");

// Function BrickRigs.InputKeyWidget.UpdateDisplayInfo
// 0x0030 (0x0030 - 0x0000)
struct InputKeyWidget_UpdateDisplayInfo final
{
public:
	struct FKeyDisplayTableRow                    DisplayInfo;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsGamepadKey;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputKeyWidget_UpdateDisplayInfo) == 0x000008, "Wrong alignment on InputKeyWidget_UpdateDisplayInfo");
static_assert(sizeof(InputKeyWidget_UpdateDisplayInfo) == 0x000030, "Wrong size on InputKeyWidget_UpdateDisplayInfo");
static_assert(offsetof(InputKeyWidget_UpdateDisplayInfo, DisplayInfo) == 0x000000, "Member 'InputKeyWidget_UpdateDisplayInfo::DisplayInfo' has a wrong offset!");
static_assert(offsetof(InputKeyWidget_UpdateDisplayInfo, bIsGamepadKey) == 0x000028, "Member 'InputKeyWidget_UpdateDisplayInfo::bIsGamepadKey' has a wrong offset!");

// Function BrickRigs.InputMappingKeyWidget.UpdateConflictedState
// 0x0001 (0x0001 - 0x0000)
struct InputMappingKeyWidget_UpdateConflictedState final
{
public:
	bool                                          bNewConflicted;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingKeyWidget_UpdateConflictedState) == 0x000001, "Wrong alignment on InputMappingKeyWidget_UpdateConflictedState");
static_assert(sizeof(InputMappingKeyWidget_UpdateConflictedState) == 0x000001, "Wrong size on InputMappingKeyWidget_UpdateConflictedState");
static_assert(offsetof(InputMappingKeyWidget_UpdateConflictedState, bNewConflicted) == 0x000000, "Member 'InputMappingKeyWidget_UpdateConflictedState::bNewConflicted' has a wrong offset!");

// Function BrickRigs.WinchBrick.Interact_AttachWinch
// 0x0008 (0x0008 - 0x0000)
struct WinchBrick_Interact_AttachWinch final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WinchBrick_Interact_AttachWinch) == 0x000008, "Wrong alignment on WinchBrick_Interact_AttachWinch");
static_assert(sizeof(WinchBrick_Interact_AttachWinch) == 0x000008, "Wrong size on WinchBrick_Interact_AttachWinch");
static_assert(offsetof(WinchBrick_Interact_AttachWinch, OtherPC) == 0x000000, "Member 'WinchBrick_Interact_AttachWinch::OtherPC' has a wrong offset!");

// Function BrickRigs.WinchBrick.Interact_DetachWinch
// 0x0008 (0x0008 - 0x0000)
struct WinchBrick_Interact_DetachWinch final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WinchBrick_Interact_DetachWinch) == 0x000008, "Wrong alignment on WinchBrick_Interact_DetachWinch");
static_assert(sizeof(WinchBrick_Interact_DetachWinch) == 0x000008, "Wrong size on WinchBrick_Interact_DetachWinch");
static_assert(offsetof(WinchBrick_Interact_DetachWinch, OtherPC) == 0x000000, "Member 'WinchBrick_Interact_DetachWinch::OtherPC' has a wrong offset!");

// Function BrickRigs.WinchBrick.OnRep_AttachTarget
// 0x001C (0x001C - 0x0000)
struct WinchBrick_OnRep_AttachTarget final
{
public:
	struct FWinchAttachTarget                     PrevAttachTarget;                                  // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WinchBrick_OnRep_AttachTarget) == 0x000004, "Wrong alignment on WinchBrick_OnRep_AttachTarget");
static_assert(sizeof(WinchBrick_OnRep_AttachTarget) == 0x00001C, "Wrong size on WinchBrick_OnRep_AttachTarget");
static_assert(offsetof(WinchBrick_OnRep_AttachTarget, PrevAttachTarget) == 0x000000, "Member 'WinchBrick_OnRep_AttachTarget::PrevAttachTarget' has a wrong offset!");

// Function BrickRigs.InputMappingPropertyWidget.AddKeyWidget
// 0x0010 (0x0010 - 0x0000)
struct InputMappingPropertyWidget_AddKeyWidget final
{
public:
	class UInputMappingKeyWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingPropertyWidget_AddKeyWidget) == 0x000008, "Wrong alignment on InputMappingPropertyWidget_AddKeyWidget");
static_assert(sizeof(InputMappingPropertyWidget_AddKeyWidget) == 0x000010, "Wrong size on InputMappingPropertyWidget_AddKeyWidget");
static_assert(offsetof(InputMappingPropertyWidget_AddKeyWidget, Widget) == 0x000000, "Member 'InputMappingPropertyWidget_AddKeyWidget::Widget' has a wrong offset!");
static_assert(offsetof(InputMappingPropertyWidget_AddKeyWidget, Index_0) == 0x000008, "Member 'InputMappingPropertyWidget_AddKeyWidget::Index_0' has a wrong offset!");

// Function BrickRigs.InputMappingPropertyWidget.UpdateCanAddMapping
// 0x0001 (0x0001 - 0x0000)
struct InputMappingPropertyWidget_UpdateCanAddMapping final
{
public:
	bool                                          bCanAdd;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingPropertyWidget_UpdateCanAddMapping) == 0x000001, "Wrong alignment on InputMappingPropertyWidget_UpdateCanAddMapping");
static_assert(sizeof(InputMappingPropertyWidget_UpdateCanAddMapping) == 0x000001, "Wrong size on InputMappingPropertyWidget_UpdateCanAddMapping");
static_assert(offsetof(InputMappingPropertyWidget_UpdateCanAddMapping, bCanAdd) == 0x000000, "Member 'InputMappingPropertyWidget_UpdateCanAddMapping::bCanAdd' has a wrong offset!");

// Function BrickRigs.InteractionOptionWidget.UpdateCanBeClicked
// 0x0001 (0x0001 - 0x0000)
struct InteractionOptionWidget_UpdateCanBeClicked final
{
public:
	bool                                          bInCanBeClicked;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionOptionWidget_UpdateCanBeClicked) == 0x000001, "Wrong alignment on InteractionOptionWidget_UpdateCanBeClicked");
static_assert(sizeof(InteractionOptionWidget_UpdateCanBeClicked) == 0x000001, "Wrong size on InteractionOptionWidget_UpdateCanBeClicked");
static_assert(offsetof(InteractionOptionWidget_UpdateCanBeClicked, bInCanBeClicked) == 0x000000, "Member 'InteractionOptionWidget_UpdateCanBeClicked::bInCanBeClicked' has a wrong offset!");

// Function BrickRigs.InteractionOptionWidget.UpdateColorStyle
// 0x0001 (0x0001 - 0x0000)
struct InteractionOptionWidget_UpdateColorStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionOptionWidget_UpdateColorStyle) == 0x000001, "Wrong alignment on InteractionOptionWidget_UpdateColorStyle");
static_assert(sizeof(InteractionOptionWidget_UpdateColorStyle) == 0x000001, "Wrong size on InteractionOptionWidget_UpdateColorStyle");
static_assert(offsetof(InteractionOptionWidget_UpdateColorStyle, InColorStyle) == 0x000000, "Member 'InteractionOptionWidget_UpdateColorStyle::InColorStyle' has a wrong offset!");

// Function BrickRigs.InteractionWidget.AddOptionWidget
// 0x0010 (0x0010 - 0x0000)
struct InteractionWidget_AddOptionWidget final
{
public:
	class UInteractionOptionWidget*               Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionWidget_AddOptionWidget) == 0x000008, "Wrong alignment on InteractionWidget_AddOptionWidget");
static_assert(sizeof(InteractionWidget_AddOptionWidget) == 0x000010, "Wrong size on InteractionWidget_AddOptionWidget");
static_assert(offsetof(InteractionWidget_AddOptionWidget, Widget) == 0x000000, "Member 'InteractionWidget_AddOptionWidget::Widget' has a wrong offset!");
static_assert(offsetof(InteractionWidget_AddOptionWidget, OptionIndex) == 0x000008, "Member 'InteractionWidget_AddOptionWidget::OptionIndex' has a wrong offset!");

// Function BrickRigs.InventoryContainerWidget.UpdateHasInventory
// 0x0001 (0x0001 - 0x0000)
struct InventoryContainerWidget_UpdateHasInventory final
{
public:
	bool                                          bHasInventory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContainerWidget_UpdateHasInventory) == 0x000001, "Wrong alignment on InventoryContainerWidget_UpdateHasInventory");
static_assert(sizeof(InventoryContainerWidget_UpdateHasInventory) == 0x000001, "Wrong size on InventoryContainerWidget_UpdateHasInventory");
static_assert(offsetof(InventoryContainerWidget_UpdateHasInventory, bHasInventory) == 0x000000, "Member 'InventoryContainerWidget_UpdateHasInventory::bHasInventory' has a wrong offset!");

// Function BrickRigs.InventoryContainerWidget.UpdateOwnerMoney
// 0x0004 (0x0004 - 0x0000)
struct InventoryContainerWidget_UpdateOwnerMoney final
{
public:
	float                                         NewMoney;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContainerWidget_UpdateOwnerMoney) == 0x000004, "Wrong alignment on InventoryContainerWidget_UpdateOwnerMoney");
static_assert(sizeof(InventoryContainerWidget_UpdateOwnerMoney) == 0x000004, "Wrong size on InventoryContainerWidget_UpdateOwnerMoney");
static_assert(offsetof(InventoryContainerWidget_UpdateOwnerMoney, NewMoney) == 0x000000, "Member 'InventoryContainerWidget_UpdateOwnerMoney::NewMoney' has a wrong offset!");

// Function BrickRigs.InventorySlotWidget.AddSubInventoryWidget
// 0x0008 (0x0008 - 0x0000)
struct InventorySlotWidget_AddSubInventoryWidget final
{
public:
	class UInventoryContainerWidget*              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySlotWidget_AddSubInventoryWidget) == 0x000008, "Wrong alignment on InventorySlotWidget_AddSubInventoryWidget");
static_assert(sizeof(InventorySlotWidget_AddSubInventoryWidget) == 0x000008, "Wrong size on InventorySlotWidget_AddSubInventoryWidget");
static_assert(offsetof(InventorySlotWidget_AddSubInventoryWidget, Widget) == 0x000000, "Member 'InventorySlotWidget_AddSubInventoryWidget::Widget' has a wrong offset!");

// Function BrickRigs.InventorySlotWidget.OnButtonDragged
// 0x0160 (0x0160 - 0x0000)
struct InventorySlotWidget_OnButtonDragged final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySlotWidget_OnButtonDragged) == 0x000008, "Wrong alignment on InventorySlotWidget_OnButtonDragged");
static_assert(sizeof(InventorySlotWidget_OnButtonDragged) == 0x000160, "Wrong size on InventorySlotWidget_OnButtonDragged");
static_assert(offsetof(InventorySlotWidget_OnButtonDragged, InGeometry) == 0x000000, "Member 'InventorySlotWidget_OnButtonDragged::InGeometry' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_OnButtonDragged, InMouseEvent) == 0x000038, "Member 'InventorySlotWidget_OnButtonDragged::InMouseEvent' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_OnButtonDragged, ReturnValue) == 0x0000A8, "Member 'InventorySlotWidget_OnButtonDragged::ReturnValue' has a wrong offset!");

// Function BrickRigs.InventorySlotWidget.UpdateSlotApperance
// 0x0008 (0x0008 - 0x0000)
struct InventorySlotWidget_UpdateSlotApperance final
{
public:
	bool                                          bInIsDragWidget;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsSpecialSlot;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsValidSlot;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCanDrag;                                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDragging;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCanDrop;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDropReplace;                                    // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDragOver;                                     // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySlotWidget_UpdateSlotApperance) == 0x000001, "Wrong alignment on InventorySlotWidget_UpdateSlotApperance");
static_assert(sizeof(InventorySlotWidget_UpdateSlotApperance) == 0x000008, "Wrong size on InventorySlotWidget_UpdateSlotApperance");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInIsDragWidget) == 0x000000, "Member 'InventorySlotWidget_UpdateSlotApperance::bInIsDragWidget' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInIsSpecialSlot) == 0x000001, "Member 'InventorySlotWidget_UpdateSlotApperance::bInIsSpecialSlot' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInIsValidSlot) == 0x000002, "Member 'InventorySlotWidget_UpdateSlotApperance::bInIsValidSlot' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInCanDrag) == 0x000003, "Member 'InventorySlotWidget_UpdateSlotApperance::bInCanDrag' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInIsDragging) == 0x000004, "Member 'InventorySlotWidget_UpdateSlotApperance::bInIsDragging' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInCanDrop) == 0x000005, "Member 'InventorySlotWidget_UpdateSlotApperance::bInCanDrop' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInDropReplace) == 0x000006, "Member 'InventorySlotWidget_UpdateSlotApperance::bInDropReplace' has a wrong offset!");
static_assert(offsetof(InventorySlotWidget_UpdateSlotApperance, bInIsDragOver) == 0x000007, "Member 'InventorySlotWidget_UpdateSlotApperance::bInIsDragOver' has a wrong offset!");

// Function BrickRigs.TargetMarkerIconWidget.UpdateAmmoType
// 0x0001 (0x0001 - 0x0000)
struct TargetMarkerIconWidget_UpdateAmmoType final
{
public:
	EAmmoType                                     NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMarkerIconWidget_UpdateAmmoType) == 0x000001, "Wrong alignment on TargetMarkerIconWidget_UpdateAmmoType");
static_assert(sizeof(TargetMarkerIconWidget_UpdateAmmoType) == 0x000001, "Wrong size on TargetMarkerIconWidget_UpdateAmmoType");
static_assert(offsetof(TargetMarkerIconWidget_UpdateAmmoType, NewType) == 0x000000, "Member 'TargetMarkerIconWidget_UpdateAmmoType::NewType' has a wrong offset!");

// Function BrickRigs.TargetMarkerIconWidget.UpdateFireAction
// 0x0004 (0x0004 - 0x0000)
struct TargetMarkerIconWidget_UpdateFireAction final
{
public:
	int32                                         NewActionIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMarkerIconWidget_UpdateFireAction) == 0x000004, "Wrong alignment on TargetMarkerIconWidget_UpdateFireAction");
static_assert(sizeof(TargetMarkerIconWidget_UpdateFireAction) == 0x000004, "Wrong size on TargetMarkerIconWidget_UpdateFireAction");
static_assert(offsetof(TargetMarkerIconWidget_UpdateFireAction, NewActionIndex) == 0x000000, "Member 'TargetMarkerIconWidget_UpdateFireAction::NewActionIndex' has a wrong offset!");

// Function BrickRigs.TargetMarkerIconWidget.UpdateHasValidTarget
// 0x0001 (0x0001 - 0x0000)
struct TargetMarkerIconWidget_UpdateHasValidTarget final
{
public:
	bool                                          bNewHasValidTarget;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMarkerIconWidget_UpdateHasValidTarget) == 0x000001, "Wrong alignment on TargetMarkerIconWidget_UpdateHasValidTarget");
static_assert(sizeof(TargetMarkerIconWidget_UpdateHasValidTarget) == 0x000001, "Wrong size on TargetMarkerIconWidget_UpdateHasValidTarget");
static_assert(offsetof(TargetMarkerIconWidget_UpdateHasValidTarget, bNewHasValidTarget) == 0x000000, "Member 'TargetMarkerIconWidget_UpdateHasValidTarget::bNewHasValidTarget' has a wrong offset!");

// Function BrickRigs.TargetMarkerIconWidget.UpdateTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct TargetMarkerIconWidget_UpdateTargetDistance final
{
public:
	float                                         NewDist;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMarkerIconWidget_UpdateTargetDistance) == 0x000004, "Wrong alignment on TargetMarkerIconWidget_UpdateTargetDistance");
static_assert(sizeof(TargetMarkerIconWidget_UpdateTargetDistance) == 0x000004, "Wrong size on TargetMarkerIconWidget_UpdateTargetDistance");
static_assert(offsetof(TargetMarkerIconWidget_UpdateTargetDistance, NewDist) == 0x000000, "Member 'TargetMarkerIconWidget_UpdateTargetDistance::NewDist' has a wrong offset!");

// Function BrickRigs.BuildingPart.Fill
// 0x0001 (0x0001 - 0x0000)
struct BuildingPart_Fill final
{
public:
	uint8                                         MeshIdx;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPart_Fill) == 0x000001, "Wrong alignment on BuildingPart_Fill");
static_assert(sizeof(BuildingPart_Fill) == 0x000001, "Wrong size on BuildingPart_Fill");
static_assert(offsetof(BuildingPart_Fill, MeshIdx) == 0x000000, "Member 'BuildingPart_Fill::MeshIdx' has a wrong offset!");

// Function BrickRigs.BuildingPart.Floor
// 0x0008 (0x0008 - 0x0000)
struct BuildingPart_Floor final
{
public:
	int32                                         Floor_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MeshIdx;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingPart_Floor) == 0x000004, "Wrong alignment on BuildingPart_Floor");
static_assert(sizeof(BuildingPart_Floor) == 0x000008, "Wrong size on BuildingPart_Floor");
static_assert(offsetof(BuildingPart_Floor, Floor_0) == 0x000000, "Member 'BuildingPart_Floor::Floor_0' has a wrong offset!");
static_assert(offsetof(BuildingPart_Floor, MeshIdx) == 0x000004, "Member 'BuildingPart_Floor::MeshIdx' has a wrong offset!");

// Function BrickRigs.BuildingPart.Grid
// 0x0008 (0x0008 - 0x0000)
struct BuildingPart_Grid final
{
public:
	int32                                         Dist;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MeshIdx;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingPart_Grid) == 0x000004, "Wrong alignment on BuildingPart_Grid");
static_assert(sizeof(BuildingPart_Grid) == 0x000008, "Wrong size on BuildingPart_Grid");
static_assert(offsetof(BuildingPart_Grid, Dist) == 0x000000, "Member 'BuildingPart_Grid::Dist' has a wrong offset!");
static_assert(offsetof(BuildingPart_Grid, MeshIdx) == 0x000004, "Member 'BuildingPart_Grid::MeshIdx' has a wrong offset!");

// Function BrickRigs.BuildingPart.Place
// 0x0010 (0x0010 - 0x0000)
struct BuildingPart_Place final
{
public:
	EBuildingSide                                 Side;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Floor;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MeshIdx;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingPart_Place) == 0x000004, "Wrong alignment on BuildingPart_Place");
static_assert(sizeof(BuildingPart_Place) == 0x000010, "Wrong size on BuildingPart_Place");
static_assert(offsetof(BuildingPart_Place, Side) == 0x000000, "Member 'BuildingPart_Place::Side' has a wrong offset!");
static_assert(offsetof(BuildingPart_Place, Floor) == 0x000004, "Member 'BuildingPart_Place::Floor' has a wrong offset!");
static_assert(offsetof(BuildingPart_Place, Position) == 0x000008, "Member 'BuildingPart_Place::Position' has a wrong offset!");
static_assert(offsetof(BuildingPart_Place, MeshIdx) == 0x00000C, "Member 'BuildingPart_Place::MeshIdx' has a wrong offset!");

// Function BrickRigs.BuildingPart.Rect
// 0x0018 (0x0018 - 0x0000)
struct BuildingPart_Rect final
{
public:
	EBuildingSide                                 Side;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartFloor;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFloor;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndPosition;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MeshIdx;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingPart_Rect) == 0x000004, "Wrong alignment on BuildingPart_Rect");
static_assert(sizeof(BuildingPart_Rect) == 0x000018, "Wrong size on BuildingPart_Rect");
static_assert(offsetof(BuildingPart_Rect, Side) == 0x000000, "Member 'BuildingPart_Rect::Side' has a wrong offset!");
static_assert(offsetof(BuildingPart_Rect, StartFloor) == 0x000004, "Member 'BuildingPart_Rect::StartFloor' has a wrong offset!");
static_assert(offsetof(BuildingPart_Rect, EndFloor) == 0x000008, "Member 'BuildingPart_Rect::EndFloor' has a wrong offset!");
static_assert(offsetof(BuildingPart_Rect, StartPosition) == 0x00000C, "Member 'BuildingPart_Rect::StartPosition' has a wrong offset!");
static_assert(offsetof(BuildingPart_Rect, EndPosition) == 0x000010, "Member 'BuildingPart_Rect::EndPosition' has a wrong offset!");
static_assert(offsetof(BuildingPart_Rect, MeshIdx) == 0x000014, "Member 'BuildingPart_Rect::MeshIdx' has a wrong offset!");

// Function BrickRigs.LoadoutContainer.Interact_Inventory
// 0x0008 (0x0008 - 0x0000)
struct LoadoutContainer_Interact_Inventory final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutContainer_Interact_Inventory) == 0x000008, "Wrong alignment on LoadoutContainer_Interact_Inventory");
static_assert(sizeof(LoadoutContainer_Interact_Inventory) == 0x000008, "Wrong size on LoadoutContainer_Interact_Inventory");
static_assert(offsetof(LoadoutContainer_Interact_Inventory, PC) == 0x000000, "Member 'LoadoutContainer_Interact_Inventory::PC' has a wrong offset!");

// Function BrickRigs.LoadoutContainer.UpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct LoadoutContainer_UpdateAnimation final
{
public:
	float                                         InAnimRatio;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutContainer_UpdateAnimation) == 0x000004, "Wrong alignment on LoadoutContainer_UpdateAnimation");
static_assert(sizeof(LoadoutContainer_UpdateAnimation) == 0x000004, "Wrong size on LoadoutContainer_UpdateAnimation");
static_assert(offsetof(LoadoutContainer_UpdateAnimation, InAnimRatio) == 0x000000, "Member 'LoadoutContainer_UpdateAnimation::InAnimRatio' has a wrong offset!");

// Function BrickRigs.MapCrosshairWidget.SetColorStyle
// 0x0001 (0x0001 - 0x0000)
struct MapCrosshairWidget_SetColorStyle final
{
public:
	EBrickUIColorStyle                            NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapCrosshairWidget_SetColorStyle) == 0x000001, "Wrong alignment on MapCrosshairWidget_SetColorStyle");
static_assert(sizeof(MapCrosshairWidget_SetColorStyle) == 0x000001, "Wrong size on MapCrosshairWidget_SetColorStyle");
static_assert(offsetof(MapCrosshairWidget_SetColorStyle, NewStyle) == 0x000000, "Member 'MapCrosshairWidget_SetColorStyle::NewStyle' has a wrong offset!");

// Function BrickRigs.MapCrosshairWidget.SetStyleState
// 0x0001 (0x0001 - 0x0000)
struct MapCrosshairWidget_SetStyleState final
{
public:
	EBrickUIStyleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapCrosshairWidget_SetStyleState) == 0x000001, "Wrong alignment on MapCrosshairWidget_SetStyleState");
static_assert(sizeof(MapCrosshairWidget_SetStyleState) == 0x000001, "Wrong size on MapCrosshairWidget_SetStyleState");
static_assert(offsetof(MapCrosshairWidget_SetStyleState, NewState) == 0x000000, "Member 'MapCrosshairWidget_SetStyleState::NewState' has a wrong offset!");

// Function BrickRigs.RadioButtonPanel.GetSelectedWidgets
// 0x0010 (0x0010 - 0x0000)
struct RadioButtonPanel_GetSelectedWidgets final
{
public:
	TArray<class URadioButtonWidget*>             OutWidgets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButtonPanel_GetSelectedWidgets) == 0x000008, "Wrong alignment on RadioButtonPanel_GetSelectedWidgets");
static_assert(sizeof(RadioButtonPanel_GetSelectedWidgets) == 0x000010, "Wrong size on RadioButtonPanel_GetSelectedWidgets");
static_assert(offsetof(RadioButtonPanel_GetSelectedWidgets, OutWidgets) == 0x000000, "Member 'RadioButtonPanel_GetSelectedWidgets::OutWidgets' has a wrong offset!");

// Function BrickRigs.RadioButtonPanel.SelectButton
// 0x0008 (0x0008 - 0x0000)
struct RadioButtonPanel_SelectButton final
{
public:
	class URadioButtonWidget*                     Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButtonPanel_SelectButton) == 0x000008, "Wrong alignment on RadioButtonPanel_SelectButton");
static_assert(sizeof(RadioButtonPanel_SelectButton) == 0x000008, "Wrong size on RadioButtonPanel_SelectButton");
static_assert(offsetof(RadioButtonPanel_SelectButton, Button) == 0x000000, "Member 'RadioButtonPanel_SelectButton::Button' has a wrong offset!");

// Function BrickRigs.RadioButtonPanel.UnselectButton
// 0x0008 (0x0008 - 0x0000)
struct RadioButtonPanel_UnselectButton final
{
public:
	class URadioButtonWidget*                     Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButtonPanel_UnselectButton) == 0x000008, "Wrong alignment on RadioButtonPanel_UnselectButton");
static_assert(sizeof(RadioButtonPanel_UnselectButton) == 0x000008, "Wrong size on RadioButtonPanel_UnselectButton");
static_assert(offsetof(RadioButtonPanel_UnselectButton, Button) == 0x000000, "Member 'RadioButtonPanel_UnselectButton::Button' has a wrong offset!");

// Function BrickRigs.RadioButtonPanel.GetNumSelectedWidgets
// 0x0004 (0x0004 - 0x0000)
struct RadioButtonPanel_GetNumSelectedWidgets final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButtonPanel_GetNumSelectedWidgets) == 0x000004, "Wrong alignment on RadioButtonPanel_GetNumSelectedWidgets");
static_assert(sizeof(RadioButtonPanel_GetNumSelectedWidgets) == 0x000004, "Wrong size on RadioButtonPanel_GetNumSelectedWidgets");
static_assert(offsetof(RadioButtonPanel_GetNumSelectedWidgets, ReturnValue) == 0x000000, "Member 'RadioButtonPanel_GetNumSelectedWidgets::ReturnValue' has a wrong offset!");

// Function BrickRigs.RadioButtonPanel.GetSelectedWidget
// 0x0008 (0x0008 - 0x0000)
struct RadioButtonPanel_GetSelectedWidget final
{
public:
	class URadioButtonWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButtonPanel_GetSelectedWidget) == 0x000008, "Wrong alignment on RadioButtonPanel_GetSelectedWidget");
static_assert(sizeof(RadioButtonPanel_GetSelectedWidget) == 0x000008, "Wrong size on RadioButtonPanel_GetSelectedWidget");
static_assert(offsetof(RadioButtonPanel_GetSelectedWidget, ReturnValue) == 0x000000, "Member 'RadioButtonPanel_GetSelectedWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.MapWidget.OnMeasurementSystemChanged
// 0x0001 (0x0001 - 0x0000)
struct MapWidget_OnMeasurementSystemChanged final
{
public:
	EMeasurementSystem                            NewSystem;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapWidget_OnMeasurementSystemChanged) == 0x000001, "Wrong alignment on MapWidget_OnMeasurementSystemChanged");
static_assert(sizeof(MapWidget_OnMeasurementSystemChanged) == 0x000001, "Wrong size on MapWidget_OnMeasurementSystemChanged");
static_assert(offsetof(MapWidget_OnMeasurementSystemChanged, NewSystem) == 0x000000, "Member 'MapWidget_OnMeasurementSystemChanged::NewSystem' has a wrong offset!");

// Function BrickRigs.MapWidget.ResetPanAndZoom
// 0x0001 (0x0001 - 0x0000)
struct MapWidget_ResetPanAndZoom final
{
public:
	bool                                          bInitialize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapWidget_ResetPanAndZoom) == 0x000001, "Wrong alignment on MapWidget_ResetPanAndZoom");
static_assert(sizeof(MapWidget_ResetPanAndZoom) == 0x000001, "Wrong size on MapWidget_ResetPanAndZoom");
static_assert(offsetof(MapWidget_ResetPanAndZoom, bInitialize) == 0x000000, "Member 'MapWidget_ResetPanAndZoom::bInitialize' has a wrong offset!");

// Function BrickRigs.MapWidget.UpdateViewportPannedOrZoomed
// 0x0001 (0x0001 - 0x0000)
struct MapWidget_UpdateViewportPannedOrZoomed final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapWidget_UpdateViewportPannedOrZoomed) == 0x000001, "Wrong alignment on MapWidget_UpdateViewportPannedOrZoomed");
static_assert(sizeof(MapWidget_UpdateViewportPannedOrZoomed) == 0x000001, "Wrong size on MapWidget_UpdateViewportPannedOrZoomed");
static_assert(offsetof(MapWidget_UpdateViewportPannedOrZoomed, bValue) == 0x000000, "Member 'MapWidget_UpdateViewportPannedOrZoomed::bValue' has a wrong offset!");

// Function BrickRigs.MapWidget.CreateMapMID
// 0x0008 (0x0008 - 0x0000)
struct MapWidget_CreateMapMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapWidget_CreateMapMID) == 0x000008, "Wrong alignment on MapWidget_CreateMapMID");
static_assert(sizeof(MapWidget_CreateMapMID) == 0x000008, "Wrong size on MapWidget_CreateMapMID");
static_assert(offsetof(MapWidget_CreateMapMID, ReturnValue) == 0x000000, "Member 'MapWidget_CreateMapMID::ReturnValue' has a wrong offset!");

// Function BrickRigs.MapWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MapWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on MapWidget_GetWidgetToFocus");
static_assert(sizeof(MapWidget_GetWidgetToFocus) == 0x000008, "Wrong size on MapWidget_GetWidgetToFocus");
static_assert(offsetof(MapWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MapWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.MatchMenuWidget.UpdateIsAdmin
// 0x0001 (0x0001 - 0x0000)
struct MatchMenuWidget_UpdateIsAdmin final
{
public:
	bool                                          bNewIsAdmin;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchMenuWidget_UpdateIsAdmin) == 0x000001, "Wrong alignment on MatchMenuWidget_UpdateIsAdmin");
static_assert(sizeof(MatchMenuWidget_UpdateIsAdmin) == 0x000001, "Wrong size on MatchMenuWidget_UpdateIsAdmin");
static_assert(offsetof(MatchMenuWidget_UpdateIsAdmin, bNewIsAdmin) == 0x000000, "Member 'MatchMenuWidget_UpdateIsAdmin::bNewIsAdmin' has a wrong offset!");

// Function BrickRigs.MatchMenuWidget.UpdateRestartMatchButton
// 0x0002 (0x0002 - 0x0000)
struct MatchMenuWidget_UpdateRestartMatchButton final
{
public:
	bool                                          bCanRestart;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSameLevelAndMode;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchMenuWidget_UpdateRestartMatchButton) == 0x000001, "Wrong alignment on MatchMenuWidget_UpdateRestartMatchButton");
static_assert(sizeof(MatchMenuWidget_UpdateRestartMatchButton) == 0x000002, "Wrong size on MatchMenuWidget_UpdateRestartMatchButton");
static_assert(offsetof(MatchMenuWidget_UpdateRestartMatchButton, bCanRestart) == 0x000000, "Member 'MatchMenuWidget_UpdateRestartMatchButton::bCanRestart' has a wrong offset!");
static_assert(offsetof(MatchMenuWidget_UpdateRestartMatchButton, bSameLevelAndMode) == 0x000001, "Member 'MatchMenuWidget_UpdateRestartMatchButton::bSameLevelAndMode' has a wrong offset!");

// Function BrickRigs.MatchTimerWidget.UpdateTimer
// 0x0004 (0x0004 - 0x0000)
struct MatchTimerWidget_UpdateTimer final
{
public:
	int32                                         NewTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTimerWidget_UpdateTimer) == 0x000004, "Wrong alignment on MatchTimerWidget_UpdateTimer");
static_assert(sizeof(MatchTimerWidget_UpdateTimer) == 0x000004, "Wrong size on MatchTimerWidget_UpdateTimer");
static_assert(offsetof(MatchTimerWidget_UpdateTimer, NewTime) == 0x000000, "Member 'MatchTimerWidget_UpdateTimer::NewTime' has a wrong offset!");

// Function BrickRigs.MenuButtonPanelWidget.ClearButtons
// 0x0001 (0x0001 - 0x0000)
struct MenuButtonPanelWidget_ClearButtons final
{
public:
	bool                                          bManualRemove;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonPanelWidget_ClearButtons) == 0x000001, "Wrong alignment on MenuButtonPanelWidget_ClearButtons");
static_assert(sizeof(MenuButtonPanelWidget_ClearButtons) == 0x000001, "Wrong size on MenuButtonPanelWidget_ClearButtons");
static_assert(offsetof(MenuButtonPanelWidget_ClearButtons, bManualRemove) == 0x000000, "Member 'MenuButtonPanelWidget_ClearButtons::bManualRemove' has a wrong offset!");

// Function BrickRigs.MenuButtonPanelWidget.CreateButton
// 0x0038 (0x0038 - 0x0000)
struct MenuButtonPanelWidget_CreateButton final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         IconIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Delegate;                                          // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuButtonWidget*                      ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonPanelWidget_CreateButton) == 0x000008, "Wrong alignment on MenuButtonPanelWidget_CreateButton");
static_assert(sizeof(MenuButtonPanelWidget_CreateButton) == 0x000038, "Wrong size on MenuButtonPanelWidget_CreateButton");
static_assert(offsetof(MenuButtonPanelWidget_CreateButton, DisplayText) == 0x000000, "Member 'MenuButtonPanelWidget_CreateButton::DisplayText' has a wrong offset!");
static_assert(offsetof(MenuButtonPanelWidget_CreateButton, IconIndex) == 0x000018, "Member 'MenuButtonPanelWidget_CreateButton::IconIndex' has a wrong offset!");
static_assert(offsetof(MenuButtonPanelWidget_CreateButton, Delegate) == 0x00001C, "Member 'MenuButtonPanelWidget_CreateButton::Delegate' has a wrong offset!");
static_assert(offsetof(MenuButtonPanelWidget_CreateButton, ReturnValue) == 0x000030, "Member 'MenuButtonPanelWidget_CreateButton::ReturnValue' has a wrong offset!");

// Function BrickRigs.MenuButtonPanelWidget.SetNumButtonsPerRow
// 0x0004 (0x0004 - 0x0000)
struct MenuButtonPanelWidget_SetNumButtonsPerRow final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonPanelWidget_SetNumButtonsPerRow) == 0x000004, "Wrong alignment on MenuButtonPanelWidget_SetNumButtonsPerRow");
static_assert(sizeof(MenuButtonPanelWidget_SetNumButtonsPerRow) == 0x000004, "Wrong size on MenuButtonPanelWidget_SetNumButtonsPerRow");
static_assert(offsetof(MenuButtonPanelWidget_SetNumButtonsPerRow, NewNum) == 0x000000, "Member 'MenuButtonPanelWidget_SetNumButtonsPerRow::NewNum' has a wrong offset!");

// Function BrickRigs.MenuButtonPanelWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MenuButtonPanelWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuButtonPanelWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on MenuButtonPanelWidget_GetWidgetToFocus");
static_assert(sizeof(MenuButtonPanelWidget_GetWidgetToFocus) == 0x000008, "Wrong size on MenuButtonPanelWidget_GetWidgetToFocus");
static_assert(offsetof(MenuButtonPanelWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MenuButtonPanelWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.UGCTagsPropertyWidget.InitializeDepartmentItem
// 0x0148 (0x0148 - 0x0000)
struct UGCTagsPropertyWidget_InitializeDepartmentItem final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               OutParams;                                         // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCTagsPropertyWidget_InitializeDepartmentItem) == 0x000008, "Wrong alignment on UGCTagsPropertyWidget_InitializeDepartmentItem");
static_assert(sizeof(UGCTagsPropertyWidget_InitializeDepartmentItem) == 0x000148, "Wrong size on UGCTagsPropertyWidget_InitializeDepartmentItem");
static_assert(offsetof(UGCTagsPropertyWidget_InitializeDepartmentItem, Item) == 0x000000, "Member 'UGCTagsPropertyWidget_InitializeDepartmentItem::Item' has a wrong offset!");
static_assert(offsetof(UGCTagsPropertyWidget_InitializeDepartmentItem, OutParams) == 0x000008, "Member 'UGCTagsPropertyWidget_InitializeDepartmentItem::OutParams' has a wrong offset!");

// Function BrickRigs.UGCTagsPropertyWidget.InitializeEraItem
// 0x0148 (0x0148 - 0x0000)
struct UGCTagsPropertyWidget_InitializeEraItem final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               OutParams;                                         // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCTagsPropertyWidget_InitializeEraItem) == 0x000008, "Wrong alignment on UGCTagsPropertyWidget_InitializeEraItem");
static_assert(sizeof(UGCTagsPropertyWidget_InitializeEraItem) == 0x000148, "Wrong size on UGCTagsPropertyWidget_InitializeEraItem");
static_assert(offsetof(UGCTagsPropertyWidget_InitializeEraItem, Item) == 0x000000, "Member 'UGCTagsPropertyWidget_InitializeEraItem::Item' has a wrong offset!");
static_assert(offsetof(UGCTagsPropertyWidget_InitializeEraItem, OutParams) == 0x000008, "Member 'UGCTagsPropertyWidget_InitializeEraItem::OutParams' has a wrong offset!");

// Function BrickRigs.UGCTagsPropertyWidget.InitializeTypeItem
// 0x0148 (0x0148 - 0x0000)
struct UGCTagsPropertyWidget_InitializeTypeItem final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrickComboBoxItemParams               OutParams;                                         // 0x0008(0x0140)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCTagsPropertyWidget_InitializeTypeItem) == 0x000008, "Wrong alignment on UGCTagsPropertyWidget_InitializeTypeItem");
static_assert(sizeof(UGCTagsPropertyWidget_InitializeTypeItem) == 0x000148, "Wrong size on UGCTagsPropertyWidget_InitializeTypeItem");
static_assert(offsetof(UGCTagsPropertyWidget_InitializeTypeItem, Item) == 0x000000, "Member 'UGCTagsPropertyWidget_InitializeTypeItem::Item' has a wrong offset!");
static_assert(offsetof(UGCTagsPropertyWidget_InitializeTypeItem, OutParams) == 0x000008, "Member 'UGCTagsPropertyWidget_InitializeTypeItem::OutParams' has a wrong offset!");

// Function BrickRigs.UGCTagsPropertyWidget.OnDepartmentItemSelected
// 0x0008 (0x0008 - 0x0000)
struct UGCTagsPropertyWidget_OnDepartmentItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCTagsPropertyWidget_OnDepartmentItemSelected) == 0x000004, "Wrong alignment on UGCTagsPropertyWidget_OnDepartmentItemSelected");
static_assert(sizeof(UGCTagsPropertyWidget_OnDepartmentItemSelected) == 0x000008, "Wrong size on UGCTagsPropertyWidget_OnDepartmentItemSelected");
static_assert(offsetof(UGCTagsPropertyWidget_OnDepartmentItemSelected, Item) == 0x000000, "Member 'UGCTagsPropertyWidget_OnDepartmentItemSelected::Item' has a wrong offset!");
static_assert(offsetof(UGCTagsPropertyWidget_OnDepartmentItemSelected, EventType) == 0x000004, "Member 'UGCTagsPropertyWidget_OnDepartmentItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.UGCTagsPropertyWidget.OnEraItemSelected
// 0x0008 (0x0008 - 0x0000)
struct UGCTagsPropertyWidget_OnEraItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCTagsPropertyWidget_OnEraItemSelected) == 0x000004, "Wrong alignment on UGCTagsPropertyWidget_OnEraItemSelected");
static_assert(sizeof(UGCTagsPropertyWidget_OnEraItemSelected) == 0x000008, "Wrong size on UGCTagsPropertyWidget_OnEraItemSelected");
static_assert(offsetof(UGCTagsPropertyWidget_OnEraItemSelected, Item) == 0x000000, "Member 'UGCTagsPropertyWidget_OnEraItemSelected::Item' has a wrong offset!");
static_assert(offsetof(UGCTagsPropertyWidget_OnEraItemSelected, EventType) == 0x000004, "Member 'UGCTagsPropertyWidget_OnEraItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.UGCTagsPropertyWidget.OnTypeItemSelected
// 0x0008 (0x0008 - 0x0000)
struct UGCTagsPropertyWidget_OnTypeItemSelected final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCTagsPropertyWidget_OnTypeItemSelected) == 0x000004, "Wrong alignment on UGCTagsPropertyWidget_OnTypeItemSelected");
static_assert(sizeof(UGCTagsPropertyWidget_OnTypeItemSelected) == 0x000008, "Wrong size on UGCTagsPropertyWidget_OnTypeItemSelected");
static_assert(offsetof(UGCTagsPropertyWidget_OnTypeItemSelected, Item) == 0x000000, "Member 'UGCTagsPropertyWidget_OnTypeItemSelected::Item' has a wrong offset!");
static_assert(offsetof(UGCTagsPropertyWidget_OnTypeItemSelected, EventType) == 0x000004, "Member 'UGCTagsPropertyWidget_OnTypeItemSelected::EventType' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.AddOrRemoveSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_AddOrRemoveSelectedItem final
{
public:
	bool                                          bAdd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_AddOrRemoveSelectedItem) == 0x000001, "Wrong alignment on UGCBrowserWidget_AddOrRemoveSelectedItem");
static_assert(sizeof(UGCBrowserWidget_AddOrRemoveSelectedItem) == 0x000001, "Wrong size on UGCBrowserWidget_AddOrRemoveSelectedItem");
static_assert(offsetof(UGCBrowserWidget_AddOrRemoveSelectedItem, bAdd) == 0x000000, "Member 'UGCBrowserWidget_AddOrRemoveSelectedItem::bAdd' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.CreateAddOrRemoveItemButton
// 0x0002 (0x0002 - 0x0000)
struct UGCBrowserWidget_CreateAddOrRemoveItemButton final
{
public:
	bool                                          bIsArrayProperty;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_CreateAddOrRemoveItemButton) == 0x000001, "Wrong alignment on UGCBrowserWidget_CreateAddOrRemoveItemButton");
static_assert(sizeof(UGCBrowserWidget_CreateAddOrRemoveItemButton) == 0x000002, "Wrong size on UGCBrowserWidget_CreateAddOrRemoveItemButton");
static_assert(offsetof(UGCBrowserWidget_CreateAddOrRemoveItemButton, bIsArrayProperty) == 0x000000, "Member 'UGCBrowserWidget_CreateAddOrRemoveItemButton::bIsArrayProperty' has a wrong offset!");
static_assert(offsetof(UGCBrowserWidget_CreateAddOrRemoveItemButton, bIsSelected) == 0x000001, "Member 'UGCBrowserWidget_CreateAddOrRemoveItemButton::bIsSelected' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.CreateClearItemsButton
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_CreateClearItemsButton final
{
public:
	bool                                          bIsArrayProperty;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_CreateClearItemsButton) == 0x000001, "Wrong alignment on UGCBrowserWidget_CreateClearItemsButton");
static_assert(sizeof(UGCBrowserWidget_CreateClearItemsButton) == 0x000001, "Wrong size on UGCBrowserWidget_CreateClearItemsButton");
static_assert(offsetof(UGCBrowserWidget_CreateClearItemsButton, bIsArrayProperty) == 0x000000, "Member 'UGCBrowserWidget_CreateClearItemsButton::bIsArrayProperty' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.CreateSpawnButton
// 0x0020 (0x0020 - 0x0000)
struct UGCBrowserWidget_CreateSpawnButton final
{
public:
	bool                                          bCanReplaceCurrent;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSpawn;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SpawnFailureText;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_CreateSpawnButton) == 0x000008, "Wrong alignment on UGCBrowserWidget_CreateSpawnButton");
static_assert(sizeof(UGCBrowserWidget_CreateSpawnButton) == 0x000020, "Wrong size on UGCBrowserWidget_CreateSpawnButton");
static_assert(offsetof(UGCBrowserWidget_CreateSpawnButton, bCanReplaceCurrent) == 0x000000, "Member 'UGCBrowserWidget_CreateSpawnButton::bCanReplaceCurrent' has a wrong offset!");
static_assert(offsetof(UGCBrowserWidget_CreateSpawnButton, bCanSpawn) == 0x000001, "Member 'UGCBrowserWidget_CreateSpawnButton::bCanSpawn' has a wrong offset!");
static_assert(offsetof(UGCBrowserWidget_CreateSpawnButton, SpawnFailureText) == 0x000008, "Member 'UGCBrowserWidget_CreateSpawnButton::SpawnFailureText' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.CreateSpawnInvincibilityButton
// 0x0018 (0x0018 - 0x0000)
struct UGCBrowserWidget_CreateSpawnInvincibilityButton final
{
public:
	class FText                                   CurrentInvincibilityText;                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_CreateSpawnInvincibilityButton) == 0x000008, "Wrong alignment on UGCBrowserWidget_CreateSpawnInvincibilityButton");
static_assert(sizeof(UGCBrowserWidget_CreateSpawnInvincibilityButton) == 0x000018, "Wrong size on UGCBrowserWidget_CreateSpawnInvincibilityButton");
static_assert(offsetof(UGCBrowserWidget_CreateSpawnInvincibilityButton, CurrentInvincibilityText) == 0x000000, "Member 'UGCBrowserWidget_CreateSpawnInvincibilityButton::CurrentInvincibilityText' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.CreateSubscribeButton
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_CreateSubscribeButton final
{
public:
	bool                                          bIsSubscribed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_CreateSubscribeButton) == 0x000001, "Wrong alignment on UGCBrowserWidget_CreateSubscribeButton");
static_assert(sizeof(UGCBrowserWidget_CreateSubscribeButton) == 0x000001, "Wrong size on UGCBrowserWidget_CreateSubscribeButton");
static_assert(offsetof(UGCBrowserWidget_CreateSubscribeButton, bIsSubscribed) == 0x000000, "Member 'UGCBrowserWidget_CreateSubscribeButton::bIsSubscribed' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.CreateVoteButtons
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_CreateVoteButtons final
{
public:
	EFluUGCItemVote                               Vote;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_CreateVoteButtons) == 0x000001, "Wrong alignment on UGCBrowserWidget_CreateVoteButtons");
static_assert(sizeof(UGCBrowserWidget_CreateVoteButtons) == 0x000001, "Wrong size on UGCBrowserWidget_CreateVoteButtons");
static_assert(offsetof(UGCBrowserWidget_CreateVoteButtons, Vote) == 0x000000, "Member 'UGCBrowserWidget_CreateVoteButtons::Vote' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.FavoriteSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_FavoriteSelectedItem final
{
public:
	bool                                          bFavorite;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_FavoriteSelectedItem) == 0x000001, "Wrong alignment on UGCBrowserWidget_FavoriteSelectedItem");
static_assert(sizeof(UGCBrowserWidget_FavoriteSelectedItem) == 0x000001, "Wrong size on UGCBrowserWidget_FavoriteSelectedItem");
static_assert(offsetof(UGCBrowserWidget_FavoriteSelectedItem, bFavorite) == 0x000000, "Member 'UGCBrowserWidget_FavoriteSelectedItem::bFavorite' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.OnListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct UGCBrowserWidget_OnListEntrySelected final
{
public:
	class UPagedListEntryWidget*                  Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoubleClick;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UGCBrowserWidget_OnListEntrySelected) == 0x000008, "Wrong alignment on UGCBrowserWidget_OnListEntrySelected");
static_assert(sizeof(UGCBrowserWidget_OnListEntrySelected) == 0x000010, "Wrong size on UGCBrowserWidget_OnListEntrySelected");
static_assert(offsetof(UGCBrowserWidget_OnListEntrySelected, Widget) == 0x000000, "Member 'UGCBrowserWidget_OnListEntrySelected::Widget' has a wrong offset!");
static_assert(offsetof(UGCBrowserWidget_OnListEntrySelected, bDoubleClick) == 0x000008, "Member 'UGCBrowserWidget_OnListEntrySelected::bDoubleClick' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.OnLoadListPage
// 0x0004 (0x0004 - 0x0000)
struct UGCBrowserWidget_OnLoadListPage final
{
public:
	int32                                         NewPage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_OnLoadListPage) == 0x000004, "Wrong alignment on UGCBrowserWidget_OnLoadListPage");
static_assert(sizeof(UGCBrowserWidget_OnLoadListPage) == 0x000004, "Wrong size on UGCBrowserWidget_OnLoadListPage");
static_assert(offsetof(UGCBrowserWidget_OnLoadListPage, NewPage) == 0x000000, "Member 'UGCBrowserWidget_OnLoadListPage::NewPage' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.SaveItem
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_SaveItem final
{
public:
	bool                                          bOverwriteSelected;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_SaveItem) == 0x000001, "Wrong alignment on UGCBrowserWidget_SaveItem");
static_assert(sizeof(UGCBrowserWidget_SaveItem) == 0x000001, "Wrong size on UGCBrowserWidget_SaveItem");
static_assert(offsetof(UGCBrowserWidget_SaveItem, bOverwriteSelected) == 0x000000, "Member 'UGCBrowserWidget_SaveItem::bOverwriteSelected' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.SetSelectedItemVote
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_SetSelectedItemVote final
{
public:
	EFluUGCItemVote                               Vote;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_SetSelectedItemVote) == 0x000001, "Wrong alignment on UGCBrowserWidget_SetSelectedItemVote");
static_assert(sizeof(UGCBrowserWidget_SetSelectedItemVote) == 0x000001, "Wrong size on UGCBrowserWidget_SetSelectedItemVote");
static_assert(offsetof(UGCBrowserWidget_SetSelectedItemVote, Vote) == 0x000000, "Member 'UGCBrowserWidget_SetSelectedItemVote::Vote' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.SpawnSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_SpawnSelectedItem final
{
public:
	bool                                          bReplaceCurrent;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_SpawnSelectedItem) == 0x000001, "Wrong alignment on UGCBrowserWidget_SpawnSelectedItem");
static_assert(sizeof(UGCBrowserWidget_SpawnSelectedItem) == 0x000001, "Wrong size on UGCBrowserWidget_SpawnSelectedItem");
static_assert(offsetof(UGCBrowserWidget_SpawnSelectedItem, bReplaceCurrent) == 0x000000, "Member 'UGCBrowserWidget_SpawnSelectedItem::bReplaceCurrent' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.SubscribeSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_SubscribeSelectedItem final
{
public:
	bool                                          bSubscribe;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_SubscribeSelectedItem) == 0x000001, "Wrong alignment on UGCBrowserWidget_SubscribeSelectedItem");
static_assert(sizeof(UGCBrowserWidget_SubscribeSelectedItem) == 0x000001, "Wrong size on UGCBrowserWidget_SubscribeSelectedItem");
static_assert(offsetof(UGCBrowserWidget_SubscribeSelectedItem, bSubscribe) == 0x000000, "Member 'UGCBrowserWidget_SubscribeSelectedItem::bSubscribe' has a wrong offset!");

// Function BrickRigs.UGCBrowserWidget.UploadItem
// 0x0001 (0x0001 - 0x0000)
struct UGCBrowserWidget_UploadItem final
{
public:
	bool                                          bUpdateSelected;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCBrowserWidget_UploadItem) == 0x000001, "Wrong alignment on UGCBrowserWidget_UploadItem");
static_assert(sizeof(UGCBrowserWidget_UploadItem) == 0x000001, "Wrong size on UGCBrowserWidget_UploadItem");
static_assert(offsetof(UGCBrowserWidget_UploadItem, bUpdateSelected) == 0x000000, "Member 'UGCBrowserWidget_UploadItem::bUpdateSelected' has a wrong offset!");

// Function BrickRigs.MenuWidget.AddMenuPage
// 0x0008 (0x0008 - 0x0000)
struct MenuWidget_AddMenuPage final
{
public:
	class UMenuPageWidget*                        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_AddMenuPage) == 0x000008, "Wrong alignment on MenuWidget_AddMenuPage");
static_assert(sizeof(MenuWidget_AddMenuPage) == 0x000008, "Wrong size on MenuWidget_AddMenuPage");
static_assert(offsetof(MenuWidget_AddMenuPage, Widget) == 0x000000, "Member 'MenuWidget_AddMenuPage::Widget' has a wrong offset!");

// Function BrickRigs.MenuWidget.OnMenuContextChanged
// 0x0008 (0x0008 - 0x0000)
struct MenuWidget_OnMenuContextChanged final
{
public:
	class FName                                   NewContext;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_OnMenuContextChanged) == 0x000004, "Wrong alignment on MenuWidget_OnMenuContextChanged");
static_assert(sizeof(MenuWidget_OnMenuContextChanged) == 0x000008, "Wrong size on MenuWidget_OnMenuContextChanged");
static_assert(offsetof(MenuWidget_OnMenuContextChanged, NewContext) == 0x000000, "Member 'MenuWidget_OnMenuContextChanged::NewContext' has a wrong offset!");

// Function BrickRigs.MenuWidget.OpenMenu
// 0x0008 (0x0008 - 0x0000)
struct MenuWidget_OpenMenu final
{
public:
	class FName                                   InMenu;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_OpenMenu) == 0x000004, "Wrong alignment on MenuWidget_OpenMenu");
static_assert(sizeof(MenuWidget_OpenMenu) == 0x000008, "Wrong size on MenuWidget_OpenMenu");
static_assert(offsetof(MenuWidget_OpenMenu, InMenu) == 0x000000, "Member 'MenuWidget_OpenMenu::InMenu' has a wrong offset!");

// Function BrickRigs.MenuWidget.RemoveMenuPage
// 0x0008 (0x0008 - 0x0000)
struct MenuWidget_RemoveMenuPage final
{
public:
	class UMenuPageWidget*                        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_RemoveMenuPage) == 0x000008, "Wrong alignment on MenuWidget_RemoveMenuPage");
static_assert(sizeof(MenuWidget_RemoveMenuPage) == 0x000008, "Wrong size on MenuWidget_RemoveMenuPage");
static_assert(offsetof(MenuWidget_RemoveMenuPage, Widget) == 0x000000, "Member 'MenuWidget_RemoveMenuPage::Widget' has a wrong offset!");

// Function BrickRigs.MenuWidget.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct MenuWidget_SetTitleText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_SetTitleText) == 0x000008, "Wrong alignment on MenuWidget_SetTitleText");
static_assert(sizeof(MenuWidget_SetTitleText) == 0x000018, "Wrong size on MenuWidget_SetTitleText");
static_assert(offsetof(MenuWidget_SetTitleText, InText) == 0x000000, "Member 'MenuWidget_SetTitleText::InText' has a wrong offset!");

// Function BrickRigs.MenuWidget.ShowMenuPage
// 0x0040 (0x0040 - 0x0000)
struct MenuWidget_ShowMenuPage final
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_ShowMenuPage) == 0x000008, "Wrong alignment on MenuWidget_ShowMenuPage");
static_assert(sizeof(MenuWidget_ShowMenuPage) == 0x000040, "Wrong size on MenuWidget_ShowMenuPage");
static_assert(offsetof(MenuWidget_ShowMenuPage, WidgetClass) == 0x000000, "Member 'MenuWidget_ShowMenuPage::WidgetClass' has a wrong offset!");
static_assert(offsetof(MenuWidget_ShowMenuPage, TitleText) == 0x000028, "Member 'MenuWidget_ShowMenuPage::TitleText' has a wrong offset!");

// Function BrickRigs.MenuWidget.StepBack
// 0x0001 (0x0001 - 0x0000)
struct MenuWidget_StepBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_StepBack) == 0x000001, "Wrong alignment on MenuWidget_StepBack");
static_assert(sizeof(MenuWidget_StepBack) == 0x000001, "Wrong size on MenuWidget_StepBack");
static_assert(offsetof(MenuWidget_StepBack, ReturnValue) == 0x000000, "Member 'MenuWidget_StepBack::ReturnValue' has a wrong offset!");

// Function BrickRigs.MenuWidget.IsMainMenu
// 0x0001 (0x0001 - 0x0000)
struct MenuWidget_IsMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_IsMainMenu) == 0x000001, "Wrong alignment on MenuWidget_IsMainMenu");
static_assert(sizeof(MenuWidget_IsMainMenu) == 0x000001, "Wrong size on MenuWidget_IsMainMenu");
static_assert(offsetof(MenuWidget_IsMainMenu, ReturnValue) == 0x000000, "Member 'MenuWidget_IsMainMenu::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OnCharacterBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct ModHook_OnCharacterBeginPlay final
{
public:
	class ABaseCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OnCharacterBeginPlay) == 0x000008, "Wrong alignment on ModHook_OnCharacterBeginPlay");
static_assert(sizeof(ModHook_OnCharacterBeginPlay) == 0x000008, "Wrong size on ModHook_OnCharacterBeginPlay");
static_assert(offsetof(ModHook_OnCharacterBeginPlay, Character) == 0x000000, "Member 'ModHook_OnCharacterBeginPlay::Character' has a wrong offset!");

// Function BrickRigs.ModHook.OnPlayerControllerBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct ModHook_OnPlayerControllerBeginPlay final
{
public:
	class ABasePlayerController*                  PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OnPlayerControllerBeginPlay) == 0x000008, "Wrong alignment on ModHook_OnPlayerControllerBeginPlay");
static_assert(sizeof(ModHook_OnPlayerControllerBeginPlay) == 0x000008, "Wrong size on ModHook_OnPlayerControllerBeginPlay");
static_assert(offsetof(ModHook_OnPlayerControllerBeginPlay, PC) == 0x000000, "Member 'ModHook_OnPlayerControllerBeginPlay::PC' has a wrong offset!");

// Function BrickRigs.ModHook.OnSpectatorBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct ModHook_OnSpectatorBeginPlay final
{
public:
	class ABrickSpectatorPawn*                    Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OnSpectatorBeginPlay) == 0x000008, "Wrong alignment on ModHook_OnSpectatorBeginPlay");
static_assert(sizeof(ModHook_OnSpectatorBeginPlay) == 0x000008, "Wrong size on ModHook_OnSpectatorBeginPlay");
static_assert(offsetof(ModHook_OnSpectatorBeginPlay, Pawn) == 0x000000, "Member 'ModHook_OnSpectatorBeginPlay::Pawn' has a wrong offset!");

// Function BrickRigs.ModHook.OnVehicleBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct ModHook_OnVehicleBeginPlay final
{
public:
	class ABrickVehicle*                          Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OnVehicleBeginPlay) == 0x000008, "Wrong alignment on ModHook_OnVehicleBeginPlay");
static_assert(sizeof(ModHook_OnVehicleBeginPlay) == 0x000008, "Wrong size on ModHook_OnVehicleBeginPlay");
static_assert(offsetof(ModHook_OnVehicleBeginPlay, Vehicle) == 0x000000, "Member 'ModHook_OnVehicleBeginPlay::Vehicle' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideBillboardTexture
// 0x0058 (0x0058 - 0x0000)
struct ModHook_OverrideBillboardTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABillboard*                             Billboard;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0030(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideBillboardTexture) == 0x000008, "Wrong alignment on ModHook_OverrideBillboardTexture");
static_assert(sizeof(ModHook_OverrideBillboardTexture) == 0x000058, "Wrong size on ModHook_OverrideBillboardTexture");
static_assert(offsetof(ModHook_OverrideBillboardTexture, Texture) == 0x000000, "Member 'ModHook_OverrideBillboardTexture::Texture' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideBillboardTexture, Billboard) == 0x000028, "Member 'ModHook_OverrideBillboardTexture::Billboard' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideBillboardTexture, ReturnValue) == 0x000030, "Member 'ModHook_OverrideBillboardTexture::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideCharacterLoadout
// 0x0028 (0x0028 - 0x0000)
struct ModHook_OverrideCharacterLoadout final
{
public:
	struct FInventoryLoadout                      Loadout;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABaseCharacter*                         Character;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInventoryLoadout                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideCharacterLoadout) == 0x000008, "Wrong alignment on ModHook_OverrideCharacterLoadout");
static_assert(sizeof(ModHook_OverrideCharacterLoadout) == 0x000028, "Wrong size on ModHook_OverrideCharacterLoadout");
static_assert(offsetof(ModHook_OverrideCharacterLoadout, Loadout) == 0x000000, "Member 'ModHook_OverrideCharacterLoadout::Loadout' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideCharacterLoadout, Character) == 0x000010, "Member 'ModHook_OverrideCharacterLoadout::Character' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideCharacterLoadout, ReturnValue) == 0x000018, "Member 'ModHook_OverrideCharacterLoadout::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideGameModeClass
// 0x0040 (0x0040 - 0x0000)
struct ModHook_OverrideGameModeClass final
{
public:
	TSubclassOf<class AGameModeBase>              GameModeClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Portal;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameModeBase>              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideGameModeClass) == 0x000008, "Wrong alignment on ModHook_OverrideGameModeClass");
static_assert(sizeof(ModHook_OverrideGameModeClass) == 0x000040, "Wrong size on ModHook_OverrideGameModeClass");
static_assert(offsetof(ModHook_OverrideGameModeClass, GameModeClass) == 0x000000, "Member 'ModHook_OverrideGameModeClass::GameModeClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideGameModeClass, MapName) == 0x000008, "Member 'ModHook_OverrideGameModeClass::MapName' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideGameModeClass, Options) == 0x000018, "Member 'ModHook_OverrideGameModeClass::Options' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideGameModeClass, Portal) == 0x000028, "Member 'ModHook_OverrideGameModeClass::Portal' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideGameModeClass, ReturnValue) == 0x000038, "Member 'ModHook_OverrideGameModeClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideGameStateClass
// 0x0010 (0x0010 - 0x0000)
struct ModHook_OverrideGameStateClass final
{
public:
	TSubclassOf<class AGameStateBase>             GameStateClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameStateBase>             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideGameStateClass) == 0x000008, "Wrong alignment on ModHook_OverrideGameStateClass");
static_assert(sizeof(ModHook_OverrideGameStateClass) == 0x000010, "Wrong size on ModHook_OverrideGameStateClass");
static_assert(offsetof(ModHook_OverrideGameStateClass, GameStateClass) == 0x000000, "Member 'ModHook_OverrideGameStateClass::GameStateClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideGameStateClass, ReturnValue) == 0x000008, "Member 'ModHook_OverrideGameStateClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideLoadoutContainerItems
// 0x0020 (0x0020 - 0x0000)
struct ModHook_OverrideLoadoutContainerItems final
{
public:
	TArray<TSubclassOf<class AInventoryItem>>     ItemClasses;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AInventoryItem>>     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideLoadoutContainerItems) == 0x000008, "Wrong alignment on ModHook_OverrideLoadoutContainerItems");
static_assert(sizeof(ModHook_OverrideLoadoutContainerItems) == 0x000020, "Wrong size on ModHook_OverrideLoadoutContainerItems");
static_assert(offsetof(ModHook_OverrideLoadoutContainerItems, ItemClasses) == 0x000000, "Member 'ModHook_OverrideLoadoutContainerItems::ItemClasses' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideLoadoutContainerItems, ReturnValue) == 0x000010, "Member 'ModHook_OverrideLoadoutContainerItems::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideLoadSubLevel
// 0x0028 (0x0028 - 0x0000)
struct ModHook_OverrideLoadSubLevel final
{
public:
	bool                                          bLoadLevel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeInfo*                          GameMode;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModHook_OverrideLoadSubLevel) == 0x000008, "Wrong alignment on ModHook_OverrideLoadSubLevel");
static_assert(sizeof(ModHook_OverrideLoadSubLevel) == 0x000028, "Wrong size on ModHook_OverrideLoadSubLevel");
static_assert(offsetof(ModHook_OverrideLoadSubLevel, bLoadLevel) == 0x000000, "Member 'ModHook_OverrideLoadSubLevel::bLoadLevel' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideLoadSubLevel, LevelName) == 0x000008, "Member 'ModHook_OverrideLoadSubLevel::LevelName' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideLoadSubLevel, GameMode) == 0x000018, "Member 'ModHook_OverrideLoadSubLevel::GameMode' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideLoadSubLevel, ReturnValue) == 0x000020, "Member 'ModHook_OverrideLoadSubLevel::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideMenu
// 0x0018 (0x0018 - 0x0000)
struct ModHook_OverrideMenu final
{
public:
	class UMenuWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Context;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModHook_OverrideMenu) == 0x000008, "Wrong alignment on ModHook_OverrideMenu");
static_assert(sizeof(ModHook_OverrideMenu) == 0x000018, "Wrong size on ModHook_OverrideMenu");
static_assert(offsetof(ModHook_OverrideMenu, Widget) == 0x000000, "Member 'ModHook_OverrideMenu::Widget' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideMenu, Context) == 0x000008, "Member 'ModHook_OverrideMenu::Context' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideMenu, ReturnValue) == 0x000010, "Member 'ModHook_OverrideMenu::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideMenuSequence
// 0x0050 (0x0050 - 0x0000)
struct ModHook_OverrideMenuSequence final
{
public:
	TSoftClassPtr<class UClass>                   SequenceClass;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideMenuSequence) == 0x000008, "Wrong alignment on ModHook_OverrideMenuSequence");
static_assert(sizeof(ModHook_OverrideMenuSequence) == 0x000050, "Wrong size on ModHook_OverrideMenuSequence");
static_assert(offsetof(ModHook_OverrideMenuSequence, SequenceClass) == 0x000000, "Member 'ModHook_OverrideMenuSequence::SequenceClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideMenuSequence, ReturnValue) == 0x000028, "Member 'ModHook_OverrideMenuSequence::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideMenuWorldSetupParams
// 0x0060 (0x0060 - 0x0000)
struct ModHook_OverrideMenuWorldSetupParams final
{
public:
	struct FWorldSetupParams                      Params_0;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FWorldSetupParams                      ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideMenuWorldSetupParams) == 0x000008, "Wrong alignment on ModHook_OverrideMenuWorldSetupParams");
static_assert(sizeof(ModHook_OverrideMenuWorldSetupParams) == 0x000060, "Wrong size on ModHook_OverrideMenuWorldSetupParams");
static_assert(offsetof(ModHook_OverrideMenuWorldSetupParams, Params_0) == 0x000000, "Member 'ModHook_OverrideMenuWorldSetupParams::Params_0' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideMenuWorldSetupParams, ReturnValue) == 0x000030, "Member 'ModHook_OverrideMenuWorldSetupParams::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverridePawnClass
// 0x0018 (0x0018 - 0x0000)
struct ModHook_OverridePawnClass final
{
public:
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverridePawnClass) == 0x000008, "Wrong alignment on ModHook_OverridePawnClass");
static_assert(sizeof(ModHook_OverridePawnClass) == 0x000018, "Wrong size on ModHook_OverridePawnClass");
static_assert(offsetof(ModHook_OverridePawnClass, PawnClass) == 0x000000, "Member 'ModHook_OverridePawnClass::PawnClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverridePawnClass, Controller) == 0x000008, "Member 'ModHook_OverridePawnClass::Controller' has a wrong offset!");
static_assert(offsetof(ModHook_OverridePawnClass, ReturnValue) == 0x000010, "Member 'ModHook_OverridePawnClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverridePlayerCameraManagerClass
// 0x0018 (0x0018 - 0x0000)
struct ModHook_OverridePlayerCameraManagerClass final
{
public:
	TSubclassOf<class APlayerCameraManager>       PlayerCameraManagerClass;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABasePlayerController*                  PC;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerCameraManager>       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverridePlayerCameraManagerClass) == 0x000008, "Wrong alignment on ModHook_OverridePlayerCameraManagerClass");
static_assert(sizeof(ModHook_OverridePlayerCameraManagerClass) == 0x000018, "Wrong size on ModHook_OverridePlayerCameraManagerClass");
static_assert(offsetof(ModHook_OverridePlayerCameraManagerClass, PlayerCameraManagerClass) == 0x000000, "Member 'ModHook_OverridePlayerCameraManagerClass::PlayerCameraManagerClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverridePlayerCameraManagerClass, PC) == 0x000008, "Member 'ModHook_OverridePlayerCameraManagerClass::PC' has a wrong offset!");
static_assert(offsetof(ModHook_OverridePlayerCameraManagerClass, ReturnValue) == 0x000010, "Member 'ModHook_OverridePlayerCameraManagerClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverridePlayerControllerClass
// 0x0010 (0x0010 - 0x0000)
struct ModHook_OverridePlayerControllerClass final
{
public:
	TSubclassOf<class APlayerController>          PlayerControllerClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverridePlayerControllerClass) == 0x000008, "Wrong alignment on ModHook_OverridePlayerControllerClass");
static_assert(sizeof(ModHook_OverridePlayerControllerClass) == 0x000010, "Wrong size on ModHook_OverridePlayerControllerClass");
static_assert(offsetof(ModHook_OverridePlayerControllerClass, PlayerControllerClass) == 0x000000, "Member 'ModHook_OverridePlayerControllerClass::PlayerControllerClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverridePlayerControllerClass, ReturnValue) == 0x000008, "Member 'ModHook_OverridePlayerControllerClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideReplayPlayerControllerClass
// 0x0010 (0x0010 - 0x0000)
struct ModHook_OverrideReplayPlayerControllerClass final
{
public:
	TSubclassOf<class APlayerController>          PlayerControllerClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideReplayPlayerControllerClass) == 0x000008, "Wrong alignment on ModHook_OverrideReplayPlayerControllerClass");
static_assert(sizeof(ModHook_OverrideReplayPlayerControllerClass) == 0x000010, "Wrong size on ModHook_OverrideReplayPlayerControllerClass");
static_assert(offsetof(ModHook_OverrideReplayPlayerControllerClass, PlayerControllerClass) == 0x000000, "Member 'ModHook_OverrideReplayPlayerControllerClass::PlayerControllerClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideReplayPlayerControllerClass, ReturnValue) == 0x000008, "Member 'ModHook_OverrideReplayPlayerControllerClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideSpectatorClass
// 0x0010 (0x0010 - 0x0000)
struct ModHook_OverrideSpectatorClass final
{
public:
	TSubclassOf<class ASpectatorPawn>             SpectatorClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideSpectatorClass) == 0x000008, "Wrong alignment on ModHook_OverrideSpectatorClass");
static_assert(sizeof(ModHook_OverrideSpectatorClass) == 0x000010, "Wrong size on ModHook_OverrideSpectatorClass");
static_assert(offsetof(ModHook_OverrideSpectatorClass, SpectatorClass) == 0x000000, "Member 'ModHook_OverrideSpectatorClass::SpectatorClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideSpectatorClass, ReturnValue) == 0x000008, "Member 'ModHook_OverrideSpectatorClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideTrainClass
// 0x0010 (0x0010 - 0x0000)
struct ModHook_OverrideTrainClass final
{
public:
	TSubclassOf<class ATrain>                     TrainClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATrain>                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideTrainClass) == 0x000008, "Wrong alignment on ModHook_OverrideTrainClass");
static_assert(sizeof(ModHook_OverrideTrainClass) == 0x000010, "Wrong size on ModHook_OverrideTrainClass");
static_assert(offsetof(ModHook_OverrideTrainClass, TrainClass) == 0x000000, "Member 'ModHook_OverrideTrainClass::TrainClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideTrainClass, ReturnValue) == 0x000008, "Member 'ModHook_OverrideTrainClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.OverrideVehicleClass
// 0x0130 (0x0130 - 0x0000)
struct ModHook_OverrideVehicleClass final
{
public:
	TSubclassOf<class ABrickVehicle>              VehicleClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABrickPlayerController*                 PC;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerSpawnRequest                    SpawnRequest;                                      // 0x0010(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class ABrickVehicle>              ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_OverrideVehicleClass) == 0x000008, "Wrong alignment on ModHook_OverrideVehicleClass");
static_assert(sizeof(ModHook_OverrideVehicleClass) == 0x000130, "Wrong size on ModHook_OverrideVehicleClass");
static_assert(offsetof(ModHook_OverrideVehicleClass, VehicleClass) == 0x000000, "Member 'ModHook_OverrideVehicleClass::VehicleClass' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideVehicleClass, PC) == 0x000008, "Member 'ModHook_OverrideVehicleClass::PC' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideVehicleClass, SpawnRequest) == 0x000010, "Member 'ModHook_OverrideVehicleClass::SpawnRequest' has a wrong offset!");
static_assert(offsetof(ModHook_OverrideVehicleClass, ReturnValue) == 0x000128, "Member 'ModHook_OverrideVehicleClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.ModHook.PostSpawnPawn
// 0x0008 (0x0008 - 0x0000)
struct ModHook_PostSpawnPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_PostSpawnPawn) == 0x000008, "Wrong alignment on ModHook_PostSpawnPawn");
static_assert(sizeof(ModHook_PostSpawnPawn) == 0x000008, "Wrong size on ModHook_PostSpawnPawn");
static_assert(offsetof(ModHook_PostSpawnPawn, Pawn) == 0x000000, "Member 'ModHook_PostSpawnPawn::Pawn' has a wrong offset!");

// Function BrickRigs.ModHook.PostSpawnPlayerController
// 0x0008 (0x0008 - 0x0000)
struct ModHook_PostSpawnPlayerController final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_PostSpawnPlayerController) == 0x000008, "Wrong alignment on ModHook_PostSpawnPlayerController");
static_assert(sizeof(ModHook_PostSpawnPlayerController) == 0x000008, "Wrong size on ModHook_PostSpawnPlayerController");
static_assert(offsetof(ModHook_PostSpawnPlayerController, PC) == 0x000000, "Member 'ModHook_PostSpawnPlayerController::PC' has a wrong offset!");

// Function BrickRigs.ModHook.PostSpawnSpectatorPawn
// 0x0008 (0x0008 - 0x0000)
struct ModHook_PostSpawnSpectatorPawn final
{
public:
	class ASpectatorPawn*                         Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_PostSpawnSpectatorPawn) == 0x000008, "Wrong alignment on ModHook_PostSpawnSpectatorPawn");
static_assert(sizeof(ModHook_PostSpawnSpectatorPawn) == 0x000008, "Wrong size on ModHook_PostSpawnSpectatorPawn");
static_assert(offsetof(ModHook_PostSpawnSpectatorPawn, Pawn) == 0x000000, "Member 'ModHook_PostSpawnSpectatorPawn::Pawn' has a wrong offset!");

// Function BrickRigs.ModHook.PostSpawnVehicle
// 0x0008 (0x0008 - 0x0000)
struct ModHook_PostSpawnVehicle final
{
public:
	class ABrickVehicle*                          Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHook_PostSpawnVehicle) == 0x000008, "Wrong alignment on ModHook_PostSpawnVehicle");
static_assert(sizeof(ModHook_PostSpawnVehicle) == 0x000008, "Wrong size on ModHook_PostSpawnVehicle");
static_assert(offsetof(ModHook_PostSpawnVehicle, Vehicle) == 0x000000, "Member 'ModHook_PostSpawnVehicle::Vehicle' has a wrong offset!");

// Function BrickRigs.ModHookSubsystem.GetModHookByClass
// 0x0018 (0x0018 - 0x0000)
struct ModHookSubsystem_GetModHookByClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UModHook>                   ModHookClass;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModHook*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModHookSubsystem_GetModHookByClass) == 0x000008, "Wrong alignment on ModHookSubsystem_GetModHookByClass");
static_assert(sizeof(ModHookSubsystem_GetModHookByClass) == 0x000018, "Wrong size on ModHookSubsystem_GetModHookByClass");
static_assert(offsetof(ModHookSubsystem_GetModHookByClass, WorldContextObject) == 0x000000, "Member 'ModHookSubsystem_GetModHookByClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModHookSubsystem_GetModHookByClass, ModHookClass) == 0x000008, "Member 'ModHookSubsystem_GetModHookByClass::ModHookClass' has a wrong offset!");
static_assert(offsetof(ModHookSubsystem_GetModHookByClass, ReturnValue) == 0x000010, "Member 'ModHookSubsystem_GetModHookByClass::ReturnValue' has a wrong offset!");

// Function BrickRigs.UGCItemWidget.UpdateItemWidget
// 0x0004 (0x0004 - 0x0000)
struct UGCItemWidget_UpdateItemWidget final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsLegacyFile;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHasAutoSave;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDedicatedAutoSave;                            // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCItemWidget_UpdateItemWidget) == 0x000001, "Wrong alignment on UGCItemWidget_UpdateItemWidget");
static_assert(sizeof(UGCItemWidget_UpdateItemWidget) == 0x000004, "Wrong size on UGCItemWidget_UpdateItemWidget");
static_assert(offsetof(UGCItemWidget_UpdateItemWidget, bInIsSelected) == 0x000000, "Member 'UGCItemWidget_UpdateItemWidget::bInIsSelected' has a wrong offset!");
static_assert(offsetof(UGCItemWidget_UpdateItemWidget, bInIsLegacyFile) == 0x000001, "Member 'UGCItemWidget_UpdateItemWidget::bInIsLegacyFile' has a wrong offset!");
static_assert(offsetof(UGCItemWidget_UpdateItemWidget, bInHasAutoSave) == 0x000002, "Member 'UGCItemWidget_UpdateItemWidget::bInHasAutoSave' has a wrong offset!");
static_assert(offsetof(UGCItemWidget_UpdateItemWidget, bInIsDedicatedAutoSave) == 0x000003, "Member 'UGCItemWidget_UpdateItemWidget::bInIsDedicatedAutoSave' has a wrong offset!");

// Function BrickRigs.NewItemCountWidget.SetNumNewItems
// 0x0004 (0x0004 - 0x0000)
struct NewItemCountWidget_SetNumNewItems final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewItemCountWidget_SetNumNewItems) == 0x000004, "Wrong alignment on NewItemCountWidget_SetNumNewItems");
static_assert(sizeof(NewItemCountWidget_SetNumNewItems) == 0x000004, "Wrong size on NewItemCountWidget_SetNumNewItems");
static_assert(offsetof(NewItemCountWidget_SetNumNewItems, NewNum) == 0x000000, "Member 'NewItemCountWidget_SetNumNewItems::NewNum' has a wrong offset!");

// Function BrickRigs.NewItemCountWidget.UpdateNumItems
// 0x0004 (0x0004 - 0x0000)
struct NewItemCountWidget_UpdateNumItems final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewItemCountWidget_UpdateNumItems) == 0x000004, "Wrong alignment on NewItemCountWidget_UpdateNumItems");
static_assert(sizeof(NewItemCountWidget_UpdateNumItems) == 0x000004, "Wrong size on NewItemCountWidget_UpdateNumItems");
static_assert(offsetof(NewItemCountWidget_UpdateNumItems, NewNum) == 0x000000, "Member 'NewItemCountWidget_UpdateNumItems::NewNum' has a wrong offset!");

// Function BrickRigs.PagedListHeaderWidget.OnMeasurementSystemChanged
// 0x0001 (0x0001 - 0x0000)
struct PagedListHeaderWidget_OnMeasurementSystemChanged final
{
public:
	EMeasurementSystem                            NewSystem;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListHeaderWidget_OnMeasurementSystemChanged) == 0x000001, "Wrong alignment on PagedListHeaderWidget_OnMeasurementSystemChanged");
static_assert(sizeof(PagedListHeaderWidget_OnMeasurementSystemChanged) == 0x000001, "Wrong size on PagedListHeaderWidget_OnMeasurementSystemChanged");
static_assert(offsetof(PagedListHeaderWidget_OnMeasurementSystemChanged, NewSystem) == 0x000000, "Member 'PagedListHeaderWidget_OnMeasurementSystemChanged::NewSystem' has a wrong offset!");

// Function BrickRigs.PagedListHeaderWidget.UpdateDimensions
// 0x0018 (0x0018 - 0x0000)
struct PagedListHeaderWidget_UpdateDimensions final
{
public:
	struct FVector                                InDimensions;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InMaxDimensions;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListHeaderWidget_UpdateDimensions) == 0x000004, "Wrong alignment on PagedListHeaderWidget_UpdateDimensions");
static_assert(sizeof(PagedListHeaderWidget_UpdateDimensions) == 0x000018, "Wrong size on PagedListHeaderWidget_UpdateDimensions");
static_assert(offsetof(PagedListHeaderWidget_UpdateDimensions, InDimensions) == 0x000000, "Member 'PagedListHeaderWidget_UpdateDimensions::InDimensions' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateDimensions, InMaxDimensions) == 0x00000C, "Member 'PagedListHeaderWidget_UpdateDimensions::InMaxDimensions' has a wrong offset!");

// Function BrickRigs.PagedListHeaderWidget.UpdateEntry
// 0x0020 (0x0020 - 0x0000)
struct PagedListHeaderWidget_UpdateEntry final
{
public:
	class FText                                   InTitleText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInHasEntry;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHasUnsavedChanges;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PagedListHeaderWidget_UpdateEntry) == 0x000008, "Wrong alignment on PagedListHeaderWidget_UpdateEntry");
static_assert(sizeof(PagedListHeaderWidget_UpdateEntry) == 0x000020, "Wrong size on PagedListHeaderWidget_UpdateEntry");
static_assert(offsetof(PagedListHeaderWidget_UpdateEntry, InTitleText) == 0x000000, "Member 'PagedListHeaderWidget_UpdateEntry::InTitleText' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateEntry, bInHasEntry) == 0x000018, "Member 'PagedListHeaderWidget_UpdateEntry::bInHasEntry' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateEntry, bInHasUnsavedChanges) == 0x000019, "Member 'PagedListHeaderWidget_UpdateEntry::bInHasUnsavedChanges' has a wrong offset!");

// Function BrickRigs.PagedListHeaderWidget.UpdateMass
// 0x0008 (0x0008 - 0x0000)
struct PagedListHeaderWidget_UpdateMass final
{
public:
	float                                         InMass;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxMass;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListHeaderWidget_UpdateMass) == 0x000004, "Wrong alignment on PagedListHeaderWidget_UpdateMass");
static_assert(sizeof(PagedListHeaderWidget_UpdateMass) == 0x000008, "Wrong size on PagedListHeaderWidget_UpdateMass");
static_assert(offsetof(PagedListHeaderWidget_UpdateMass, InMass) == 0x000000, "Member 'PagedListHeaderWidget_UpdateMass::InMass' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateMass, InMaxMass) == 0x000004, "Member 'PagedListHeaderWidget_UpdateMass::InMaxMass' has a wrong offset!");

// Function BrickRigs.PagedListHeaderWidget.UpdateNumObjects
// 0x0010 (0x0010 - 0x0000)
struct PagedListHeaderWidget_UpdateNumObjects final
{
public:
	int32                                         InNumObjects;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxNumObjects;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumHiddenObjects;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumObjectsWithAerodynamics;                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListHeaderWidget_UpdateNumObjects) == 0x000004, "Wrong alignment on PagedListHeaderWidget_UpdateNumObjects");
static_assert(sizeof(PagedListHeaderWidget_UpdateNumObjects) == 0x000010, "Wrong size on PagedListHeaderWidget_UpdateNumObjects");
static_assert(offsetof(PagedListHeaderWidget_UpdateNumObjects, InNumObjects) == 0x000000, "Member 'PagedListHeaderWidget_UpdateNumObjects::InNumObjects' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateNumObjects, InMaxNumObjects) == 0x000004, "Member 'PagedListHeaderWidget_UpdateNumObjects::InMaxNumObjects' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateNumObjects, InNumHiddenObjects) == 0x000008, "Member 'PagedListHeaderWidget_UpdateNumObjects::InNumHiddenObjects' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdateNumObjects, InNumObjectsWithAerodynamics) == 0x00000C, "Member 'PagedListHeaderWidget_UpdateNumObjects::InNumObjectsWithAerodynamics' has a wrong offset!");

// Function BrickRigs.PagedListHeaderWidget.UpdatePrice
// 0x0008 (0x0008 - 0x0000)
struct PagedListHeaderWidget_UpdatePrice final
{
public:
	float                                         InPrice;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoney;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListHeaderWidget_UpdatePrice) == 0x000004, "Wrong alignment on PagedListHeaderWidget_UpdatePrice");
static_assert(sizeof(PagedListHeaderWidget_UpdatePrice) == 0x000008, "Wrong size on PagedListHeaderWidget_UpdatePrice");
static_assert(offsetof(PagedListHeaderWidget_UpdatePrice, InPrice) == 0x000000, "Member 'PagedListHeaderWidget_UpdatePrice::InPrice' has a wrong offset!");
static_assert(offsetof(PagedListHeaderWidget_UpdatePrice, InMoney) == 0x000004, "Member 'PagedListHeaderWidget_UpdatePrice::InMoney' has a wrong offset!");

// Function BrickRigs.VehicleResourceSubsystem.Get
// 0x0010 (0x0010 - 0x0000)
struct VehicleResourceSubsystem_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleResourceSubsystem*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleResourceSubsystem_Get) == 0x000008, "Wrong alignment on VehicleResourceSubsystem_Get");
static_assert(sizeof(VehicleResourceSubsystem_Get) == 0x000010, "Wrong size on VehicleResourceSubsystem_Get");
static_assert(offsetof(VehicleResourceSubsystem_Get, WorldContextObject) == 0x000000, "Member 'VehicleResourceSubsystem_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleResourceSubsystem_Get, ReturnValue) == 0x000008, "Member 'VehicleResourceSubsystem_Get::ReturnValue' has a wrong offset!");

// Function BrickRigs.PagedListWidget.ClearSelectedEntryWidget
// 0x0001 (0x0001 - 0x0000)
struct PagedListWidget_ClearSelectedEntryWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_ClearSelectedEntryWidget) == 0x000001, "Wrong alignment on PagedListWidget_ClearSelectedEntryWidget");
static_assert(sizeof(PagedListWidget_ClearSelectedEntryWidget) == 0x000001, "Wrong size on PagedListWidget_ClearSelectedEntryWidget");
static_assert(offsetof(PagedListWidget_ClearSelectedEntryWidget, ReturnValue) == 0x000000, "Member 'PagedListWidget_ClearSelectedEntryWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.PagedListWidget.InitializePropertiesPanel
// 0x0008 (0x0008 - 0x0000)
struct PagedListWidget_InitializePropertiesPanel final
{
public:
	class UObject*                                Container;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_InitializePropertiesPanel) == 0x000008, "Wrong alignment on PagedListWidget_InitializePropertiesPanel");
static_assert(sizeof(PagedListWidget_InitializePropertiesPanel) == 0x000008, "Wrong size on PagedListWidget_InitializePropertiesPanel");
static_assert(offsetof(PagedListWidget_InitializePropertiesPanel, Container) == 0x000000, "Member 'PagedListWidget_InitializePropertiesPanel::Container' has a wrong offset!");

// Function BrickRigs.PagedListWidget.OnEntriesLoaded
// 0x0008 (0x0008 - 0x0000)
struct PagedListWidget_OnEntriesLoaded final
{
public:
	int32                                         InTotalNumEntries;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxPages;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_OnEntriesLoaded) == 0x000004, "Wrong alignment on PagedListWidget_OnEntriesLoaded");
static_assert(sizeof(PagedListWidget_OnEntriesLoaded) == 0x000008, "Wrong size on PagedListWidget_OnEntriesLoaded");
static_assert(offsetof(PagedListWidget_OnEntriesLoaded, InTotalNumEntries) == 0x000000, "Member 'PagedListWidget_OnEntriesLoaded::InTotalNumEntries' has a wrong offset!");
static_assert(offsetof(PagedListWidget_OnEntriesLoaded, InMaxPages) == 0x000004, "Member 'PagedListWidget_OnEntriesLoaded::InMaxPages' has a wrong offset!");

// Function BrickRigs.PagedListWidget.OnPageChanged
// 0x0004 (0x0004 - 0x0000)
struct PagedListWidget_OnPageChanged final
{
public:
	int32                                         NewPage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_OnPageChanged) == 0x000004, "Wrong alignment on PagedListWidget_OnPageChanged");
static_assert(sizeof(PagedListWidget_OnPageChanged) == 0x000004, "Wrong size on PagedListWidget_OnPageChanged");
static_assert(offsetof(PagedListWidget_OnPageChanged, NewPage) == 0x000000, "Member 'PagedListWidget_OnPageChanged::NewPage' has a wrong offset!");

// Function BrickRigs.PagedListWidget.SetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct PagedListWidget_SetCurrentPage final
{
public:
	int32                                         InPage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_SetCurrentPage) == 0x000004, "Wrong alignment on PagedListWidget_SetCurrentPage");
static_assert(sizeof(PagedListWidget_SetCurrentPage) == 0x000004, "Wrong size on PagedListWidget_SetCurrentPage");
static_assert(offsetof(PagedListWidget_SetCurrentPage, InPage) == 0x000000, "Member 'PagedListWidget_SetCurrentPage::InPage' has a wrong offset!");

// Function BrickRigs.PagedListWidget.UpdateIsEntrySelected
// 0x0001 (0x0001 - 0x0000)
struct PagedListWidget_UpdateIsEntrySelected final
{
public:
	bool                                          bIsEntrySelected;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_UpdateIsEntrySelected) == 0x000001, "Wrong alignment on PagedListWidget_UpdateIsEntrySelected");
static_assert(sizeof(PagedListWidget_UpdateIsEntrySelected) == 0x000001, "Wrong size on PagedListWidget_UpdateIsEntrySelected");
static_assert(offsetof(PagedListWidget_UpdateIsEntrySelected, bIsEntrySelected) == 0x000000, "Member 'PagedListWidget_UpdateIsEntrySelected::bIsEntrySelected' has a wrong offset!");

// Function BrickRigs.PagedListWidget.UpdateIsLoading
// 0x0001 (0x0001 - 0x0000)
struct PagedListWidget_UpdateIsLoading final
{
public:
	bool                                          bNewLoading;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_UpdateIsLoading) == 0x000001, "Wrong alignment on PagedListWidget_UpdateIsLoading");
static_assert(sizeof(PagedListWidget_UpdateIsLoading) == 0x000001, "Wrong size on PagedListWidget_UpdateIsLoading");
static_assert(offsetof(PagedListWidget_UpdateIsLoading, bNewLoading) == 0x000000, "Member 'PagedListWidget_UpdateIsLoading::bNewLoading' has a wrong offset!");

// Function BrickRigs.PagedListWidget.GetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct PagedListWidget_GetCurrentPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_GetCurrentPage) == 0x000004, "Wrong alignment on PagedListWidget_GetCurrentPage");
static_assert(sizeof(PagedListWidget_GetCurrentPage) == 0x000004, "Wrong size on PagedListWidget_GetCurrentPage");
static_assert(offsetof(PagedListWidget_GetCurrentPage, ReturnValue) == 0x000000, "Member 'PagedListWidget_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function BrickRigs.PagedListWidget.GetSelectedEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct PagedListWidget_GetSelectedEntryWidget final
{
public:
	class UPagedListEntryWidget*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PagedListWidget_GetSelectedEntryWidget) == 0x000008, "Wrong alignment on PagedListWidget_GetSelectedEntryWidget");
static_assert(sizeof(PagedListWidget_GetSelectedEntryWidget) == 0x000008, "Wrong size on PagedListWidget_GetSelectedEntryWidget");
static_assert(offsetof(PagedListWidget_GetSelectedEntryWidget, ReturnValue) == 0x000000, "Member 'PagedListWidget_GetSelectedEntryWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.PageSelectorWidget.GotoNextPage
// 0x0002 (0x0002 - 0x0000)
struct PageSelectorWidget_GotoNextPage final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipToEnd;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageSelectorWidget_GotoNextPage) == 0x000001, "Wrong alignment on PageSelectorWidget_GotoNextPage");
static_assert(sizeof(PageSelectorWidget_GotoNextPage) == 0x000002, "Wrong size on PageSelectorWidget_GotoNextPage");
static_assert(offsetof(PageSelectorWidget_GotoNextPage, bForward) == 0x000000, "Member 'PageSelectorWidget_GotoNextPage::bForward' has a wrong offset!");
static_assert(offsetof(PageSelectorWidget_GotoNextPage, bSkipToEnd) == 0x000001, "Member 'PageSelectorWidget_GotoNextPage::bSkipToEnd' has a wrong offset!");

// Function BrickRigs.PageSelectorWidget.InitializePages
// 0x000C (0x000C - 0x0000)
struct PageSelectorWidget_InitializePages final
{
public:
	int32                                         InNumPages;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurrentPage;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumResults;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageSelectorWidget_InitializePages) == 0x000004, "Wrong alignment on PageSelectorWidget_InitializePages");
static_assert(sizeof(PageSelectorWidget_InitializePages) == 0x00000C, "Wrong size on PageSelectorWidget_InitializePages");
static_assert(offsetof(PageSelectorWidget_InitializePages, InNumPages) == 0x000000, "Member 'PageSelectorWidget_InitializePages::InNumPages' has a wrong offset!");
static_assert(offsetof(PageSelectorWidget_InitializePages, InCurrentPage) == 0x000004, "Member 'PageSelectorWidget_InitializePages::InCurrentPage' has a wrong offset!");
static_assert(offsetof(PageSelectorWidget_InitializePages, InNumResults) == 0x000008, "Member 'PageSelectorWidget_InitializePages::InNumResults' has a wrong offset!");

// Function BrickRigs.PageSelectorWidget.OnSliderValueChanged
// 0x0008 (0x0008 - 0x0000)
struct PageSelectorWidget_OnSliderValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PageSelectorWidget_OnSliderValueChanged) == 0x000004, "Wrong alignment on PageSelectorWidget_OnSliderValueChanged");
static_assert(sizeof(PageSelectorWidget_OnSliderValueChanged) == 0x000008, "Wrong size on PageSelectorWidget_OnSliderValueChanged");
static_assert(offsetof(PageSelectorWidget_OnSliderValueChanged, NewValue) == 0x000000, "Member 'PageSelectorWidget_OnSliderValueChanged::NewValue' has a wrong offset!");
static_assert(offsetof(PageSelectorWidget_OnSliderValueChanged, EventType) == 0x000004, "Member 'PageSelectorWidget_OnSliderValueChanged::EventType' has a wrong offset!");

// Function BrickRigs.PageSelectorWidget.SetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct PageSelectorWidget_SetCurrentPage final
{
public:
	int32                                         NewPage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageSelectorWidget_SetCurrentPage) == 0x000004, "Wrong alignment on PageSelectorWidget_SetCurrentPage");
static_assert(sizeof(PageSelectorWidget_SetCurrentPage) == 0x000004, "Wrong size on PageSelectorWidget_SetCurrentPage");
static_assert(offsetof(PageSelectorWidget_SetCurrentPage, NewPage) == 0x000000, "Member 'PageSelectorWidget_SetCurrentPage::NewPage' has a wrong offset!");

// Function BrickRigs.PageSelectorWidget.UpdateButtons
// 0x0002 (0x0002 - 0x0000)
struct PageSelectorWidget_UpdateButtons final
{
public:
	bool                                          bCanGoBack;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGoForward;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageSelectorWidget_UpdateButtons) == 0x000001, "Wrong alignment on PageSelectorWidget_UpdateButtons");
static_assert(sizeof(PageSelectorWidget_UpdateButtons) == 0x000002, "Wrong size on PageSelectorWidget_UpdateButtons");
static_assert(offsetof(PageSelectorWidget_UpdateButtons, bCanGoBack) == 0x000000, "Member 'PageSelectorWidget_UpdateButtons::bCanGoBack' has a wrong offset!");
static_assert(offsetof(PageSelectorWidget_UpdateButtons, bCanGoForward) == 0x000001, "Member 'PageSelectorWidget_UpdateButtons::bCanGoForward' has a wrong offset!");

// Function BrickRigs.PageSelectorWidget.GetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct PageSelectorWidget_GetCurrentPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageSelectorWidget_GetCurrentPage) == 0x000004, "Wrong alignment on PageSelectorWidget_GetCurrentPage");
static_assert(sizeof(PageSelectorWidget_GetCurrentPage) == 0x000004, "Wrong size on PageSelectorWidget_GetCurrentPage");
static_assert(offsetof(PageSelectorWidget_GetCurrentPage, ReturnValue) == 0x000000, "Member 'PageSelectorWidget_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function BrickRigs.PlayerInputComponent.InteractAxis
// 0x0004 (0x0004 - 0x0000)
struct PlayerInputComponent_InteractAxis final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInputComponent_InteractAxis) == 0x000004, "Wrong alignment on PlayerInputComponent_InteractAxis");
static_assert(sizeof(PlayerInputComponent_InteractAxis) == 0x000004, "Wrong size on PlayerInputComponent_InteractAxis");
static_assert(offsetof(PlayerInputComponent_InteractAxis, Val) == 0x000000, "Member 'PlayerInputComponent_InteractAxis::Val' has a wrong offset!");

// Function BrickRigs.PlayerInputComponent.GetCycleMeasurementSystemValueText
// 0x0018 (0x0018 - 0x0000)
struct PlayerInputComponent_GetCycleMeasurementSystemValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInputComponent_GetCycleMeasurementSystemValueText) == 0x000008, "Wrong alignment on PlayerInputComponent_GetCycleMeasurementSystemValueText");
static_assert(sizeof(PlayerInputComponent_GetCycleMeasurementSystemValueText) == 0x000018, "Wrong size on PlayerInputComponent_GetCycleMeasurementSystemValueText");
static_assert(offsetof(PlayerInputComponent_GetCycleMeasurementSystemValueText, ReturnValue) == 0x000000, "Member 'PlayerInputComponent_GetCycleMeasurementSystemValueText::ReturnValue' has a wrong offset!");

// Function BrickRigs.PlayerWidget.AddCameraBrickWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerWidget_AddCameraBrickWidget final
{
public:
	class UCameraBrickWidget*                     InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_AddCameraBrickWidget) == 0x000008, "Wrong alignment on PlayerWidget_AddCameraBrickWidget");
static_assert(sizeof(PlayerWidget_AddCameraBrickWidget) == 0x000008, "Wrong size on PlayerWidget_AddCameraBrickWidget");
static_assert(offsetof(PlayerWidget_AddCameraBrickWidget, InWidget) == 0x000000, "Member 'PlayerWidget_AddCameraBrickWidget::InWidget' has a wrong offset!");

// Function BrickRigs.PlayerWidget.AddCrosshairWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerWidget_AddCrosshairWidget final
{
public:
	class UCrosshairWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_AddCrosshairWidget) == 0x000008, "Wrong alignment on PlayerWidget_AddCrosshairWidget");
static_assert(sizeof(PlayerWidget_AddCrosshairWidget) == 0x000008, "Wrong size on PlayerWidget_AddCrosshairWidget");
static_assert(offsetof(PlayerWidget_AddCrosshairWidget, InWidget) == 0x000000, "Member 'PlayerWidget_AddCrosshairWidget::InWidget' has a wrong offset!");

// Function BrickRigs.PlayerWidget.AddCurrentItemWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerWidget_AddCurrentItemWidget final
{
public:
	class UCurrentItemWidget*                     InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_AddCurrentItemWidget) == 0x000008, "Wrong alignment on PlayerWidget_AddCurrentItemWidget");
static_assert(sizeof(PlayerWidget_AddCurrentItemWidget) == 0x000008, "Wrong size on PlayerWidget_AddCurrentItemWidget");
static_assert(offsetof(PlayerWidget_AddCurrentItemWidget, InWidget) == 0x000000, "Member 'PlayerWidget_AddCurrentItemWidget::InWidget' has a wrong offset!");

// Function BrickRigs.PlayerWidget.AddDashboardWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerWidget_AddDashboardWidget final
{
public:
	class UDashboardWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_AddDashboardWidget) == 0x000008, "Wrong alignment on PlayerWidget_AddDashboardWidget");
static_assert(sizeof(PlayerWidget_AddDashboardWidget) == 0x000008, "Wrong size on PlayerWidget_AddDashboardWidget");
static_assert(offsetof(PlayerWidget_AddDashboardWidget, InWidget) == 0x000000, "Member 'PlayerWidget_AddDashboardWidget::InWidget' has a wrong offset!");

// Function BrickRigs.PlayerWidget.AddHealthBarWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerWidget_AddHealthBarWidget final
{
public:
	class UHealthBarWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_AddHealthBarWidget) == 0x000008, "Wrong alignment on PlayerWidget_AddHealthBarWidget");
static_assert(sizeof(PlayerWidget_AddHealthBarWidget) == 0x000008, "Wrong size on PlayerWidget_AddHealthBarWidget");
static_assert(offsetof(PlayerWidget_AddHealthBarWidget, InWidget) == 0x000000, "Member 'PlayerWidget_AddHealthBarWidget::InWidget' has a wrong offset!");

// Function BrickRigs.PlayerWidget.AddRestrictedAreaWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerWidget_AddRestrictedAreaWidget final
{
public:
	class URestrictedAreaWidget*                  InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_AddRestrictedAreaWidget) == 0x000008, "Wrong alignment on PlayerWidget_AddRestrictedAreaWidget");
static_assert(sizeof(PlayerWidget_AddRestrictedAreaWidget) == 0x000008, "Wrong size on PlayerWidget_AddRestrictedAreaWidget");
static_assert(offsetof(PlayerWidget_AddRestrictedAreaWidget, InWidget) == 0x000000, "Member 'PlayerWidget_AddRestrictedAreaWidget::InWidget' has a wrong offset!");

// Function BrickRigs.PlayerWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerWidget_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on PlayerWidget_OnHUDVisibilityChanged");
static_assert(sizeof(PlayerWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on PlayerWidget_OnHUDVisibilityChanged");
static_assert(offsetof(PlayerWidget_OnHUDVisibilityChanged, NewVisibility) == 0x000000, "Member 'PlayerWidget_OnHUDVisibilityChanged::NewVisibility' has a wrong offset!");

// Function BrickRigs.ProjectileManagerComponent.OnParticleComponentFinished
// 0x0008 (0x0008 - 0x0000)
struct ProjectileManagerComponent_OnParticleComponentFinished final
{
public:
	class UParticleSystemComponent*               PSC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileManagerComponent_OnParticleComponentFinished) == 0x000008, "Wrong alignment on ProjectileManagerComponent_OnParticleComponentFinished");
static_assert(sizeof(ProjectileManagerComponent_OnParticleComponentFinished) == 0x000008, "Wrong size on ProjectileManagerComponent_OnParticleComponentFinished");
static_assert(offsetof(ProjectileManagerComponent_OnParticleComponentFinished, PSC) == 0x000000, "Member 'ProjectileManagerComponent_OnParticleComponentFinished::PSC' has a wrong offset!");

// Function BrickRigs.PropertyCategoryWidget.UpdateCategory
// 0x0018 (0x0018 - 0x0000)
struct PropertyCategoryWidget_UpdateCategory final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyCategoryWidget_UpdateCategory) == 0x000008, "Wrong alignment on PropertyCategoryWidget_UpdateCategory");
static_assert(sizeof(PropertyCategoryWidget_UpdateCategory) == 0x000018, "Wrong size on PropertyCategoryWidget_UpdateCategory");
static_assert(offsetof(PropertyCategoryWidget_UpdateCategory, DisplayName) == 0x000000, "Member 'PropertyCategoryWidget_UpdateCategory::DisplayName' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.AddPropertyWidget
// 0x0010 (0x0010 - 0x0000)
struct PropertyContainerWidget_AddPropertyWidget final
{
public:
	class UPropertyWidget*                        Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  InOrientation;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PropertyContainerWidget_AddPropertyWidget) == 0x000008, "Wrong alignment on PropertyContainerWidget_AddPropertyWidget");
static_assert(sizeof(PropertyContainerWidget_AddPropertyWidget) == 0x000010, "Wrong size on PropertyContainerWidget_AddPropertyWidget");
static_assert(offsetof(PropertyContainerWidget_AddPropertyWidget, Widget) == 0x000000, "Member 'PropertyContainerWidget_AddPropertyWidget::Widget' has a wrong offset!");
static_assert(offsetof(PropertyContainerWidget_AddPropertyWidget, InOrientation) == 0x000008, "Member 'PropertyContainerWidget_AddPropertyWidget::InOrientation' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.OpenContextMenu
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerWidget_OpenContextMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerWidget_OpenContextMenu) == 0x000001, "Wrong alignment on PropertyContainerWidget_OpenContextMenu");
static_assert(sizeof(PropertyContainerWidget_OpenContextMenu) == 0x000001, "Wrong size on PropertyContainerWidget_OpenContextMenu");
static_assert(offsetof(PropertyContainerWidget_OpenContextMenu, ReturnValue) == 0x000000, "Member 'PropertyContainerWidget_OpenContextMenu::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.UpdateColorStyle
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerWidget_UpdateColorStyle final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerWidget_UpdateColorStyle) == 0x000001, "Wrong alignment on PropertyContainerWidget_UpdateColorStyle");
static_assert(sizeof(PropertyContainerWidget_UpdateColorStyle) == 0x000001, "Wrong size on PropertyContainerWidget_UpdateColorStyle");
static_assert(offsetof(PropertyContainerWidget_UpdateColorStyle, InColorStyle) == 0x000000, "Member 'PropertyContainerWidget_UpdateColorStyle::InColorStyle' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.UpdateIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerWidget_UpdateIsReadOnly final
{
public:
	bool                                          bInReadOnly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerWidget_UpdateIsReadOnly) == 0x000001, "Wrong alignment on PropertyContainerWidget_UpdateIsReadOnly");
static_assert(sizeof(PropertyContainerWidget_UpdateIsReadOnly) == 0x000001, "Wrong size on PropertyContainerWidget_UpdateIsReadOnly");
static_assert(offsetof(PropertyContainerWidget_UpdateIsReadOnly, bInReadOnly) == 0x000000, "Member 'PropertyContainerWidget_UpdateIsReadOnly::bInReadOnly' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.UpdateOrientation
// 0x0001 (0x0001 - 0x0000)
struct PropertyContainerWidget_UpdateOrientation final
{
public:
	EOrientation                                  InOrientation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerWidget_UpdateOrientation) == 0x000001, "Wrong alignment on PropertyContainerWidget_UpdateOrientation");
static_assert(sizeof(PropertyContainerWidget_UpdateOrientation) == 0x000001, "Wrong size on PropertyContainerWidget_UpdateOrientation");
static_assert(offsetof(PropertyContainerWidget_UpdateOrientation, InOrientation) == 0x000000, "Member 'PropertyContainerWidget_UpdateOrientation::InOrientation' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.GetMenuButtonPanelWidget
// 0x0008 (0x0008 - 0x0000)
struct PropertyContainerWidget_GetMenuButtonPanelWidget final
{
public:
	class UMenuButtonPanelWidget*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerWidget_GetMenuButtonPanelWidget) == 0x000008, "Wrong alignment on PropertyContainerWidget_GetMenuButtonPanelWidget");
static_assert(sizeof(PropertyContainerWidget_GetMenuButtonPanelWidget) == 0x000008, "Wrong size on PropertyContainerWidget_GetMenuButtonPanelWidget");
static_assert(offsetof(PropertyContainerWidget_GetMenuButtonPanelWidget, ReturnValue) == 0x000000, "Member 'PropertyContainerWidget_GetMenuButtonPanelWidget::ReturnValue' has a wrong offset!");

// Function BrickRigs.PropertyContainerWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct PropertyContainerWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyContainerWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on PropertyContainerWidget_GetWidgetToFocus");
static_assert(sizeof(PropertyContainerWidget_GetWidgetToFocus) == 0x000008, "Wrong size on PropertyContainerWidget_GetWidgetToFocus");
static_assert(offsetof(PropertyContainerWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'PropertyContainerWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.RadioButtonWidget.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButtonWidget_SetIsSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButtonWidget_SetIsSelected) == 0x000001, "Wrong alignment on RadioButtonWidget_SetIsSelected");
static_assert(sizeof(RadioButtonWidget_SetIsSelected) == 0x000001, "Wrong size on RadioButtonWidget_SetIsSelected");
static_assert(offsetof(RadioButtonWidget_SetIsSelected, bNewSelected) == 0x000000, "Member 'RadioButtonWidget_SetIsSelected::bNewSelected' has a wrong offset!");

// Function BrickRigs.RestrictedAreaVolume.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RestrictedAreaVolume_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RestrictedAreaVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on RestrictedAreaVolume_OnBeginOverlap");
static_assert(sizeof(RestrictedAreaVolume_OnBeginOverlap) == 0x0000A8, "Wrong size on RestrictedAreaVolume_OnBeginOverlap");
static_assert(offsetof(RestrictedAreaVolume_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RestrictedAreaVolume_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'RestrictedAreaVolume_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnBeginOverlap, OtherComp) == 0x000010, "Member 'RestrictedAreaVolume_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RestrictedAreaVolume_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'RestrictedAreaVolume_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnBeginOverlap, SweepResult) == 0x000020, "Member 'RestrictedAreaVolume_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function BrickRigs.RestrictedAreaVolume.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RestrictedAreaVolume_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RestrictedAreaVolume_OnEndOverlap) == 0x000008, "Wrong alignment on RestrictedAreaVolume_OnEndOverlap");
static_assert(sizeof(RestrictedAreaVolume_OnEndOverlap) == 0x000020, "Wrong size on RestrictedAreaVolume_OnEndOverlap");
static_assert(offsetof(RestrictedAreaVolume_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'RestrictedAreaVolume_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'RestrictedAreaVolume_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnEndOverlap, OtherComp) == 0x000010, "Member 'RestrictedAreaVolume_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RestrictedAreaVolume_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RestrictedAreaVolume_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function BrickRigs.SeatBrick.Interact_EnterSeat
// 0x0008 (0x0008 - 0x0000)
struct SeatBrick_Interact_EnterSeat final
{
public:
	class ABrickPlayerController*                 PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeatBrick_Interact_EnterSeat) == 0x000008, "Wrong alignment on SeatBrick_Interact_EnterSeat");
static_assert(sizeof(SeatBrick_Interact_EnterSeat) == 0x000008, "Wrong size on SeatBrick_Interact_EnterSeat");
static_assert(offsetof(SeatBrick_Interact_EnterSeat, PC) == 0x000000, "Member 'SeatBrick_Interact_EnterSeat::PC' has a wrong offset!");

// Function BrickRigs.SeatBrick.OnRep_Character
// 0x0008 (0x0008 - 0x0000)
struct SeatBrick_OnRep_Character final
{
public:
	class ABrickCharacter*                        OldCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeatBrick_OnRep_Character) == 0x000008, "Wrong alignment on SeatBrick_OnRep_Character");
static_assert(sizeof(SeatBrick_OnRep_Character) == 0x000008, "Wrong size on SeatBrick_OnRep_Character");
static_assert(offsetof(SeatBrick_OnRep_Character, OldCharacter) == 0x000000, "Member 'SeatBrick_OnRep_Character::OldCharacter' has a wrong offset!");

// Function BrickRigs.SeatBrick.GetCurrentGear
// 0x0004 (0x0004 - 0x0000)
struct SeatBrick_GetCurrentGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeatBrick_GetCurrentGear) == 0x000004, "Wrong alignment on SeatBrick_GetCurrentGear");
static_assert(sizeof(SeatBrick_GetCurrentGear) == 0x000004, "Wrong size on SeatBrick_GetCurrentGear");
static_assert(offsetof(SeatBrick_GetCurrentGear, ReturnValue) == 0x000000, "Member 'SeatBrick_GetCurrentGear::ReturnValue' has a wrong offset!");

// Function BrickRigs.SeatBrick.GetFlipMotorThrottle
// 0x0001 (0x0001 - 0x0000)
struct SeatBrick_GetFlipMotorThrottle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeatBrick_GetFlipMotorThrottle) == 0x000001, "Wrong alignment on SeatBrick_GetFlipMotorThrottle");
static_assert(sizeof(SeatBrick_GetFlipMotorThrottle) == 0x000001, "Wrong size on SeatBrick_GetFlipMotorThrottle");
static_assert(offsetof(SeatBrick_GetFlipMotorThrottle, ReturnValue) == 0x000000, "Member 'SeatBrick_GetFlipMotorThrottle::ReturnValue' has a wrong offset!");

// Function BrickRigs.ServerWidget.UpdateServer
// 0x0168 (0x0168 - 0x0000)
struct ServerWidget_UpdateServer final
{
public:
	struct FBrickOnlineSessionInfo                SessionInfo;                                       // 0x0000(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerWidget_UpdateServer) == 0x000008, "Wrong alignment on ServerWidget_UpdateServer");
static_assert(sizeof(ServerWidget_UpdateServer) == 0x000168, "Wrong size on ServerWidget_UpdateServer");
static_assert(offsetof(ServerWidget_UpdateServer, SessionInfo) == 0x000000, "Member 'ServerWidget_UpdateServer::SessionInfo' has a wrong offset!");

// Function BrickRigs.SpectatorWidget.SpectateNextCharacter
// 0x0001 (0x0001 - 0x0000)
struct SpectatorWidget_SpectateNextCharacter final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorWidget_SpectateNextCharacter) == 0x000001, "Wrong alignment on SpectatorWidget_SpectateNextCharacter");
static_assert(sizeof(SpectatorWidget_SpectateNextCharacter) == 0x000001, "Wrong size on SpectatorWidget_SpectateNextCharacter");
static_assert(offsetof(SpectatorWidget_SpectateNextCharacter, bNext) == 0x000000, "Member 'SpectatorWidget_SpectateNextCharacter::bNext' has a wrong offset!");

// Function BrickRigs.SpectatorWidget.UpdateSpectatedPlayer
// 0x0020 (0x0020 - 0x0000)
struct SpectatorWidget_UpdateSpectatedPlayer final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValidPlayer;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatorWidget_UpdateSpectatedPlayer) == 0x000008, "Wrong alignment on SpectatorWidget_UpdateSpectatedPlayer");
static_assert(sizeof(SpectatorWidget_UpdateSpectatedPlayer) == 0x000020, "Wrong size on SpectatorWidget_UpdateSpectatedPlayer");
static_assert(offsetof(SpectatorWidget_UpdateSpectatedPlayer, PlayerName) == 0x000000, "Member 'SpectatorWidget_UpdateSpectatedPlayer::PlayerName' has a wrong offset!");
static_assert(offsetof(SpectatorWidget_UpdateSpectatedPlayer, bIsValidPlayer) == 0x000018, "Member 'SpectatorWidget_UpdateSpectatedPlayer::bIsValidPlayer' has a wrong offset!");

// Function BrickRigs.SpectatorWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct SpectatorWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on SpectatorWidget_GetWidgetToFocus");
static_assert(sizeof(SpectatorWidget_GetWidgetToFocus) == 0x000008, "Wrong size on SpectatorWidget_GetWidgetToFocus");
static_assert(offsetof(SpectatorWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'SpectatorWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function BrickRigs.SwitchBrick.Interact_Deactivate
// 0x0008 (0x0008 - 0x0000)
struct SwitchBrick_Interact_Deactivate final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchBrick_Interact_Deactivate) == 0x000008, "Wrong alignment on SwitchBrick_Interact_Deactivate");
static_assert(sizeof(SwitchBrick_Interact_Deactivate) == 0x000008, "Wrong size on SwitchBrick_Interact_Deactivate");
static_assert(offsetof(SwitchBrick_Interact_Deactivate, OtherPC) == 0x000000, "Member 'SwitchBrick_Interact_Deactivate::OtherPC' has a wrong offset!");

// Function BrickRigs.SwitchBrick.Interact_Switch
// 0x0010 (0x0010 - 0x0000)
struct SwitchBrick_Interact_Switch final
{
public:
	class ABrickPlayerController*                 OtherPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SwitchBrick_Interact_Switch) == 0x000008, "Wrong alignment on SwitchBrick_Interact_Switch");
static_assert(sizeof(SwitchBrick_Interact_Switch) == 0x000010, "Wrong size on SwitchBrick_Interact_Switch");
static_assert(offsetof(SwitchBrick_Interact_Switch, OtherPC) == 0x000000, "Member 'SwitchBrick_Interact_Switch::OtherPC' has a wrong offset!");
static_assert(offsetof(SwitchBrick_Interact_Switch, Val) == 0x000008, "Member 'SwitchBrick_Interact_Switch::Val' has a wrong offset!");

// Function BrickRigs.TeamScoreWidget.UpdateScore
// 0x0008 (0x0008 - 0x0000)
struct TeamScoreWidget_UpdateScore final
{
public:
	int32                                         NewScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMaxScore;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamScoreWidget_UpdateScore) == 0x000004, "Wrong alignment on TeamScoreWidget_UpdateScore");
static_assert(sizeof(TeamScoreWidget_UpdateScore) == 0x000008, "Wrong size on TeamScoreWidget_UpdateScore");
static_assert(offsetof(TeamScoreWidget_UpdateScore, NewScore) == 0x000000, "Member 'TeamScoreWidget_UpdateScore::NewScore' has a wrong offset!");
static_assert(offsetof(TeamScoreWidget_UpdateScore, NewMaxScore) == 0x000004, "Member 'TeamScoreWidget_UpdateScore::NewMaxScore' has a wrong offset!");

// Function BrickRigs.TeamScoreWidget.UpdateTeamAttitude
// 0x0001 (0x0001 - 0x0000)
struct TeamScoreWidget_UpdateTeamAttitude final
{
public:
	ETeamAttitude                                 NewTeamAttitude;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamScoreWidget_UpdateTeamAttitude) == 0x000001, "Wrong alignment on TeamScoreWidget_UpdateTeamAttitude");
static_assert(sizeof(TeamScoreWidget_UpdateTeamAttitude) == 0x000001, "Wrong size on TeamScoreWidget_UpdateTeamAttitude");
static_assert(offsetof(TeamScoreWidget_UpdateTeamAttitude, NewTeamAttitude) == 0x000000, "Member 'TeamScoreWidget_UpdateTeamAttitude::NewTeamAttitude' has a wrong offset!");

// Function BrickRigs.TeamScoreWidget.UpdateTeamIcon
// 0x0008 (0x0008 - 0x0000)
struct TeamScoreWidget_UpdateTeamIcon final
{
public:
	class UTexture2D*                             NewIcon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamScoreWidget_UpdateTeamIcon) == 0x000008, "Wrong alignment on TeamScoreWidget_UpdateTeamIcon");
static_assert(sizeof(TeamScoreWidget_UpdateTeamIcon) == 0x000008, "Wrong size on TeamScoreWidget_UpdateTeamIcon");
static_assert(offsetof(TeamScoreWidget_UpdateTeamIcon, NewIcon) == 0x000000, "Member 'TeamScoreWidget_UpdateTeamIcon::NewIcon' has a wrong offset!");

// Function BrickRigs.TeamScoreWidget.UpdateTeamName
// 0x0018 (0x0018 - 0x0000)
struct TeamScoreWidget_UpdateTeamName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamScoreWidget_UpdateTeamName) == 0x000008, "Wrong alignment on TeamScoreWidget_UpdateTeamName");
static_assert(sizeof(TeamScoreWidget_UpdateTeamName) == 0x000018, "Wrong size on TeamScoreWidget_UpdateTeamName");
static_assert(offsetof(TeamScoreWidget_UpdateTeamName, NewName) == 0x000000, "Member 'TeamScoreWidget_UpdateTeamName::NewName' has a wrong offset!");

// Function BrickRigs.TimespanPropertyWidget.SetTimespanPropertyValue
// 0x0010 (0x0010 - 0x0000)
struct TimespanPropertyWidget_SetTimespanPropertyValue final
{
public:
	EValueChangedEventType                        EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              NewValue;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimespanPropertyWidget_SetTimespanPropertyValue) == 0x000008, "Wrong alignment on TimespanPropertyWidget_SetTimespanPropertyValue");
static_assert(sizeof(TimespanPropertyWidget_SetTimespanPropertyValue) == 0x000010, "Wrong size on TimespanPropertyWidget_SetTimespanPropertyValue");
static_assert(offsetof(TimespanPropertyWidget_SetTimespanPropertyValue, EventType) == 0x000000, "Member 'TimespanPropertyWidget_SetTimespanPropertyValue::EventType' has a wrong offset!");
static_assert(offsetof(TimespanPropertyWidget_SetTimespanPropertyValue, NewValue) == 0x000008, "Member 'TimespanPropertyWidget_SetTimespanPropertyValue::NewValue' has a wrong offset!");

// Function BrickRigs.TimespanPropertyWidget.UpdateTimespanProperty
// 0x0020 (0x0020 - 0x0000)
struct TimespanPropertyWidget_UpdateTimespanProperty final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              MinValue;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              MaxValue;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInfinite;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimespanPropertyWidget_UpdateTimespanProperty) == 0x000008, "Wrong alignment on TimespanPropertyWidget_UpdateTimespanProperty");
static_assert(sizeof(TimespanPropertyWidget_UpdateTimespanProperty) == 0x000020, "Wrong size on TimespanPropertyWidget_UpdateTimespanProperty");
static_assert(offsetof(TimespanPropertyWidget_UpdateTimespanProperty, Timespan) == 0x000000, "Member 'TimespanPropertyWidget_UpdateTimespanProperty::Timespan' has a wrong offset!");
static_assert(offsetof(TimespanPropertyWidget_UpdateTimespanProperty, MinValue) == 0x000008, "Member 'TimespanPropertyWidget_UpdateTimespanProperty::MinValue' has a wrong offset!");
static_assert(offsetof(TimespanPropertyWidget_UpdateTimespanProperty, MaxValue) == 0x000010, "Member 'TimespanPropertyWidget_UpdateTimespanProperty::MaxValue' has a wrong offset!");
static_assert(offsetof(TimespanPropertyWidget_UpdateTimespanProperty, bAllowInfinite) == 0x000018, "Member 'TimespanPropertyWidget_UpdateTimespanProperty::bAllowInfinite' has a wrong offset!");

// Function BrickRigs.TooltipWidget.UpdateTooltipContent
// 0x0040 (0x0040 - 0x0000)
struct TooltipWidget_UpdateTooltipContent final
{
public:
	struct FTooltipContent                        InContent;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TooltipWidget_UpdateTooltipContent) == 0x000008, "Wrong alignment on TooltipWidget_UpdateTooltipContent");
static_assert(sizeof(TooltipWidget_UpdateTooltipContent) == 0x000040, "Wrong size on TooltipWidget_UpdateTooltipContent");
static_assert(offsetof(TooltipWidget_UpdateTooltipContent, InContent) == 0x000000, "Member 'TooltipWidget_UpdateTooltipContent::InContent' has a wrong offset!");

// Function BrickRigs.Train.SetTrainTrack
// 0x0004 (0x0004 - 0x0000)
struct Train_SetTrainTrack final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Train_SetTrainTrack) == 0x000004, "Wrong alignment on Train_SetTrainTrack");
static_assert(sizeof(Train_SetTrainTrack) == 0x000004, "Wrong size on Train_SetTrainTrack");
static_assert(offsetof(Train_SetTrainTrack, Index_0) == 0x000000, "Member 'Train_SetTrainTrack::Index_0' has a wrong offset!");

// Function BrickRigs.UGCFunctionLibrary.MakeOnlineUGCItemId
// 0x0020 (0x0020 - 0x0000)
struct UGCFunctionLibrary_MakeOnlineUGCItemId final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFluUGCItemIdWrapper                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCFunctionLibrary_MakeOnlineUGCItemId) == 0x000008, "Wrong alignment on UGCFunctionLibrary_MakeOnlineUGCItemId");
static_assert(sizeof(UGCFunctionLibrary_MakeOnlineUGCItemId) == 0x000020, "Wrong size on UGCFunctionLibrary_MakeOnlineUGCItemId");
static_assert(offsetof(UGCFunctionLibrary_MakeOnlineUGCItemId, ItemId) == 0x000000, "Member 'UGCFunctionLibrary_MakeOnlineUGCItemId::ItemId' has a wrong offset!");
static_assert(offsetof(UGCFunctionLibrary_MakeOnlineUGCItemId, ReturnValue) == 0x000010, "Member 'UGCFunctionLibrary_MakeOnlineUGCItemId::ReturnValue' has a wrong offset!");

// Function BrickRigs.UGCPropertyWidget.UpdateItemsText
// 0x0004 (0x0004 - 0x0000)
struct UGCPropertyWidget_UpdateItemsText final
{
public:
	int32                                         NumSelected;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCPropertyWidget_UpdateItemsText) == 0x000004, "Wrong alignment on UGCPropertyWidget_UpdateItemsText");
static_assert(sizeof(UGCPropertyWidget_UpdateItemsText) == 0x000004, "Wrong size on UGCPropertyWidget_UpdateItemsText");
static_assert(offsetof(UGCPropertyWidget_UpdateItemsText, NumSelected) == 0x000000, "Member 'UGCPropertyWidget_UpdateItemsText::NumSelected' has a wrong offset!");

// Function BrickRigs.UGCTaskPopupWidget.UpdateIsFinished
// 0x0002 (0x0002 - 0x0000)
struct UGCTaskPopupWidget_UpdateIsFinished final
{
public:
	bool                                          bNewFinished;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewSuccess;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCTaskPopupWidget_UpdateIsFinished) == 0x000001, "Wrong alignment on UGCTaskPopupWidget_UpdateIsFinished");
static_assert(sizeof(UGCTaskPopupWidget_UpdateIsFinished) == 0x000002, "Wrong size on UGCTaskPopupWidget_UpdateIsFinished");
static_assert(offsetof(UGCTaskPopupWidget_UpdateIsFinished, bNewFinished) == 0x000000, "Member 'UGCTaskPopupWidget_UpdateIsFinished::bNewFinished' has a wrong offset!");
static_assert(offsetof(UGCTaskPopupWidget_UpdateIsFinished, bNewSuccess) == 0x000001, "Member 'UGCTaskPopupWidget_UpdateIsFinished::bNewSuccess' has a wrong offset!");

// Function BrickRigs.UGCTaskPopupWidget.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct UGCTaskPopupWidget_UpdateProgress final
{
public:
	float                                         NewProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UGCTaskPopupWidget_UpdateProgress) == 0x000004, "Wrong alignment on UGCTaskPopupWidget_UpdateProgress");
static_assert(sizeof(UGCTaskPopupWidget_UpdateProgress) == 0x000004, "Wrong size on UGCTaskPopupWidget_UpdateProgress");
static_assert(offsetof(UGCTaskPopupWidget_UpdateProgress, NewProgress) == 0x000000, "Member 'UGCTaskPopupWidget_UpdateProgress::NewProgress' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.BoolAsText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_BoolAsText final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_BoolAsText) == 0x000008, "Wrong alignment on UIFunctionLibrary_BoolAsText");
static_assert(sizeof(UIFunctionLibrary_BoolAsText) == 0x000020, "Wrong size on UIFunctionLibrary_BoolAsText");
static_assert(offsetof(UIFunctionLibrary_BoolAsText, bValue) == 0x000000, "Member 'UIFunctionLibrary_BoolAsText::bValue' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_BoolAsText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_BoolAsText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.BrickSizeToText
// 0x0028 (0x0028 - 0x0000)
struct UIFunctionLibrary_BrickSizeToText final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroAsUndetermined;                               // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_BrickSizeToText) == 0x000008, "Wrong alignment on UIFunctionLibrary_BrickSizeToText");
static_assert(sizeof(UIFunctionLibrary_BrickSizeToText) == 0x000028, "Wrong size on UIFunctionLibrary_BrickSizeToText");
static_assert(offsetof(UIFunctionLibrary_BrickSizeToText, Size) == 0x000000, "Member 'UIFunctionLibrary_BrickSizeToText::Size' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_BrickSizeToText, bZeroAsUndetermined) == 0x00000C, "Member 'UIFunctionLibrary_BrickSizeToText::bZeroAsUndetermined' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_BrickSizeToText, ReturnValue) == 0x000010, "Member 'UIFunctionLibrary_BrickSizeToText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.BrickUnitsToText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_BrickUnitsToText final
{
public:
	float                                         UnrealUnits;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroAsUndetermined;                               // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_BrickUnitsToText) == 0x000008, "Wrong alignment on UIFunctionLibrary_BrickUnitsToText");
static_assert(sizeof(UIFunctionLibrary_BrickUnitsToText) == 0x000020, "Wrong size on UIFunctionLibrary_BrickUnitsToText");
static_assert(offsetof(UIFunctionLibrary_BrickUnitsToText, UnrealUnits) == 0x000000, "Member 'UIFunctionLibrary_BrickUnitsToText::UnrealUnits' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_BrickUnitsToText, bZeroAsUndetermined) == 0x000004, "Member 'UIFunctionLibrary_BrickUnitsToText::bZeroAsUndetermined' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_BrickUnitsToText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_BrickUnitsToText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.ConvertToRealUnits
// 0x000C (0x000C - 0x0000)
struct UIFunctionLibrary_ConvertToRealUnits final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENumericValueType                             ValueType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_ConvertToRealUnits) == 0x000004, "Wrong alignment on UIFunctionLibrary_ConvertToRealUnits");
static_assert(sizeof(UIFunctionLibrary_ConvertToRealUnits) == 0x00000C, "Wrong size on UIFunctionLibrary_ConvertToRealUnits");
static_assert(offsetof(UIFunctionLibrary_ConvertToRealUnits, Value) == 0x000000, "Member 'UIFunctionLibrary_ConvertToRealUnits::Value' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_ConvertToRealUnits, ValueType) == 0x000004, "Member 'UIFunctionLibrary_ConvertToRealUnits::ValueType' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_ConvertToRealUnits, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_ConvertToRealUnits::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.ConvertToUnrealUnits
// 0x000C (0x000C - 0x0000)
struct UIFunctionLibrary_ConvertToUnrealUnits final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENumericValueType                             ValueType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_ConvertToUnrealUnits) == 0x000004, "Wrong alignment on UIFunctionLibrary_ConvertToUnrealUnits");
static_assert(sizeof(UIFunctionLibrary_ConvertToUnrealUnits) == 0x00000C, "Wrong size on UIFunctionLibrary_ConvertToUnrealUnits");
static_assert(offsetof(UIFunctionLibrary_ConvertToUnrealUnits, Value) == 0x000000, "Member 'UIFunctionLibrary_ConvertToUnrealUnits::Value' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_ConvertToUnrealUnits, ValueType) == 0x000004, "Member 'UIFunctionLibrary_ConvertToUnrealUnits::ValueType' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_ConvertToUnrealUnits, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_ConvertToUnrealUnits::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.FilterTextForProfanity
// 0x0038 (0x0038 - 0x0000)
struct UIFunctionLibrary_FilterTextForProfanity final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFunctionLibrary_FilterTextForProfanity) == 0x000008, "Wrong alignment on UIFunctionLibrary_FilterTextForProfanity");
static_assert(sizeof(UIFunctionLibrary_FilterTextForProfanity) == 0x000038, "Wrong size on UIFunctionLibrary_FilterTextForProfanity");
static_assert(offsetof(UIFunctionLibrary_FilterTextForProfanity, InText) == 0x000000, "Member 'UIFunctionLibrary_FilterTextForProfanity::InText' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_FilterTextForProfanity, OutText) == 0x000018, "Member 'UIFunctionLibrary_FilterTextForProfanity::OutText' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_FilterTextForProfanity, ReturnValue) == 0x000030, "Member 'UIFunctionLibrary_FilterTextForProfanity::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.FilterTextForURLs
// 0x0038 (0x0038 - 0x0000)
struct UIFunctionLibrary_FilterTextForURLs final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFunctionLibrary_FilterTextForURLs) == 0x000008, "Wrong alignment on UIFunctionLibrary_FilterTextForURLs");
static_assert(sizeof(UIFunctionLibrary_FilterTextForURLs) == 0x000038, "Wrong size on UIFunctionLibrary_FilterTextForURLs");
static_assert(offsetof(UIFunctionLibrary_FilterTextForURLs, InText) == 0x000000, "Member 'UIFunctionLibrary_FilterTextForURLs::InText' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_FilterTextForURLs, OutText) == 0x000018, "Member 'UIFunctionLibrary_FilterTextForURLs::OutText' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_FilterTextForURLs, ReturnValue) == 0x000030, "Member 'UIFunctionLibrary_FilterTextForURLs::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.FindFirstWidgetInWidgetPath
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_FindFirstWidgetInWidgetPath final
{
public:
	TArray<class UWidget*>                        Widgets;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetPathWrapper                     WidgetPath;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_FindFirstWidgetInWidgetPath) == 0x000008, "Wrong alignment on UIFunctionLibrary_FindFirstWidgetInWidgetPath");
static_assert(sizeof(UIFunctionLibrary_FindFirstWidgetInWidgetPath) == 0x000020, "Wrong size on UIFunctionLibrary_FindFirstWidgetInWidgetPath");
static_assert(offsetof(UIFunctionLibrary_FindFirstWidgetInWidgetPath, Widgets) == 0x000000, "Member 'UIFunctionLibrary_FindFirstWidgetInWidgetPath::Widgets' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_FindFirstWidgetInWidgetPath, WidgetPath) == 0x000010, "Member 'UIFunctionLibrary_FindFirstWidgetInWidgetPath::WidgetPath' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_FindFirstWidgetInWidgetPath, ReturnValue) == 0x000018, "Member 'UIFunctionLibrary_FindFirstWidgetInWidgetPath::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.GetAmmoTypeDisplayText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_GetAmmoTypeDisplayText final
{
public:
	EAmmoType                                     InAmmoType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLongName;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_GetAmmoTypeDisplayText) == 0x000008, "Wrong alignment on UIFunctionLibrary_GetAmmoTypeDisplayText");
static_assert(sizeof(UIFunctionLibrary_GetAmmoTypeDisplayText) == 0x000020, "Wrong size on UIFunctionLibrary_GetAmmoTypeDisplayText");
static_assert(offsetof(UIFunctionLibrary_GetAmmoTypeDisplayText, InAmmoType) == 0x000000, "Member 'UIFunctionLibrary_GetAmmoTypeDisplayText::InAmmoType' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetAmmoTypeDisplayText, bLongName) == 0x000001, "Member 'UIFunctionLibrary_GetAmmoTypeDisplayText::bLongName' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetAmmoTypeDisplayText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_GetAmmoTypeDisplayText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.GetCameraModeDisplayText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_GetCameraModeDisplayText final
{
public:
	ECameraMode                                   InCameraMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_GetCameraModeDisplayText) == 0x000008, "Wrong alignment on UIFunctionLibrary_GetCameraModeDisplayText");
static_assert(sizeof(UIFunctionLibrary_GetCameraModeDisplayText) == 0x000020, "Wrong size on UIFunctionLibrary_GetCameraModeDisplayText");
static_assert(offsetof(UIFunctionLibrary_GetCameraModeDisplayText, InCameraMode) == 0x000000, "Member 'UIFunctionLibrary_GetCameraModeDisplayText::InCameraMode' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetCameraModeDisplayText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_GetCameraModeDisplayText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.GetFireModeDisplayText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_GetFireModeDisplayText final
{
public:
	EFireMode                                     InFireMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_GetFireModeDisplayText) == 0x000008, "Wrong alignment on UIFunctionLibrary_GetFireModeDisplayText");
static_assert(sizeof(UIFunctionLibrary_GetFireModeDisplayText) == 0x000020, "Wrong size on UIFunctionLibrary_GetFireModeDisplayText");
static_assert(offsetof(UIFunctionLibrary_GetFireModeDisplayText, InFireMode) == 0x000000, "Member 'UIFunctionLibrary_GetFireModeDisplayText::InFireMode' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetFireModeDisplayText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_GetFireModeDisplayText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.GetHUDVisibilityDisplayText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_GetHUDVisibilityDisplayText final
{
public:
	EHUDVisibility                                InHUDVisibility;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_GetHUDVisibilityDisplayText) == 0x000008, "Wrong alignment on UIFunctionLibrary_GetHUDVisibilityDisplayText");
static_assert(sizeof(UIFunctionLibrary_GetHUDVisibilityDisplayText) == 0x000020, "Wrong size on UIFunctionLibrary_GetHUDVisibilityDisplayText");
static_assert(offsetof(UIFunctionLibrary_GetHUDVisibilityDisplayText, InHUDVisibility) == 0x000000, "Member 'UIFunctionLibrary_GetHUDVisibilityDisplayText::InHUDVisibility' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetHUDVisibilityDisplayText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_GetHUDVisibilityDisplayText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.GetMultidimensionalNumberDelimiter
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_GetMultidimensionalNumberDelimiter final
{
public:
	ENumericValueType                             ValueType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_GetMultidimensionalNumberDelimiter) == 0x000008, "Wrong alignment on UIFunctionLibrary_GetMultidimensionalNumberDelimiter");
static_assert(sizeof(UIFunctionLibrary_GetMultidimensionalNumberDelimiter) == 0x000020, "Wrong size on UIFunctionLibrary_GetMultidimensionalNumberDelimiter");
static_assert(offsetof(UIFunctionLibrary_GetMultidimensionalNumberDelimiter, ValueType) == 0x000000, "Member 'UIFunctionLibrary_GetMultidimensionalNumberDelimiter::ValueType' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetMultidimensionalNumberDelimiter, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_GetMultidimensionalNumberDelimiter::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.GetUnitFormat
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_GetUnitFormat final
{
public:
	ENumericValueType                             ValueType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_GetUnitFormat) == 0x000008, "Wrong alignment on UIFunctionLibrary_GetUnitFormat");
static_assert(sizeof(UIFunctionLibrary_GetUnitFormat) == 0x000020, "Wrong size on UIFunctionLibrary_GetUnitFormat");
static_assert(offsetof(UIFunctionLibrary_GetUnitFormat, ValueType) == 0x000000, "Member 'UIFunctionLibrary_GetUnitFormat::ValueType' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_GetUnitFormat, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_GetUnitFormat::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.IsWidgetInWidgetPath
// 0x0018 (0x0018 - 0x0000)
struct UIFunctionLibrary_IsWidgetInWidgetPath final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetPathWrapper                     WidgetPath;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFunctionLibrary_IsWidgetInWidgetPath) == 0x000008, "Wrong alignment on UIFunctionLibrary_IsWidgetInWidgetPath");
static_assert(sizeof(UIFunctionLibrary_IsWidgetInWidgetPath) == 0x000018, "Wrong size on UIFunctionLibrary_IsWidgetInWidgetPath");
static_assert(offsetof(UIFunctionLibrary_IsWidgetInWidgetPath, Widget) == 0x000000, "Member 'UIFunctionLibrary_IsWidgetInWidgetPath::Widget' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_IsWidgetInWidgetPath, WidgetPath) == 0x000008, "Member 'UIFunctionLibrary_IsWidgetInWidgetPath::WidgetPath' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_IsWidgetInWidgetPath, ReturnValue) == 0x000010, "Member 'UIFunctionLibrary_IsWidgetInWidgetPath::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.NumberToText
// 0x0028 (0x0028 - 0x0000)
struct UIFunctionLibrary_NumberToText final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENumericValueType                             ValueType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFractionalDigits;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeUnits;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysSign;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_NumberToText) == 0x000008, "Wrong alignment on UIFunctionLibrary_NumberToText");
static_assert(sizeof(UIFunctionLibrary_NumberToText) == 0x000028, "Wrong size on UIFunctionLibrary_NumberToText");
static_assert(offsetof(UIFunctionLibrary_NumberToText, Value) == 0x000000, "Member 'UIFunctionLibrary_NumberToText::Value' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_NumberToText, ValueType) == 0x000004, "Member 'UIFunctionLibrary_NumberToText::ValueType' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_NumberToText, MaxFractionalDigits) == 0x000008, "Member 'UIFunctionLibrary_NumberToText::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_NumberToText, bIncludeUnits) == 0x00000C, "Member 'UIFunctionLibrary_NumberToText::bIncludeUnits' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_NumberToText, bAlwaysSign) == 0x00000D, "Member 'UIFunctionLibrary_NumberToText::bAlwaysSign' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_NumberToText, ReturnValue) == 0x000010, "Member 'UIFunctionLibrary_NumberToText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.OpenURLInExternalBrowser
// 0x0010 (0x0010 - 0x0000)
struct UIFunctionLibrary_OpenURLInExternalBrowser final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_OpenURLInExternalBrowser) == 0x000008, "Wrong alignment on UIFunctionLibrary_OpenURLInExternalBrowser");
static_assert(sizeof(UIFunctionLibrary_OpenURLInExternalBrowser) == 0x000010, "Wrong size on UIFunctionLibrary_OpenURLInExternalBrowser");
static_assert(offsetof(UIFunctionLibrary_OpenURLInExternalBrowser, URL) == 0x000000, "Member 'UIFunctionLibrary_OpenURLInExternalBrowser::URL' has a wrong offset!");

// Function BrickRigs.UIFunctionLibrary.TimespanAsText
// 0x0020 (0x0020 - 0x0000)
struct UIFunctionLibrary_TimespanAsText final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFunctionLibrary_TimespanAsText) == 0x000008, "Wrong alignment on UIFunctionLibrary_TimespanAsText");
static_assert(sizeof(UIFunctionLibrary_TimespanAsText) == 0x000020, "Wrong size on UIFunctionLibrary_TimespanAsText");
static_assert(offsetof(UIFunctionLibrary_TimespanAsText, Timespan) == 0x000000, "Member 'UIFunctionLibrary_TimespanAsText::Timespan' has a wrong offset!");
static_assert(offsetof(UIFunctionLibrary_TimespanAsText, ReturnValue) == 0x000008, "Member 'UIFunctionLibrary_TimespanAsText::ReturnValue' has a wrong offset!");

// Function BrickRigs.UserIdPropertyWidget.OnUserIdTextChanged
// 0x0020 (0x0020 - 0x0000)
struct UserIdPropertyWidget_OnUserIdTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EValueChangedEventType                        EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserIdPropertyWidget_OnUserIdTextChanged) == 0x000008, "Wrong alignment on UserIdPropertyWidget_OnUserIdTextChanged");
static_assert(sizeof(UserIdPropertyWidget_OnUserIdTextChanged) == 0x000020, "Wrong size on UserIdPropertyWidget_OnUserIdTextChanged");
static_assert(offsetof(UserIdPropertyWidget_OnUserIdTextChanged, Text) == 0x000000, "Member 'UserIdPropertyWidget_OnUserIdTextChanged::Text' has a wrong offset!");
static_assert(offsetof(UserIdPropertyWidget_OnUserIdTextChanged, EventType) == 0x000018, "Member 'UserIdPropertyWidget_OnUserIdTextChanged::EventType' has a wrong offset!");

// Function BrickRigs.UserIdPropertyWidget.UpdateUserId
// 0x0020 (0x0020 - 0x0000)
struct UserIdPropertyWidget_UpdateUserId final
{
public:
	class FText                                   InUserId;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserIdPropertyWidget_UpdateUserId) == 0x000008, "Wrong alignment on UserIdPropertyWidget_UpdateUserId");
static_assert(sizeof(UserIdPropertyWidget_UpdateUserId) == 0x000020, "Wrong size on UserIdPropertyWidget_UpdateUserId");
static_assert(offsetof(UserIdPropertyWidget_UpdateUserId, InUserId) == 0x000000, "Member 'UserIdPropertyWidget_UpdateUserId::InUserId' has a wrong offset!");
static_assert(offsetof(UserIdPropertyWidget_UpdateUserId, bIsValid) == 0x000018, "Member 'UserIdPropertyWidget_UpdateUserId::bIsValid' has a wrong offset!");

// Function BrickRigs.UserIdPropertyWidget.UpdateUsername
// 0x0018 (0x0018 - 0x0000)
struct UserIdPropertyWidget_UpdateUsername final
{
public:
	class FText                                   InUsername;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserIdPropertyWidget_UpdateUsername) == 0x000008, "Wrong alignment on UserIdPropertyWidget_UpdateUsername");
static_assert(sizeof(UserIdPropertyWidget_UpdateUsername) == 0x000018, "Wrong size on UserIdPropertyWidget_UpdateUsername");
static_assert(offsetof(UserIdPropertyWidget_UpdateUsername, InUsername) == 0x000000, "Member 'UserIdPropertyWidget_UpdateUsername::InUsername' has a wrong offset!");

// Function BrickRigs.VehicleIconWidget.UpdateVehicleIcon
// 0x0003 (0x0003 - 0x0000)
struct VehicleIconWidget_UpdateVehicleIcon final
{
public:
	bool                                          bNewIsLocalPlayer;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCanBeDamaged;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehiclePinMode                               NewPinMode;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleIconWidget_UpdateVehicleIcon) == 0x000001, "Wrong alignment on VehicleIconWidget_UpdateVehicleIcon");
static_assert(sizeof(VehicleIconWidget_UpdateVehicleIcon) == 0x000003, "Wrong size on VehicleIconWidget_UpdateVehicleIcon");
static_assert(offsetof(VehicleIconWidget_UpdateVehicleIcon, bNewIsLocalPlayer) == 0x000000, "Member 'VehicleIconWidget_UpdateVehicleIcon::bNewIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(VehicleIconWidget_UpdateVehicleIcon, bNewCanBeDamaged) == 0x000001, "Member 'VehicleIconWidget_UpdateVehicleIcon::bNewCanBeDamaged' has a wrong offset!");
static_assert(offsetof(VehicleIconWidget_UpdateVehicleIcon, NewPinMode) == 0x000002, "Member 'VehicleIconWidget_UpdateVehicleIcon::NewPinMode' has a wrong offset!");

// Function BrickRigs.VideoSettingsPageWidget.UpdateApplyButton
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingsPageWidget_UpdateApplyButton final
{
public:
	bool                                          bCanApply;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsPageWidget_UpdateApplyButton) == 0x000001, "Wrong alignment on VideoSettingsPageWidget_UpdateApplyButton");
static_assert(sizeof(VideoSettingsPageWidget_UpdateApplyButton) == 0x000001, "Wrong size on VideoSettingsPageWidget_UpdateApplyButton");
static_assert(offsetof(VideoSettingsPageWidget_UpdateApplyButton, bCanApply) == 0x000000, "Member 'VideoSettingsPageWidget_UpdateApplyButton::bCanApply' has a wrong offset!");

// Function BrickRigs.VideoSettingsPageWidget.AreVideoSettingsDirty
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingsPageWidget_AreVideoSettingsDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsPageWidget_AreVideoSettingsDirty) == 0x000001, "Wrong alignment on VideoSettingsPageWidget_AreVideoSettingsDirty");
static_assert(sizeof(VideoSettingsPageWidget_AreVideoSettingsDirty) == 0x000001, "Wrong size on VideoSettingsPageWidget_AreVideoSettingsDirty");
static_assert(offsetof(VideoSettingsPageWidget_AreVideoSettingsDirty, ReturnValue) == 0x000000, "Member 'VideoSettingsPageWidget_AreVideoSettingsDirty::ReturnValue' has a wrong offset!");

}

