#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WindowManager

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_WindowManager.WBP_WindowManager_C.ExecuteUbergraph_WBP_WindowManager
// 0x0038 (0x0038 - 0x0000)
struct WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMainWidgetBase*                        K2Node_Event_Widget;                               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0020(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager) == 0x000008, "Wrong alignment on WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager");
static_assert(sizeof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager) == 0x000038, "Wrong size on WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager");
static_assert(offsetof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager, EntryPoint) == 0x000000, "Member 'WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000004, "Member 'WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager, K2Node_MakeStruct_Margin) == 0x000008, "Member 'WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager, K2Node_Event_Widget) == 0x000018, "Member 'WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager::K2Node_Event_Widget' has a wrong offset!");
static_assert(offsetof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager, K2Node_MakeStruct_Anchors) == 0x000020, "Member 'WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager, CallFunc_AddChildToCanvas_ReturnValue) == 0x000030, "Member 'WBP_WindowManager_C_ExecuteUbergraph_WBP_WindowManager::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function WBP_WindowManager.WBP_WindowManager_C.AddActiveWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_WindowManager_C_AddActiveWidget final
{
public:
	class UMainWidgetBase*                        Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WindowManager_C_AddActiveWidget) == 0x000008, "Wrong alignment on WBP_WindowManager_C_AddActiveWidget");
static_assert(sizeof(WBP_WindowManager_C_AddActiveWidget) == 0x000008, "Wrong size on WBP_WindowManager_C_AddActiveWidget");
static_assert(offsetof(WBP_WindowManager_C_AddActiveWidget, Widget) == 0x000000, "Member 'WBP_WindowManager_C_AddActiveWidget::Widget' has a wrong offset!");

}

