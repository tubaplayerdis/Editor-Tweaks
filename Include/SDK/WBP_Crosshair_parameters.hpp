#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "BrickRigs_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair.WBP_Crosshair_C.ExecuteUbergraph_WBP_Crosshair
// 0x0048 (0x0048 - 0x0000)
struct WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIColorStyle                            Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIColorStyle                            Temp_byte_Variable_2;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            Temp_byte_Variable_5;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            Temp_byte_Variable_6;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIColorStyle                            Temp_byte_Variable_7;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FClientDamageInfo                      K2Node_Event_DamageInfo;                           // 0x0014(0x000C)(ConstParm, NoDestructor)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            K2Node_Select_Default;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewAttaching;                        // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            K2Node_Select_Default_1;                           // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBlockingHit;                         // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bWithinRange;                         // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            K2Node_Select_Default_3;                           // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIColorStyle                            K2Node_Select_Default_4;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair) == 0x000008, "Wrong alignment on WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair");
static_assert(sizeof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair) == 0x000048, "Wrong size on WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_RandomFloatInRange_ReturnValue) == 0x000004, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable) == 0x000008, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_bool_Variable) == 0x000009, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_1) == 0x00000A, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_2) == 0x00000B, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_bool_Variable_1) == 0x00000C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_3) == 0x00000D, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_4) == 0x00000E, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_bool_Variable_2) == 0x00000F, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_5) == 0x000010, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_bool_Variable_3) == 0x000011, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_6) == 0x000012, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_7) == 0x000013, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_DamageInfo) == 0x000014, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_DamageInfo' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Square_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_MapRangeClamped_ReturnValue) == 0x000024, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_bool_Variable_4) == 0x000038, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default) == 0x000039, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_bNewAttaching) == 0x00003A, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_bNewAttaching' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default_1) == 0x00003B, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default_2) == 0x00003C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_bBlockingHit) == 0x00003D, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_bWithinRange) == 0x00003E, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_bWithinRange' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default_3) == 0x00003F, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default_4) == 0x000040, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default_4' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.UpdateWinchAttachment
// 0x0002 (0x0002 - 0x0000)
struct WBP_Crosshair_C_UpdateWinchAttachment final
{
public:
	bool                                          bBlockingHit;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bWithinRange;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_C_UpdateWinchAttachment) == 0x000001, "Wrong alignment on WBP_Crosshair_C_UpdateWinchAttachment");
static_assert(sizeof(WBP_Crosshair_C_UpdateWinchAttachment) == 0x000002, "Wrong size on WBP_Crosshair_C_UpdateWinchAttachment");
static_assert(offsetof(WBP_Crosshair_C_UpdateWinchAttachment, bBlockingHit) == 0x000000, "Member 'WBP_Crosshair_C_UpdateWinchAttachment::bBlockingHit' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWinchAttachment, bWithinRange) == 0x000001, "Member 'WBP_Crosshair_C_UpdateWinchAttachment::bWithinRange' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.UpdateIsAttachingWinch
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_C_UpdateIsAttachingWinch final
{
public:
	bool                                          bNewAttaching;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_C_UpdateIsAttachingWinch) == 0x000001, "Wrong alignment on WBP_Crosshair_C_UpdateIsAttachingWinch");
static_assert(sizeof(WBP_Crosshair_C_UpdateIsAttachingWinch) == 0x000001, "Wrong size on WBP_Crosshair_C_UpdateIsAttachingWinch");
static_assert(offsetof(WBP_Crosshair_C_UpdateIsAttachingWinch, bNewAttaching) == 0x000000, "Member 'WBP_Crosshair_C_UpdateIsAttachingWinch::bNewAttaching' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.PlayHitAnimation
// 0x000C (0x000C - 0x0000)
struct WBP_Crosshair_C_PlayHitAnimation final
{
public:
	struct FClientDamageInfo                      DamageInfo;                                        // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_C_PlayHitAnimation) == 0x000004, "Wrong alignment on WBP_Crosshair_C_PlayHitAnimation");
static_assert(sizeof(WBP_Crosshair_C_PlayHitAnimation) == 0x00000C, "Wrong size on WBP_Crosshair_C_PlayHitAnimation");
static_assert(offsetof(WBP_Crosshair_C_PlayHitAnimation, DamageInfo) == 0x000000, "Member 'WBP_Crosshair_C_PlayHitAnimation::DamageInfo' has a wrong offset!");

}

