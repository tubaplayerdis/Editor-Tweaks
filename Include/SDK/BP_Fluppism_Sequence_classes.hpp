#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Fluppism_Sequence

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BrickRigs_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Fluppism_Sequence.BP_Fluppism_Sequence_C
// 0x0050 (0x0290 - 0x0240)
class ABP_Fluppism_Sequence_C final : public AMenuSequence
{
public:
	class USpotLightComponent*                    SpotLight1;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PlacementRadius;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlacementAngle;                                    // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumBobs;                                           // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandStream;                                        // 0x0284(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	float                                         Jitter;                                            // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Fluppism_Sequence_C">();
	}
	static class ABP_Fluppism_Sequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Fluppism_Sequence_C>();
	}
};
static_assert(alignof(ABP_Fluppism_Sequence_C) == 0x000008, "Wrong alignment on ABP_Fluppism_Sequence_C");
static_assert(sizeof(ABP_Fluppism_Sequence_C) == 0x000290, "Wrong size on ABP_Fluppism_Sequence_C");
static_assert(offsetof(ABP_Fluppism_Sequence_C, SpotLight1) == 0x000240, "Member 'ABP_Fluppism_Sequence_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, SpotLight) == 0x000248, "Member 'ABP_Fluppism_Sequence_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, Camera) == 0x000250, "Member 'ABP_Fluppism_Sequence_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, ParticleSystem1) == 0x000258, "Member 'ABP_Fluppism_Sequence_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, ParticleSystem) == 0x000260, "Member 'ABP_Fluppism_Sequence_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, SkeletalMesh) == 0x000268, "Member 'ABP_Fluppism_Sequence_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_Fluppism_Sequence_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, PlacementRadius) == 0x000278, "Member 'ABP_Fluppism_Sequence_C::PlacementRadius' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, PlacementAngle) == 0x00027C, "Member 'ABP_Fluppism_Sequence_C::PlacementAngle' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, NumBobs) == 0x000280, "Member 'ABP_Fluppism_Sequence_C::NumBobs' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, RandStream) == 0x000284, "Member 'ABP_Fluppism_Sequence_C::RandStream' has a wrong offset!");
static_assert(offsetof(ABP_Fluppism_Sequence_C, Jitter) == 0x00028C, "Member 'ABP_Fluppism_Sequence_C::Jitter' has a wrong offset!");

}

