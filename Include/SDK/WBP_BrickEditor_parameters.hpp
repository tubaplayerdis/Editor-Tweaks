#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BrickEditor

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "BrickRigs_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_BrickEditor.WBP_BrickEditor_C.OnBorderMouseEvent
// 0x0218 (0x0218 - 0x0000)
struct WBP_BrickEditor_C_OnBorderMouseEvent final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
};
static_assert(alignof(WBP_BrickEditor_C_OnBorderMouseEvent) == 0x000008, "Wrong alignment on WBP_BrickEditor_C_OnBorderMouseEvent");
static_assert(sizeof(WBP_BrickEditor_C_OnBorderMouseEvent) == 0x000218, "Wrong size on WBP_BrickEditor_C_OnBorderMouseEvent");
static_assert(offsetof(WBP_BrickEditor_C_OnBorderMouseEvent, MyGeometry) == 0x000000, "Member 'WBP_BrickEditor_C_OnBorderMouseEvent::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_OnBorderMouseEvent, MouseEvent) == 0x000038, "Member 'WBP_BrickEditor_C_OnBorderMouseEvent::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_OnBorderMouseEvent, ReturnValue) == 0x0000A8, "Member 'WBP_BrickEditor_C_OnBorderMouseEvent::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_OnBorderMouseEvent, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'WBP_BrickEditor_C_OnBorderMouseEvent::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.AddGameOverlayWidget
// 0x0038 (0x0038 - 0x0000)
struct WBP_BrickEditor_C_AddGameOverlayWidget final
{
public:
	class UGameOverlayWidget*                     Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x001C(0x0010)(NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrickEditor_C_AddGameOverlayWidget) == 0x000008, "Wrong alignment on WBP_BrickEditor_C_AddGameOverlayWidget");
static_assert(sizeof(WBP_BrickEditor_C_AddGameOverlayWidget) == 0x000038, "Wrong size on WBP_BrickEditor_C_AddGameOverlayWidget");
static_assert(offsetof(WBP_BrickEditor_C_AddGameOverlayWidget, Widget) == 0x000000, "Member 'WBP_BrickEditor_C_AddGameOverlayWidget::Widget' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_AddGameOverlayWidget, ReturnValue) == 0x000008, "Member 'WBP_BrickEditor_C_AddGameOverlayWidget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_AddGameOverlayWidget, K2Node_MakeStruct_Margin) == 0x00000C, "Member 'WBP_BrickEditor_C_AddGameOverlayWidget::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_AddGameOverlayWidget, K2Node_MakeStruct_Anchors) == 0x00001C, "Member 'WBP_BrickEditor_C_AddGameOverlayWidget::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_AddGameOverlayWidget, CallFunc_AddChildToCanvas_ReturnValue) == 0x000030, "Member 'WBP_BrickEditor_C_AddGameOverlayWidget::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.UpdateCanPlaceObjects
// 0x0001 (0x0001 - 0x0000)
struct WBP_BrickEditor_C_UpdateCanPlaceObjects final
{
public:
	bool                                          bNewCanPlace;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_BrickEditor_C_UpdateCanPlaceObjects) == 0x000001, "Wrong alignment on WBP_BrickEditor_C_UpdateCanPlaceObjects");
static_assert(sizeof(WBP_BrickEditor_C_UpdateCanPlaceObjects) == 0x000001, "Wrong size on WBP_BrickEditor_C_UpdateCanPlaceObjects");
static_assert(offsetof(WBP_BrickEditor_C_UpdateCanPlaceObjects, bNewCanPlace) == 0x000000, "Member 'WBP_BrickEditor_C_UpdateCanPlaceObjects::bNewCanPlace' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.UpdateSelection
// 0x0020 (0x0020 - 0x0000)
struct WBP_BrickEditor_C_UpdateSelection final
{
public:
	class FText                                   SelectionName;                                     // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bAnythingSelected;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_BrickEditor_C_UpdateSelection) == 0x000008, "Wrong alignment on WBP_BrickEditor_C_UpdateSelection");
static_assert(sizeof(WBP_BrickEditor_C_UpdateSelection) == 0x000020, "Wrong size on WBP_BrickEditor_C_UpdateSelection");
static_assert(offsetof(WBP_BrickEditor_C_UpdateSelection, SelectionName) == 0x000000, "Member 'WBP_BrickEditor_C_UpdateSelection::SelectionName' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_UpdateSelection, bAnythingSelected) == 0x000018, "Member 'WBP_BrickEditor_C_UpdateSelection::bAnythingSelected' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature final
{
public:
	EBrickUIColorStyle                            InColorStyle;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIStyleState                            InContentStyleState;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature) == 0x000001, "Wrong alignment on WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature");
static_assert(sizeof(WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature) == 0x000002, "Wrong size on WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature");
static_assert(offsetof(WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature, InColorStyle) == 0x000000, "Member 'WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature::InColorStyle' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature, InContentStyleState) == 0x000001, "Member 'WBP_BrickEditor_C_BndEvt__ResetFilterButton_K2Node_ComponentBoundEvent_0_OnUpdateContentStyle__DelegateSignature::InContentStyleState' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.AddMirrorModeWidget
// 0x0010 (0x0010 - 0x0000)
struct WBP_BrickEditor_C_AddMirrorModeWidget final
{
public:
	class UBrickEditorMirrorAxisWidget*           Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrickEditor_C_AddMirrorModeWidget) == 0x000008, "Wrong alignment on WBP_BrickEditor_C_AddMirrorModeWidget");
static_assert(sizeof(WBP_BrickEditor_C_AddMirrorModeWidget) == 0x000010, "Wrong size on WBP_BrickEditor_C_AddMirrorModeWidget");
static_assert(offsetof(WBP_BrickEditor_C_AddMirrorModeWidget, Widget) == 0x000000, "Member 'WBP_BrickEditor_C_AddMirrorModeWidget::Widget' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_AddMirrorModeWidget, Index_0) == 0x000008, "Member 'WBP_BrickEditor_C_AddMirrorModeWidget::Index_0' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.UpdateCanClearPlacableFilter
// 0x0001 (0x0001 - 0x0000)
struct WBP_BrickEditor_C_UpdateCanClearPlacableFilter final
{
public:
	bool                                          bNewCanClear;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_BrickEditor_C_UpdateCanClearPlacableFilter) == 0x000001, "Wrong alignment on WBP_BrickEditor_C_UpdateCanClearPlacableFilter");
static_assert(sizeof(WBP_BrickEditor_C_UpdateCanClearPlacableFilter) == 0x000001, "Wrong size on WBP_BrickEditor_C_UpdateCanClearPlacableFilter");
static_assert(offsetof(WBP_BrickEditor_C_UpdateCanClearPlacableFilter, bNewCanClear) == 0x000000, "Member 'WBP_BrickEditor_C_UpdateCanClearPlacableFilter::bNewCanClear' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.UpdateEditorUIScale
// 0x0004 (0x0004 - 0x0000)
struct WBP_BrickEditor_C_UpdateEditorUIScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrickEditor_C_UpdateEditorUIScale) == 0x000004, "Wrong alignment on WBP_BrickEditor_C_UpdateEditorUIScale");
static_assert(sizeof(WBP_BrickEditor_C_UpdateEditorUIScale) == 0x000004, "Wrong size on WBP_BrickEditor_C_UpdateEditorUIScale");
static_assert(offsetof(WBP_BrickEditor_C_UpdateEditorUIScale, NewScale) == 0x000000, "Member 'WBP_BrickEditor_C_UpdateEditorUIScale::NewScale' has a wrong offset!");

// Function WBP_BrickEditor.WBP_BrickEditor_C.ExecuteUbergraph_WBP_BrickEditor
// 0x0048 (0x0048 - 0x0000)
struct WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIColorStyle                            Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewCanPlace;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   K2Node_Event_SelectionName;                        // 0x0008(0x0018)(ConstParm)
	bool                                          K2Node_Event_bAnythingSelected;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrickUIColorStyle                            K2Node_Select_Default;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIColorStyle                            K2Node_ComponentBoundEvent_InColorStyle;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrickUIStyleState                            K2Node_ComponentBoundEvent_InContentStyleState;    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBrickEditorMirrorAxisWidget*           K2Node_Event_Widget;                               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index;                                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewCanClear;                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewScale;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor) == 0x000008, "Wrong alignment on WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor");
static_assert(sizeof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor) == 0x000048, "Wrong size on WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, EntryPoint) == 0x000000, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, Temp_bool_Variable) == 0x000004, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, Temp_byte_Variable) == 0x000005, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_bNewCanPlace) == 0x000007, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_bNewCanPlace' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_SelectionName) == 0x000008, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_SelectionName' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_bAnythingSelected) == 0x000020, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_bAnythingSelected' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Select_Default) == 0x000021, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_ComponentBoundEvent_InColorStyle) == 0x000022, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_ComponentBoundEvent_InColorStyle' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_ComponentBoundEvent_InContentStyleState) == 0x000023, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_ComponentBoundEvent_InContentStyleState' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_Widget) == 0x000028, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_Widget' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_Index) == 0x000030, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_bNewCanClear) == 0x000034, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_bNewCanClear' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000038, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor, K2Node_Event_NewScale) == 0x000040, "Member 'WBP_BrickEditor_C_ExecuteUbergraph_WBP_BrickEditor::K2Node_Event_NewScale' has a wrong offset!");

}

