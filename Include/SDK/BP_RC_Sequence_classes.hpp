#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RC_Sequence

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BrickRigs_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RC_Sequence.BP_RC_Sequence_C
// 0x0048 (0x0288 - 0x0240)
class ABP_RC_Sequence_C : public AMenuSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Vehicle;                                           // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       TrackSpline;                                       // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Remote;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Character;                                         // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentDist;                                       // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrailerOffset;                                     // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RC_Sequence(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void KickVehicle(const struct FVector& Impulse);

	struct FVector GetLookAtTarget() const;
	struct FRotator GetTrailerRotation() const;
	bool IsVehicleDestroyed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RC_Sequence_C">();
	}
	static class ABP_RC_Sequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RC_Sequence_C>();
	}
};
static_assert(alignof(ABP_RC_Sequence_C) == 0x000008, "Wrong alignment on ABP_RC_Sequence_C");
static_assert(sizeof(ABP_RC_Sequence_C) == 0x000288, "Wrong size on ABP_RC_Sequence_C");
static_assert(offsetof(ABP_RC_Sequence_C, UberGraphFrame) == 0x000240, "Member 'ABP_RC_Sequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, Camera) == 0x000248, "Member 'ABP_RC_Sequence_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, Vehicle) == 0x000250, "Member 'ABP_RC_Sequence_C::Vehicle' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, TrackSpline) == 0x000258, "Member 'ABP_RC_Sequence_C::TrackSpline' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, Remote) == 0x000260, "Member 'ABP_RC_Sequence_C::Remote' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, Character) == 0x000268, "Member 'ABP_RC_Sequence_C::Character' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_RC_Sequence_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, Speed) == 0x000278, "Member 'ABP_RC_Sequence_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, CurrentDist) == 0x00027C, "Member 'ABP_RC_Sequence_C::CurrentDist' has a wrong offset!");
static_assert(offsetof(ABP_RC_Sequence_C, TrailerOffset) == 0x000280, "Member 'ABP_RC_Sequence_C::TrailerOffset' has a wrong offset!");

}

